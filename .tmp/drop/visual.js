/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var calendarblizC41067D025DF46B28D497705D8C4301B_DEBUG;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 117:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   t: () => (/* binding */ DatePickerDialog)\n/* harmony export */ });\n/* harmony import */ var _custom_calendar_daterangepicker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(993);\n// Import your custom DateRangePicker\n\n\nclass DatePickerDialog {\n    static id = \"DatePickerDialog\";\n    picker = null;\n    host;\n    constructor(options, initialState) {\n        this.host = options.host;\n        const s = (v) => { const d = new Date(v); return v && !isNaN(d.getTime()) ? d : null; };\n        const ids = initialState?.initialDialogState || {};\n        const dt = initialState?.defaultTime || {};\n        const startDate = s(ids.startDate) || new Date();\n        const endDate = s(ids.endDate) || new Date();\n        const defaultStart = s(dt.start);\n        const defaultEnd = s(dt.end);\n        const dateRangePickerOptions = {\n            initialStartDate: startDate,\n            initialEndDate: endDate,\n            defaultStartDate: defaultStart,\n            defaultEndDate: defaultEnd,\n            targetElement: options.element,\n        };\n        this.picker = new _custom_calendar_daterangepicker__WEBPACK_IMPORTED_MODULE_0__/* .DateRangePicker */ .U(dateRangePickerOptions, {\n            onChange: (range) => {\n                this.host.setResult({\n                    start: range.start ?? new Date(),\n                    end: range.end ?? new Date()\n                });\n            },\n            onReset: () => {\n                if (defaultStart && defaultEnd) {\n                    this.picker?.setDates(defaultStart, defaultEnd);\n                    this.host.setResult({ start: defaultStart, end: defaultEnd, reset: true });\n                }\n            }\n        });\n        this.picker.setDates(startDate, endDate);\n    }\n    destroy() {\n        if (this.picker && typeof this.picker.destroy === 'function') {\n            this.picker.destroy();\n        }\n    }\n}\nglobalThis.dialogRegistry = globalThis.dialogRegistry || {};\nglobalThis.dialogRegistry[DatePickerDialog.id] = DatePickerDialog;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE3LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFJQSxxQ0FBcUM7QUFDK0U7QUFDL0U7QUFLOUIsTUFBTSxnQkFBZ0I7SUFDekIsTUFBTSxDQUFDLEVBQUUsR0FBRyxrQkFBa0IsQ0FBQztJQUN2QixNQUFNLEdBQTJCLElBQUksQ0FBQztJQUN0QyxJQUFJLENBQU07SUFFbEIsWUFBWSxPQUFpQyxFQUFFLFlBQWlCO1FBQzVELElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztRQUN6QixNQUFNLENBQUMsR0FBRyxDQUFDLENBQU0sRUFBRSxFQUFFLEdBQUcsTUFBTSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0YsTUFBTSxHQUFHLEdBQUcsWUFBWSxFQUFFLGtCQUFrQixJQUFJLEVBQUUsQ0FBQztRQUNuRCxNQUFNLEVBQUUsR0FBRyxZQUFZLEVBQUUsV0FBVyxJQUFJLEVBQUUsQ0FBQztRQUMzQyxNQUFNLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFLENBQUM7UUFDakQsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLElBQUksRUFBRSxDQUFDO1FBQzdDLE1BQU0sWUFBWSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QixNQUFNLHNCQUFzQixHQUEyQjtZQUNuRCxnQkFBZ0IsRUFBRSxTQUFTO1lBQzNCLGNBQWMsRUFBRSxPQUFPO1lBQ3ZCLGdCQUFnQixFQUFFLFlBQVk7WUFDOUIsY0FBYyxFQUFFLFVBQVU7WUFDMUIsYUFBYSxFQUFFLE9BQU8sQ0FBQyxPQUFPO1NBQ2pDLENBQUM7UUFDRixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksc0ZBQWUsQ0FBQyxzQkFBc0IsRUFBRTtZQUN0RCxRQUFRLEVBQUUsQ0FBQyxLQUErQyxFQUFFLEVBQUU7Z0JBQzFELElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO29CQUNoQixLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUssSUFBSSxJQUFJLElBQUksRUFBRTtvQkFDaEMsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHLElBQUksSUFBSSxJQUFJLEVBQUU7aUJBQy9CLENBQUMsQ0FBQztZQUNQLENBQUM7WUFDRCxPQUFPLEVBQUUsR0FBRyxFQUFFO2dCQUNWLElBQUksWUFBWSxJQUFJLFVBQVUsRUFBRSxDQUFDO29CQUM3QixJQUFJLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUM7b0JBRWhELElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2dCQUU5RSxDQUFDO1lBQ0wsQ0FBQztTQUNKLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRU0sT0FBTztRQUNWLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxPQUFRLElBQUksQ0FBQyxNQUFjLENBQUMsT0FBTyxLQUFLLFVBQVUsRUFBRSxDQUFDO1lBQ25FLElBQUksQ0FBQyxNQUFjLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDbkMsQ0FBQztJQUNMLENBQUM7O0FBV0osVUFBa0IsQ0FBQyxjQUFjLEdBQUksVUFBa0IsQ0FBQyxjQUFjLElBQUksRUFBRSxDQUFDO0FBQzdFLFVBQWtCLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxHQUFHLGdCQUFnQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FsZW5kYXJibGl6QzQxMDY3RDAyNURGNDZCMjhENDk3NzA1RDhDNDMwMUJfREVCVUcvLi9zcmMvRGF0ZVBpY2tlckRpYWxvZy50cz8xMTkxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwb3dlcmJpIGZyb20gXCJwb3dlcmJpLXZpc3VhbHMtYXBpXCI7XG5pbXBvcnQgRGlhbG9nQ29uc3RydWN0b3JPcHRpb25zID0gcG93ZXJiaS5leHRlbnNpYmlsaXR5LnZpc3VhbC5EaWFsb2dDb25zdHJ1Y3Rvck9wdGlvbnM7XG5pbXBvcnQgRGlhbG9nQWN0aW9uID0gcG93ZXJiaS5EaWFsb2dBY3Rpb247XG5cbi8vIEltcG9ydCB5b3VyIGN1c3RvbSBEYXRlUmFuZ2VQaWNrZXJcbmltcG9ydCB7IERhdGVSYW5nZVBpY2tlcixEYXRlUmFuZ2VQaWNrZXJDYWxsYmFja3MsRGF0ZVJhbmdlUGlja2VyT3B0aW9ucyB9IGZyb20gJy4vY3VzdG9tX2NhbGVuZGFyL2RhdGVyYW5nZXBpY2tlcic7XG5pbXBvcnQgJy4vY3VzdG9tX2NhbGVuZGFyL3N0eWxlLmNzcyc7XG5pbXBvcnQgeyBEYXRlSW50ZXJ2YWwgfSBmcm9tICcuL2N1c3RvbV9jYWxlbmRhci9jdXN0b21UeXBlJztcblxuXG5cbmV4cG9ydCBjbGFzcyBEYXRlUGlja2VyRGlhbG9nIHtcbiAgICBzdGF0aWMgaWQgPSBcIkRhdGVQaWNrZXJEaWFsb2dcIjtcbiAgICBwcml2YXRlIHBpY2tlcjogRGF0ZVJhbmdlUGlja2VyIHwgbnVsbCA9IG51bGw7XG4gICAgcHJpdmF0ZSBob3N0OiBhbnk7XG5cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBEaWFsb2dDb25zdHJ1Y3Rvck9wdGlvbnMsIGluaXRpYWxTdGF0ZTogYW55KSB7XG4gICAgICAgIHRoaXMuaG9zdCA9IG9wdGlvbnMuaG9zdDtcbiAgICAgICAgY29uc3QgcyA9ICh2OiBhbnkpID0+IHsgY29uc3QgZCA9IG5ldyBEYXRlKHYpOyByZXR1cm4gdiAmJiAhaXNOYU4oZC5nZXRUaW1lKCkpID8gZCA6IG51bGw7IH07XG4gICAgICAgIGNvbnN0IGlkcyA9IGluaXRpYWxTdGF0ZT8uaW5pdGlhbERpYWxvZ1N0YXRlIHx8IHt9O1xuICAgICAgICBjb25zdCBkdCA9IGluaXRpYWxTdGF0ZT8uZGVmYXVsdFRpbWUgfHwge307XG4gICAgICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IHMoaWRzLnN0YXJ0RGF0ZSkgfHwgbmV3IERhdGUoKTtcbiAgICAgICAgY29uc3QgZW5kRGF0ZSA9IHMoaWRzLmVuZERhdGUpIHx8IG5ldyBEYXRlKCk7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRTdGFydCA9IHMoZHQuc3RhcnQpO1xuICAgICAgICBjb25zdCBkZWZhdWx0RW5kID0gcyhkdC5lbmQpO1xuICAgICAgICBjb25zdCBkYXRlUmFuZ2VQaWNrZXJPcHRpb25zOiBEYXRlUmFuZ2VQaWNrZXJPcHRpb25zID0ge1xuICAgICAgICAgICAgaW5pdGlhbFN0YXJ0RGF0ZTogc3RhcnREYXRlLFxuICAgICAgICAgICAgaW5pdGlhbEVuZERhdGU6IGVuZERhdGUsXG4gICAgICAgICAgICBkZWZhdWx0U3RhcnREYXRlOiBkZWZhdWx0U3RhcnQgLFxuICAgICAgICAgICAgZGVmYXVsdEVuZERhdGU6IGRlZmF1bHRFbmQgLFxuICAgICAgICAgICAgdGFyZ2V0RWxlbWVudDogb3B0aW9ucy5lbGVtZW50LFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnBpY2tlciA9IG5ldyBEYXRlUmFuZ2VQaWNrZXIoZGF0ZVJhbmdlUGlja2VyT3B0aW9ucywge1xuICAgICAgICAgICAgb25DaGFuZ2U6IChyYW5nZTogeyBzdGFydDogRGF0ZSB8IG51bGwsIGVuZDogRGF0ZSB8IG51bGwgfSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaG9zdC5zZXRSZXN1bHQoe1xuICAgICAgICAgICAgICAgICAgICBzdGFydDogcmFuZ2Uuc3RhcnQgPz8gbmV3IERhdGUoKSxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiByYW5nZS5lbmQgPz8gbmV3IERhdGUoKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uUmVzZXQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdFN0YXJ0ICYmIGRlZmF1bHRFbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5waWNrZXI/LnNldERhdGVzKGRlZmF1bHRTdGFydCwgZGVmYXVsdEVuZCk7XG4gICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaG9zdC5zZXRSZXN1bHQoeyBzdGFydDogZGVmYXVsdFN0YXJ0LCBlbmQ6IGRlZmF1bHRFbmQscmVzZXQ6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5waWNrZXIuc2V0RGF0ZXMoc3RhcnREYXRlLCBlbmREYXRlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMucGlja2VyICYmIHR5cGVvZiAodGhpcy5waWNrZXIgYXMgYW55KS5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAodGhpcy5waWNrZXIgYXMgYW55KS5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBcbiAgICBcbn1cblxuXG5cblxuLy8gUmVnaXN0ZXIgZGlhbG9nIGdsb2JhbGx5ICh3aXRoIHR5cGUgc2FmZXR5KVxuaW50ZXJmYWNlIERpYWxvZ1JlZ2lzdHJ5IHsgW2tleTogc3RyaW5nXTogYW55OyB9XG4oZ2xvYmFsVGhpcyBhcyBhbnkpLmRpYWxvZ1JlZ2lzdHJ5ID0gKGdsb2JhbFRoaXMgYXMgYW55KS5kaWFsb2dSZWdpc3RyeSB8fCB7fTtcbihnbG9iYWxUaGlzIGFzIGFueSkuZGlhbG9nUmVnaXN0cnlbRGF0ZVBpY2tlckRpYWxvZy5pZF0gPSBEYXRlUGlja2VyRGlhbG9nOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///117\n");

/***/ }),

/***/ 132:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _src_visual__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(279);\n\nvar powerbiKey = \"powerbi\";\nvar powerbi = window[powerbiKey];\nvar calendarblizC41067D025DF46B28D497705D8C4301B_DEBUG = {\n    name: 'calendarblizC41067D025DF46B28D497705D8C4301B_DEBUG',\n    displayName: 'Methanex Calendar',\n    class: 'Visual',\n    apiVersion: '5.3.0',\n    create: (options) => {\n        if (_src_visual__WEBPACK_IMPORTED_MODULE_0__/* .Visual */ .b) {\n            return new _src_visual__WEBPACK_IMPORTED_MODULE_0__/* .Visual */ .b(options);\n        }\n        throw 'Visual instance not found';\n    },\n    createModalDialog: (dialogId, options, initialState) => {\n        const dialogRegistry = globalThis.dialogRegistry;\n        if (dialogId in dialogRegistry) {\n            new dialogRegistry[dialogId](options, initialState);\n        }\n    },\n    custom: true\n};\nif (typeof powerbi !== \"undefined\") {\n    powerbi.visuals = powerbi.visuals || {};\n    powerbi.visuals.plugins = powerbi.visuals.plugins || {};\n    powerbi.visuals.plugins[\"calendarblizC41067D025DF46B28D497705D8C4301B_DEBUG\"] = calendarblizC41067D025DF46B28D497705D8C4301B_DEBUG;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (calendarblizC41067D025DF46B28D497705D8C4301B_DEBUG);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTBDO0FBSzFDLElBQUksVUFBVSxHQUFRLFNBQVMsQ0FBQztBQUNoQyxJQUFJLE9BQU8sR0FBUSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDdEMsSUFBSSxrREFBa0QsR0FBa0I7SUFDcEUsSUFBSSxFQUFFLG9EQUFvRDtJQUMxRCxXQUFXLEVBQUUsbUJBQW1CO0lBQ2hDLEtBQUssRUFBRSxRQUFRO0lBQ2YsVUFBVSxFQUFFLE9BQU87SUFDbkIsTUFBTSxFQUFFLENBQUMsT0FBa0MsRUFBRSxFQUFFO1FBQzNDLElBQUksd0RBQU0sRUFBRSxDQUFDO1lBQ1QsT0FBTyxJQUFJLHdEQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDL0IsQ0FBQztRQUNELE1BQU0sMkJBQTJCLENBQUM7SUFDdEMsQ0FBQztJQUNELGlCQUFpQixFQUFFLENBQUMsUUFBZ0IsRUFBRSxPQUFpQyxFQUFFLFlBQW9CLEVBQUUsRUFBRTtRQUM3RixNQUFNLGNBQWMsR0FBUyxVQUFXLENBQUMsY0FBYyxDQUFDO1FBQ3hELElBQUksUUFBUSxJQUFJLGNBQWMsRUFBRSxDQUFDO1lBQzdCLElBQUksY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUN4RCxDQUFDO0lBQ0wsQ0FBQztJQUNELE1BQU0sRUFBRSxJQUFJO0NBQ2YsQ0FBQztBQUNGLElBQUksT0FBTyxPQUFPLEtBQUssV0FBVyxFQUFFLENBQUM7SUFDakMsT0FBTyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUN4QyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUM7SUFDeEQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsb0RBQW9ELENBQUMsR0FBRyxrREFBa0QsQ0FBQztBQUN2SSxDQUFDO0FBQ0QsaUVBQWUsa0RBQWtELEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYWxlbmRhcmJsaXpDNDEwNjdEMDI1REY0NkIyOEQ0OTc3MDVEOEM0MzAxQl9ERUJVRy8uLy50bXAvcHJlY29tcGlsZS92aXN1YWxQbHVnaW4udHM/YzY1YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaXN1YWwgfSBmcm9tIFwiLi4vLi4vc3JjL3Zpc3VhbFwiO1xuaW1wb3J0IHBvd2VyYmlWaXN1YWxzQXBpIGZyb20gXCJwb3dlcmJpLXZpc3VhbHMtYXBpXCI7XG5pbXBvcnQgSVZpc3VhbFBsdWdpbiA9IHBvd2VyYmlWaXN1YWxzQXBpLnZpc3VhbHMucGx1Z2lucy5JVmlzdWFsUGx1Z2luO1xuaW1wb3J0IFZpc3VhbENvbnN0cnVjdG9yT3B0aW9ucyA9IHBvd2VyYmlWaXN1YWxzQXBpLmV4dGVuc2liaWxpdHkudmlzdWFsLlZpc3VhbENvbnN0cnVjdG9yT3B0aW9ucztcbmltcG9ydCBEaWFsb2dDb25zdHJ1Y3Rvck9wdGlvbnMgPSBwb3dlcmJpVmlzdWFsc0FwaS5leHRlbnNpYmlsaXR5LnZpc3VhbC5EaWFsb2dDb25zdHJ1Y3Rvck9wdGlvbnM7XG52YXIgcG93ZXJiaUtleTogYW55ID0gXCJwb3dlcmJpXCI7XG52YXIgcG93ZXJiaTogYW55ID0gd2luZG93W3Bvd2VyYmlLZXldO1xudmFyIGNhbGVuZGFyYmxpekM0MTA2N0QwMjVERjQ2QjI4RDQ5NzcwNUQ4QzQzMDFCX0RFQlVHOiBJVmlzdWFsUGx1Z2luID0ge1xuICAgIG5hbWU6ICdjYWxlbmRhcmJsaXpDNDEwNjdEMDI1REY0NkIyOEQ0OTc3MDVEOEM0MzAxQl9ERUJVRycsXG4gICAgZGlzcGxheU5hbWU6ICdNZXRoYW5leCBDYWxlbmRhcicsXG4gICAgY2xhc3M6ICdWaXN1YWwnLFxuICAgIGFwaVZlcnNpb246ICc1LjMuMCcsXG4gICAgY3JlYXRlOiAob3B0aW9ucz86IFZpc3VhbENvbnN0cnVjdG9yT3B0aW9ucykgPT4ge1xuICAgICAgICBpZiAoVmlzdWFsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFZpc3VhbChvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyAnVmlzdWFsIGluc3RhbmNlIG5vdCBmb3VuZCc7XG4gICAgfSxcbiAgICBjcmVhdGVNb2RhbERpYWxvZzogKGRpYWxvZ0lkOiBzdHJpbmcsIG9wdGlvbnM6IERpYWxvZ0NvbnN0cnVjdG9yT3B0aW9ucywgaW5pdGlhbFN0YXRlOiBvYmplY3QpID0+IHtcbiAgICAgICAgY29uc3QgZGlhbG9nUmVnaXN0cnkgPSAoPGFueT5nbG9iYWxUaGlzKS5kaWFsb2dSZWdpc3RyeTtcbiAgICAgICAgaWYgKGRpYWxvZ0lkIGluIGRpYWxvZ1JlZ2lzdHJ5KSB7XG4gICAgICAgICAgICBuZXcgZGlhbG9nUmVnaXN0cnlbZGlhbG9nSWRdKG9wdGlvbnMsIGluaXRpYWxTdGF0ZSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGN1c3RvbTogdHJ1ZVxufTtcbmlmICh0eXBlb2YgcG93ZXJiaSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHBvd2VyYmkudmlzdWFscyA9IHBvd2VyYmkudmlzdWFscyB8fCB7fTtcbiAgICBwb3dlcmJpLnZpc3VhbHMucGx1Z2lucyA9IHBvd2VyYmkudmlzdWFscy5wbHVnaW5zIHx8IHt9O1xuICAgIHBvd2VyYmkudmlzdWFscy5wbHVnaW5zW1wiY2FsZW5kYXJibGl6QzQxMDY3RDAyNURGNDZCMjhENDk3NzA1RDhDNDMwMUJfREVCVUdcIl0gPSBjYWxlbmRhcmJsaXpDNDEwNjdEMDI1REY0NkIyOEQ0OTc3MDVEOEM0MzAxQl9ERUJVRztcbn1cbmV4cG9ydCBkZWZhdWx0IGNhbGVuZGFyYmxpekM0MTA2N0QwMjVERjQ2QjI4RDQ5NzcwNUQ4QzQzMDFCX0RFQlVHOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///132\n");

/***/ }),

/***/ 214:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   S: () => (/* binding */ VisualFormattingSettingsModel)\n/* harmony export */ });\n/* harmony import */ var powerbi_visuals_utils_formattingmodel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(674);\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\n\nvar FormattingSettingsCard = powerbi_visuals_utils_formattingmodel__WEBPACK_IMPORTED_MODULE_0__/* .formattingSettings.SimpleCard */ .z.Tn;\nvar FormattingSettingsModel = powerbi_visuals_utils_formattingmodel__WEBPACK_IMPORTED_MODULE_0__/* .formattingSettings.Model */ .z.Kx;\n/**\n * Data Point Formatting Card\n */\nclass DataPointCardSettings extends FormattingSettingsCard {\n    defaultColor = new powerbi_visuals_utils_formattingmodel__WEBPACK_IMPORTED_MODULE_0__/* .formattingSettings.ColorPicker */ .z.sk({\n        name: \"defaultColor\",\n        displayName: \"Default color\",\n        value: { value: \"\" }\n    });\n    showAllDataPoints = new powerbi_visuals_utils_formattingmodel__WEBPACK_IMPORTED_MODULE_0__/* .formattingSettings.ToggleSwitch */ .z.jF({\n        name: \"showAllDataPoints\",\n        displayName: \"Show all\",\n        value: true\n    });\n    fill = new powerbi_visuals_utils_formattingmodel__WEBPACK_IMPORTED_MODULE_0__/* .formattingSettings.ColorPicker */ .z.sk({\n        name: \"fill\",\n        displayName: \"Fill\",\n        value: { value: \"\" }\n    });\n    fillRule = new powerbi_visuals_utils_formattingmodel__WEBPACK_IMPORTED_MODULE_0__/* .formattingSettings.ColorPicker */ .z.sk({\n        name: \"fillRule\",\n        displayName: \"Color saturation\",\n        value: { value: \"\" }\n    });\n    fontSize = new powerbi_visuals_utils_formattingmodel__WEBPACK_IMPORTED_MODULE_0__/* .formattingSettings.NumUpDown */ .z.iB({\n        name: \"fontSize\",\n        displayName: \"Text Size\",\n        value: 12\n    });\n    name = \"dataPoint\";\n    displayName = \"Data colors\";\n    slices = [this.defaultColor, this.showAllDataPoints, this.fill, this.fillRule, this.fontSize];\n}\n/**\n* visual settings model class\n*\n*/\nclass VisualFormattingSettingsModel extends FormattingSettingsModel {\n    // Create formatting settings model formatting cards\n    dataPointCard = new DataPointCardSettings();\n    cards = [this.dataPointCard];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjE0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBd0JHO0FBRVU7QUFFOEQ7QUFFM0UsSUFBTyxzQkFBc0IsR0FBRyw0R0FBNkIsQ0FBQztBQUU5RCxJQUFPLHVCQUF1QixHQUFHLHVHQUF3QixDQUFDO0FBRTFEOztHQUVHO0FBQ0gsTUFBTSxxQkFBc0IsU0FBUSxzQkFBc0I7SUFDdEQsWUFBWSxHQUFHLElBQUksNkdBQThCLENBQUM7UUFDOUMsSUFBSSxFQUFFLGNBQWM7UUFDcEIsV0FBVyxFQUFFLGVBQWU7UUFDNUIsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtLQUN2QixDQUFDLENBQUM7SUFFSCxpQkFBaUIsR0FBRyxJQUFJLDhHQUErQixDQUFDO1FBQ3BELElBQUksRUFBRSxtQkFBbUI7UUFDekIsV0FBVyxFQUFFLFVBQVU7UUFDdkIsS0FBSyxFQUFFLElBQUk7S0FDZCxDQUFDLENBQUM7SUFFSCxJQUFJLEdBQUcsSUFBSSw2R0FBOEIsQ0FBQztRQUN0QyxJQUFJLEVBQUUsTUFBTTtRQUNaLFdBQVcsRUFBRSxNQUFNO1FBQ25CLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7S0FDdkIsQ0FBQyxDQUFDO0lBRUgsUUFBUSxHQUFHLElBQUksNkdBQThCLENBQUM7UUFDMUMsSUFBSSxFQUFFLFVBQVU7UUFDaEIsV0FBVyxFQUFFLGtCQUFrQjtRQUMvQixLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO0tBQ3ZCLENBQUMsQ0FBQztJQUVILFFBQVEsR0FBRyxJQUFJLDJHQUE0QixDQUFDO1FBQ3hDLElBQUksRUFBRSxVQUFVO1FBQ2hCLFdBQVcsRUFBRSxXQUFXO1FBQ3hCLEtBQUssRUFBRSxFQUFFO0tBQ1osQ0FBQyxDQUFDO0lBRUgsSUFBSSxHQUFXLFdBQVcsQ0FBQztJQUMzQixXQUFXLEdBQVcsYUFBYSxDQUFDO0lBQ3BDLE1BQU0sR0FBbUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQ2pJO0FBRUQ7OztFQUdFO0FBQ0ssTUFBTSw2QkFBOEIsU0FBUSx1QkFBdUI7SUFDdEUsb0RBQW9EO0lBQ3BELGFBQWEsR0FBRyxJQUFJLHFCQUFxQixFQUFFLENBQUM7SUFFNUMsS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0NBQ2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FsZW5kYXJibGl6QzQxMDY3RDAyNURGNDZCMjhENDk3NzA1RDhDNDMwMUJfREVCVUcvLi9zcmMvc2V0dGluZ3MudHM/OGI5OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogIFBvd2VyIEJJIFZpc3VhbGl6YXRpb25zXG4gKlxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uXG4gKiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBNSVQgTGljZW5zZVxuICpcbiAqICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiAgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJcIlNvZnR3YXJlXCJcIiksIHRvIGRlYWxcbiAqICBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiAgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiAgYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAqQVMgSVMqLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiAgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiAgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiAgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiAgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgZm9ybWF0dGluZ1NldHRpbmdzIH0gZnJvbSBcInBvd2VyYmktdmlzdWFscy11dGlscy1mb3JtYXR0aW5nbW9kZWxcIjtcblxuaW1wb3J0IEZvcm1hdHRpbmdTZXR0aW5nc0NhcmQgPSBmb3JtYXR0aW5nU2V0dGluZ3MuU2ltcGxlQ2FyZDtcbmltcG9ydCBGb3JtYXR0aW5nU2V0dGluZ3NTbGljZSA9IGZvcm1hdHRpbmdTZXR0aW5ncy5TbGljZTtcbmltcG9ydCBGb3JtYXR0aW5nU2V0dGluZ3NNb2RlbCA9IGZvcm1hdHRpbmdTZXR0aW5ncy5Nb2RlbDtcblxuLyoqXG4gKiBEYXRhIFBvaW50IEZvcm1hdHRpbmcgQ2FyZFxuICovXG5jbGFzcyBEYXRhUG9pbnRDYXJkU2V0dGluZ3MgZXh0ZW5kcyBGb3JtYXR0aW5nU2V0dGluZ3NDYXJkIHtcbiAgICBkZWZhdWx0Q29sb3IgPSBuZXcgZm9ybWF0dGluZ1NldHRpbmdzLkNvbG9yUGlja2VyKHtcbiAgICAgICAgbmFtZTogXCJkZWZhdWx0Q29sb3JcIixcbiAgICAgICAgZGlzcGxheU5hbWU6IFwiRGVmYXVsdCBjb2xvclwiLFxuICAgICAgICB2YWx1ZTogeyB2YWx1ZTogXCJcIiB9XG4gICAgfSk7XG5cbiAgICBzaG93QWxsRGF0YVBvaW50cyA9IG5ldyBmb3JtYXR0aW5nU2V0dGluZ3MuVG9nZ2xlU3dpdGNoKHtcbiAgICAgICAgbmFtZTogXCJzaG93QWxsRGF0YVBvaW50c1wiLFxuICAgICAgICBkaXNwbGF5TmFtZTogXCJTaG93IGFsbFwiLFxuICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgIH0pO1xuXG4gICAgZmlsbCA9IG5ldyBmb3JtYXR0aW5nU2V0dGluZ3MuQ29sb3JQaWNrZXIoe1xuICAgICAgICBuYW1lOiBcImZpbGxcIixcbiAgICAgICAgZGlzcGxheU5hbWU6IFwiRmlsbFwiLFxuICAgICAgICB2YWx1ZTogeyB2YWx1ZTogXCJcIiB9XG4gICAgfSk7XG5cbiAgICBmaWxsUnVsZSA9IG5ldyBmb3JtYXR0aW5nU2V0dGluZ3MuQ29sb3JQaWNrZXIoe1xuICAgICAgICBuYW1lOiBcImZpbGxSdWxlXCIsXG4gICAgICAgIGRpc3BsYXlOYW1lOiBcIkNvbG9yIHNhdHVyYXRpb25cIixcbiAgICAgICAgdmFsdWU6IHsgdmFsdWU6IFwiXCIgfVxuICAgIH0pO1xuXG4gICAgZm9udFNpemUgPSBuZXcgZm9ybWF0dGluZ1NldHRpbmdzLk51bVVwRG93bih7XG4gICAgICAgIG5hbWU6IFwiZm9udFNpemVcIixcbiAgICAgICAgZGlzcGxheU5hbWU6IFwiVGV4dCBTaXplXCIsXG4gICAgICAgIHZhbHVlOiAxMlxuICAgIH0pO1xuXG4gICAgbmFtZTogc3RyaW5nID0gXCJkYXRhUG9pbnRcIjtcbiAgICBkaXNwbGF5TmFtZTogc3RyaW5nID0gXCJEYXRhIGNvbG9yc1wiO1xuICAgIHNsaWNlczogQXJyYXk8Rm9ybWF0dGluZ1NldHRpbmdzU2xpY2U+ID0gW3RoaXMuZGVmYXVsdENvbG9yLCB0aGlzLnNob3dBbGxEYXRhUG9pbnRzLCB0aGlzLmZpbGwsIHRoaXMuZmlsbFJ1bGUsIHRoaXMuZm9udFNpemVdO1xufVxuXG4vKipcbiogdmlzdWFsIHNldHRpbmdzIG1vZGVsIGNsYXNzXG4qXG4qL1xuZXhwb3J0IGNsYXNzIFZpc3VhbEZvcm1hdHRpbmdTZXR0aW5nc01vZGVsIGV4dGVuZHMgRm9ybWF0dGluZ1NldHRpbmdzTW9kZWwge1xuICAgIC8vIENyZWF0ZSBmb3JtYXR0aW5nIHNldHRpbmdzIG1vZGVsIGZvcm1hdHRpbmcgY2FyZHNcbiAgICBkYXRhUG9pbnRDYXJkID0gbmV3IERhdGFQb2ludENhcmRTZXR0aW5ncygpO1xuXG4gICAgY2FyZHMgPSBbdGhpcy5kYXRhUG9pbnRDYXJkXTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///214\n");

/***/ }),

/***/ 279:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   b: () => (/* binding */ Visual)\n/* harmony export */ });\n/* harmony import */ var powerbi_visuals_utils_formattingmodel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(674);\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(214);\n/* harmony import */ var _DatePickerDialog__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(117);\n/* harmony import */ var powerbi_models__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(419);\n/* harmony import */ var powerbi_models__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(powerbi_models__WEBPACK_IMPORTED_MODULE_3__);\n/*\n\n * Power BI Visual CLI\n\n *\n\n * Copyright (c) Microsoft Corporation\n\n * All rights reserved.\n\n * MIT License\n\n */\n\n\n\n\n\n\nclass Visual {\n    target;\n    formattingSettings;\n    formattingSettingsService;\n    dateRangeInput;\n    host;\n    dataView;\n    startDefaultTime = null;\n    endDefaultTime = null;\n    previousMinTimestamp = null;\n    previousMaxTimestamp = null;\n    constructor(options) {\n        if (!options)\n            throw new Error(\"VisualConstructorOptions is required.\");\n        this.host = options.host;\n        this.formattingSettingsService = new powerbi_visuals_utils_formattingmodel__WEBPACK_IMPORTED_MODULE_0__/* .FormattingSettingsService */ .O();\n        this.target = options.element;\n        this.dateRangeInput = document.createElement('input');\n        this.dateRangeInput.type = 'text';\n        this.dateRangeInput.id = 'dateRangeInput';\n        this.dateRangeInput.readOnly = true;\n        // Open dialog on click\n        this.dateRangeInput.onclick = () => {\n            // Parse value in format mm/dd/yyyy - mm/dd/yyyy\n            const value = this.dateRangeInput.value || '';\n            const [startStr, endStr] = value.split(' - ').map(s => s.trim());\n            function parseMDY(str) {\n                const [month, day, year] = str.split('/').map(Number);\n                return new Date(year, month - 1, day);\n            }\n            const start = startStr ? parseMDY(startStr) : new Date();\n            const end = endStr ? parseMDY(endStr) : start;\n            console.log(\"Opening dialog with start:\", start, \"end:\", end);\n            const initialDialogState = { startDate: start.toISOString(), endDate: end.toISOString() };\n            this.host.openModalDialog(_DatePickerDialog__WEBPACK_IMPORTED_MODULE_2__/* .DatePickerDialog */ .t.id, { actionButtons: [1 /* DialogAction.OK */, 2 /* DialogAction.Cancel */], size: { width: 800, height: 440 }, position: { type: 0, left: 0, top: 0 }, title: \"Date Range\" }, { initialDialogState, defaultTime: { start: this.startDefaultTime, end: this.endDefaultTime } })\n                .then(ret => this.handleDialogResult(ret, this.dateRangeInput))\n                .catch(error => this.handleDialogError(error, null));\n        };\n        this.target.appendChild(this.dateRangeInput);\n    }\n    update(options) {\n        if (options.dataViews?.length) {\n            this.dataView = options.dataViews[0];\n            const cat = this.dataView.categorical?.categories?.[0]?.values;\n            if (cat) {\n                const timestamps = cat.map(v => new Date(v).getTime()).filter(t => !isNaN(t));\n                if (timestamps.length) {\n                    const min = Math.min(...timestamps), max = Math.max(...timestamps);\n                    if (this.previousMinTimestamp !== min || this.previousMaxTimestamp !== max) {\n                        this.previousMinTimestamp = min;\n                        this.previousMaxTimestamp = max;\n                        this.startDefaultTime = new Date(min);\n                        this.endDefaultTime = new Date(max);\n                        this.dateRangeInput.value = `${this.startDefaultTime.toLocaleDateString()} - ${this.endDefaultTime.toLocaleDateString()}`;\n                    }\n                }\n            }\n        }\n        this.formattingSettings = this.formattingSettingsService.populateFormattingSettingsModel(_settings__WEBPACK_IMPORTED_MODULE_1__/* .VisualFormattingSettingsModel */ .S, options.dataViews?.[0]);\n    }\n    getFormattingModel() {\n        return this.formattingSettingsService.buildFormattingModel(this.formattingSettings ?? new _settings__WEBPACK_IMPORTED_MODULE_1__/* .VisualFormattingSettingsModel */ .S());\n    }\n    destroy() { }\n    handleDialogResult(result, Input) {\n        if (result.actionId === 1 /* DialogAction.OK */) {\n            const { start, end } = result.resultState;\n            const s = new Date(start), e = new Date(end ?? start);\n            const fmt = (d) => `${(d.getUTCMonth() + 1).toString().padStart(2, '0')}/${d.getUTCDate().toString().padStart(2, '0')}/${d.getUTCFullYear()}`;\n            Input.value = `${fmt(s)} - ${fmt(e)}`;\n            if (result.resultState?.reset) {\n                this.applyResetFilter();\n            }\n            else {\n                this.applyDateRangeFilter({ start: s, end: e });\n            }\n        }\n    }\n    handleDialogError(error, targetElement) {\n        targetElement.value = \"Error: \" + (error ? JSON.stringify(error) : \"Unknown error\");\n        console.error(\"Dialog error:\", error);\n    }\n    applyDateRangeFilter(dateInterval) {\n        const catSource = this.dataView?.categorical?.categories?.[0]?.source;\n        const table = catSource?.queryName?.split(\".\")[0];\n        const column = catSource?.displayName || catSource?.queryName?.split(\".\")[1];\n        if (!table || !column)\n            return;\n        const target = { table, column };\n        const start = dateInterval.start ? new Date(dateInterval.start) : new Date();\n        const end = dateInterval.end ? new Date(dateInterval.end) : start;\n        const filter = {\n            $schema: \"http://powerbi.com/product/schema#advanced\",\n            target,\n            logicalOperator: \"And\",\n            conditions: [\n                { operator: \"GreaterThanOrEqual\", value: start.toISOString() },\n                { operator: \"LessThanOrEqual\", value: end.toISOString() }\n            ],\n            filterType: powerbi_models__WEBPACK_IMPORTED_MODULE_3__.FilterType.Advanced\n        };\n        this.host.applyJsonFilter(filter, \"general\", \"filter\", 0 /* powerbi.FilterAction.merge */);\n    }\n    applyResetFilter() {\n        this.host.applyJsonFilter(null, \"general\", \"filter\", 1 /* powerbi.FilterAction.remove */);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjc5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7OztHQVlHO0FBRVU7QUFHcUU7QUFDbEQ7QUFLMkI7QUFDTDtBQUlzQjtBQUVyRSxNQUFNLE1BQU07SUFDUCxNQUFNLENBQWM7SUFDcEIsa0JBQWtCLENBQTRDO0lBQzlELHlCQUF5QixDQUE0QjtJQUNyRCxjQUFjLENBQW1CO0lBQ2pDLElBQUksQ0FBYztJQUNsQixRQUFRLENBQXVCO0lBQy9CLGdCQUFnQixHQUFnQixJQUFJLENBQUM7SUFDckMsY0FBYyxHQUFnQixJQUFJLENBQUM7SUFDbkMsb0JBQW9CLEdBQWtCLElBQUksQ0FBQztJQUMzQyxvQkFBb0IsR0FBa0IsSUFBSSxDQUFDO0lBRW5ELFlBQVksT0FBaUM7UUFDekMsSUFBSSxDQUFDLE9BQU87WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7UUFDdkUsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLHFHQUF5QixFQUFFLENBQUM7UUFDakUsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBRzlCLElBQUksQ0FBQyxjQUFjLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7UUFDbEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLEdBQUcsZ0JBQWdCLENBQUM7UUFDMUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBSXBDLHVCQUF1QjtRQUN2QixJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sR0FBRyxHQUFHLEVBQUU7WUFDL0IsZ0RBQWdEO1lBQ2hELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQztZQUM5QyxNQUFNLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7WUFDakUsU0FBUyxRQUFRLENBQUMsR0FBVztnQkFDekIsTUFBTSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3RELE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDMUMsQ0FBQztZQUNELE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO1lBQ3pELE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFHOUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBRTlELE1BQU0sa0JBQWtCLEdBQUcsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLFdBQVcsRUFBRSxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQztZQUMxRixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FDckIsd0VBQWdCLENBQUMsRUFBRSxFQUNuQixFQUFFLGFBQWEsRUFBRSxzREFBc0MsRUFBRSxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsRUFDekosRUFBRSxrQkFBa0IsRUFBRSxXQUFXLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FDbEc7aUJBQ0ksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7aUJBQzlELEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQUM7UUFHRixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFFakQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxPQUE0QjtRQUN0QyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUM7WUFDNUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQztZQUMvRCxJQUFJLEdBQUcsRUFBRSxDQUFDO2dCQUNOLE1BQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFRLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JGLElBQUksVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDO29CQUNwQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsVUFBVSxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQztvQkFDbkUsSUFBSSxJQUFJLENBQUMsb0JBQW9CLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxvQkFBb0IsS0FBSyxHQUFHLEVBQUUsQ0FBQzt3QkFDekUsSUFBSSxDQUFDLG9CQUFvQixHQUFHLEdBQUcsQ0FBQzt3QkFDaEMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLEdBQUcsQ0FBQzt3QkFDaEMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUN0QyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUNwQyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssR0FBRyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsRUFBRSxNQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxDQUFDO29CQUM5SCxDQUFDO2dCQUNMLENBQUM7WUFDTCxDQUFDO1FBQ0wsQ0FBQztRQUNELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMseUJBQXlCLENBQUMsK0JBQStCLENBQ3BGLDZFQUE2QixFQUM3QixPQUFPLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQ3pCLENBQUM7SUFDTixDQUFDO0lBRU0sa0JBQWtCO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLHlCQUF5QixDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxJQUFJLDZFQUE2QixFQUFFLENBQUMsQ0FBQztJQUMvSCxDQUFDO0lBRU0sT0FBTyxLQUFXLENBQUM7SUFFbEIsa0JBQWtCLENBQUMsTUFBVyxFQUFFLEtBQXVCO1FBQzNELElBQUksTUFBTSxDQUFDLFFBQVEsNEJBQW9CLEVBQUUsQ0FBQztZQUN0QyxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUM7WUFDMUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsQ0FBQztZQUN0RCxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQU8sRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxjQUFjLEVBQUUsRUFBRSxDQUFDO1lBRXBKLEtBQUssQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDdEMsSUFBSSxNQUFNLENBQUMsV0FBVyxFQUFFLEtBQUssRUFBRSxDQUFDO2dCQUM1QixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUM1QixDQUFDO2lCQUFLLENBQUM7Z0JBQ1AsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNoRCxDQUFDO1FBQ0wsQ0FBQztJQUNMLENBQUM7SUFFTyxpQkFBaUIsQ0FBQyxLQUFVLEVBQUUsYUFBK0I7UUFDakUsYUFBYSxDQUFDLEtBQUssR0FBRyxTQUFTLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3BGLE9BQU8sQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFTyxvQkFBb0IsQ0FBQyxZQUEwQjtRQUNuRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUM7UUFDdEUsTUFBTSxLQUFLLEdBQUcsU0FBUyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEQsTUFBTSxNQUFNLEdBQUcsU0FBUyxFQUFFLFdBQVcsSUFBSSxTQUFTLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3RSxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsTUFBTTtZQUFFLE9BQU87UUFDOUIsTUFBTSxNQUFNLEdBQWtCLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxDQUFDO1FBQ2hELE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUM3RSxNQUFNLEdBQUcsR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUNsRSxNQUFNLE1BQU0sR0FBb0I7WUFDNUIsT0FBTyxFQUFFLDRDQUE0QztZQUNyRCxNQUFNO1lBQ04sZUFBZSxFQUFFLEtBQUs7WUFDdEIsVUFBVSxFQUFFO2dCQUNSLEVBQUUsUUFBUSxFQUFFLG9CQUFvQixFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsV0FBVyxFQUFFLEVBQUU7Z0JBQzlELEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsV0FBVyxFQUFFLEVBQUU7YUFDNUQ7WUFDRCxVQUFVLEVBQUUsc0RBQVUsQ0FBQyxRQUFRO1NBQ2xDLENBQUM7UUFDRixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLFFBQVEscUNBQTZCLENBQUM7SUFDdkYsQ0FBQztJQUVPLGdCQUFnQjtRQUNwQixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLFFBQVEsc0NBQThCLENBQUM7SUFDdEYsQ0FBQztDQUVKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FsZW5kYXJibGl6QzQxMDY3RDAyNURGNDZCMjhENDk3NzA1RDhDNDMwMUJfREVCVUcvLi9zcmMvdmlzdWFsLnRzPzFkNDEiXSwic291cmNlc0NvbnRlbnQiOlsiLypcblxuICogUG93ZXIgQkkgVmlzdWFsIENMSVxuXG4gKlxuXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvblxuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG4gKiBNSVQgTGljZW5zZVxuXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBwb3dlcmJpIGZyb20gXCJwb3dlcmJpLXZpc3VhbHMtYXBpXCI7XG5pbXBvcnQgeyBGb3JtYXR0aW5nU2V0dGluZ3NTZXJ2aWNlIH0gZnJvbSBcInBvd2VyYmktdmlzdWFscy11dGlscy1mb3JtYXR0aW5nbW9kZWxcIjtcbmltcG9ydCBcIi4vLi4vc3R5bGUvdmlzdWFsLmxlc3NcIjtcbmltcG9ydCBWaXN1YWxDb25zdHJ1Y3Rvck9wdGlvbnMgPSBwb3dlcmJpLmV4dGVuc2liaWxpdHkudmlzdWFsLlZpc3VhbENvbnN0cnVjdG9yT3B0aW9ucztcbmltcG9ydCBWaXN1YWxVcGRhdGVPcHRpb25zID0gcG93ZXJiaS5leHRlbnNpYmlsaXR5LnZpc3VhbC5WaXN1YWxVcGRhdGVPcHRpb25zO1xuaW1wb3J0IElWaXN1YWwgPSBwb3dlcmJpLmV4dGVuc2liaWxpdHkudmlzdWFsLklWaXN1YWw7XG5pbXBvcnQgSVZpc3VhbEhvc3QgPSBwb3dlcmJpLmV4dGVuc2liaWxpdHkudmlzdWFsLklWaXN1YWxIb3N0O1xuaW1wb3J0IHsgVmlzdWFsRm9ybWF0dGluZ1NldHRpbmdzTW9kZWwgfSBmcm9tIFwiLi9zZXR0aW5nc1wiO1xuaW1wb3J0IHsgRGF0ZVBpY2tlckRpYWxvZyB9IGZyb20gXCIuL0RhdGVQaWNrZXJEaWFsb2dcIjtcbmltcG9ydCB7IERhdGVJbnRlcnZhbCB9IGZyb20gJy4vY3VzdG9tX2NhbGVuZGFyL2N1c3RvbVR5cGUnO1xuaW1wb3J0IERpYWxvZ0FjdGlvbiA9IHBvd2VyYmkuRGlhbG9nQWN0aW9uO1xuaW1wb3J0IERhdGFWaWV3ID0gcG93ZXJiaS5EYXRhVmlldztcbmltcG9ydCB7IElBZHZhbmNlZEZpbHRlciwgRmlsdGVyVHlwZSwgSUZpbHRlclRhcmdldCB9IGZyb20gXCJwb3dlcmJpLW1vZGVsc1wiO1xuXG5leHBvcnQgY2xhc3MgVmlzdWFsIGltcGxlbWVudHMgSVZpc3VhbCB7XG4gICAgcHJpdmF0ZSB0YXJnZXQ6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgZm9ybWF0dGluZ1NldHRpbmdzOiBWaXN1YWxGb3JtYXR0aW5nU2V0dGluZ3NNb2RlbCB8IHVuZGVmaW5lZDtcbiAgICBwcml2YXRlIGZvcm1hdHRpbmdTZXR0aW5nc1NlcnZpY2U6IEZvcm1hdHRpbmdTZXR0aW5nc1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBkYXRlUmFuZ2VJbnB1dDogSFRNTElucHV0RWxlbWVudDtcbiAgICBwcml2YXRlIGhvc3Q6IElWaXN1YWxIb3N0O1xuICAgIHByaXZhdGUgZGF0YVZpZXc6IERhdGFWaWV3IHwgdW5kZWZpbmVkO1xuICAgIHByaXZhdGUgc3RhcnREZWZhdWx0VGltZTogRGF0ZSB8IG51bGwgPSBudWxsO1xuICAgIHByaXZhdGUgZW5kRGVmYXVsdFRpbWU6IERhdGUgfCBudWxsID0gbnVsbDtcbiAgICBwcml2YXRlIHByZXZpb3VzTWluVGltZXN0YW1wOiBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgICBwcml2YXRlIHByZXZpb3VzTWF4VGltZXN0YW1wOiBudW1iZXIgfCBudWxsID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IFZpc3VhbENvbnN0cnVjdG9yT3B0aW9ucykge1xuICAgICAgICBpZiAoIW9wdGlvbnMpIHRocm93IG5ldyBFcnJvcihcIlZpc3VhbENvbnN0cnVjdG9yT3B0aW9ucyBpcyByZXF1aXJlZC5cIik7XG4gICAgICAgIHRoaXMuaG9zdCA9IG9wdGlvbnMuaG9zdDtcbiAgICAgICAgdGhpcy5mb3JtYXR0aW5nU2V0dGluZ3NTZXJ2aWNlID0gbmV3IEZvcm1hdHRpbmdTZXR0aW5nc1NlcnZpY2UoKTtcbiAgICAgICAgdGhpcy50YXJnZXQgPSBvcHRpb25zLmVsZW1lbnQ7XG5cblxuICAgICAgICB0aGlzLmRhdGVSYW5nZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgdGhpcy5kYXRlUmFuZ2VJbnB1dC50eXBlID0gJ3RleHQnO1xuICAgICAgICB0aGlzLmRhdGVSYW5nZUlucHV0LmlkID0gJ2RhdGVSYW5nZUlucHV0JztcbiAgICAgICAgdGhpcy5kYXRlUmFuZ2VJbnB1dC5yZWFkT25seSA9IHRydWU7XG4gICAgICBcblxuXG4gICAgICAgIC8vIE9wZW4gZGlhbG9nIG9uIGNsaWNrXG4gICAgICAgIHRoaXMuZGF0ZVJhbmdlSW5wdXQub25jbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgIC8vIFBhcnNlIHZhbHVlIGluIGZvcm1hdCBtbS9kZC95eXl5IC0gbW0vZGQveXl5eVxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmRhdGVSYW5nZUlucHV0LnZhbHVlIHx8ICcnO1xuICAgICAgICAgICAgY29uc3QgW3N0YXJ0U3RyLCBlbmRTdHJdID0gdmFsdWUuc3BsaXQoJyAtICcpLm1hcChzID0+IHMudHJpbSgpKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlTURZKHN0cjogc3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgW21vbnRoLCBkYXksIHllYXJdID0gc3RyLnNwbGl0KCcvJykubWFwKE51bWJlcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHllYXIsIG1vbnRoIC0gMSwgZGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gc3RhcnRTdHIgPyBwYXJzZU1EWShzdGFydFN0cikgOiBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgY29uc3QgZW5kID0gZW5kU3RyID8gcGFyc2VNRFkoZW5kU3RyKSA6IHN0YXJ0O1xuXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiT3BlbmluZyBkaWFsb2cgd2l0aCBzdGFydDpcIiwgc3RhcnQsIFwiZW5kOlwiLCBlbmQpO1xuXG4gICAgICAgICAgICBjb25zdCBpbml0aWFsRGlhbG9nU3RhdGUgPSB7IHN0YXJ0RGF0ZTogc3RhcnQudG9JU09TdHJpbmcoKSwgZW5kRGF0ZTogZW5kLnRvSVNPU3RyaW5nKCkgfTtcbiAgICAgICAgICAgIHRoaXMuaG9zdC5vcGVuTW9kYWxEaWFsb2coXG4gICAgICAgICAgICAgICAgRGF0ZVBpY2tlckRpYWxvZy5pZCxcbiAgICAgICAgICAgICAgICB7IGFjdGlvbkJ1dHRvbnM6IFtEaWFsb2dBY3Rpb24uT0ssIERpYWxvZ0FjdGlvbi5DYW5jZWxdLCBzaXplOiB7IHdpZHRoOiA4MDAsIGhlaWdodDogNDQwIH0sIHBvc2l0aW9uOiB7IHR5cGU6IDAsIGxlZnQ6IDAsIHRvcDogMCB9LCB0aXRsZTogXCJEYXRlIFJhbmdlXCIgfSxcbiAgICAgICAgICAgICAgICB7IGluaXRpYWxEaWFsb2dTdGF0ZSwgZGVmYXVsdFRpbWU6IHsgc3RhcnQ6IHRoaXMuc3RhcnREZWZhdWx0VGltZSwgZW5kOiB0aGlzLmVuZERlZmF1bHRUaW1lIH0gfVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIC50aGVuKHJldCA9PiB0aGlzLmhhbmRsZURpYWxvZ1Jlc3VsdChyZXQsIHRoaXMuZGF0ZVJhbmdlSW5wdXQpKVxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB0aGlzLmhhbmRsZURpYWxvZ0Vycm9yKGVycm9yLCBudWxsKSk7XG4gICAgICAgIH07XG4gXG5cbiAgICAgICAgdGhpcy50YXJnZXQuYXBwZW5kQ2hpbGQodGhpcy5kYXRlUmFuZ2VJbnB1dCk7XG4gICBcbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlKG9wdGlvbnM6IFZpc3VhbFVwZGF0ZU9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuZGF0YVZpZXdzPy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YVZpZXcgPSBvcHRpb25zLmRhdGFWaWV3c1swXTtcbiAgICAgICAgICAgIGNvbnN0IGNhdCA9IHRoaXMuZGF0YVZpZXcuY2F0ZWdvcmljYWw/LmNhdGVnb3JpZXM/LlswXT8udmFsdWVzO1xuICAgICAgICAgICAgaWYgKGNhdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcHMgPSBjYXQubWFwKHYgPT4gbmV3IERhdGUodiBhcyBhbnkpLmdldFRpbWUoKSkuZmlsdGVyKHQgPT4gIWlzTmFOKHQpKTtcbiAgICAgICAgICAgICAgICBpZiAodGltZXN0YW1wcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWluID0gTWF0aC5taW4oLi4udGltZXN0YW1wcyksIG1heCA9IE1hdGgubWF4KC4uLnRpbWVzdGFtcHMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wcmV2aW91c01pblRpbWVzdGFtcCAhPT0gbWluIHx8IHRoaXMucHJldmlvdXNNYXhUaW1lc3RhbXAgIT09IG1heCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmV2aW91c01pblRpbWVzdGFtcCA9IG1pbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJldmlvdXNNYXhUaW1lc3RhbXAgPSBtYXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0RGVmYXVsdFRpbWUgPSBuZXcgRGF0ZShtaW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmREZWZhdWx0VGltZSA9IG5ldyBEYXRlKG1heCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGVSYW5nZUlucHV0LnZhbHVlID0gYCR7dGhpcy5zdGFydERlZmF1bHRUaW1lLnRvTG9jYWxlRGF0ZVN0cmluZygpfSAtICR7dGhpcy5lbmREZWZhdWx0VGltZS50b0xvY2FsZURhdGVTdHJpbmcoKX1gO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZm9ybWF0dGluZ1NldHRpbmdzID0gdGhpcy5mb3JtYXR0aW5nU2V0dGluZ3NTZXJ2aWNlLnBvcHVsYXRlRm9ybWF0dGluZ1NldHRpbmdzTW9kZWwoXG4gICAgICAgICAgICBWaXN1YWxGb3JtYXR0aW5nU2V0dGluZ3NNb2RlbCxcbiAgICAgICAgICAgIG9wdGlvbnMuZGF0YVZpZXdzPy5bMF1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Rm9ybWF0dGluZ01vZGVsKCk6IHBvd2VyYmkudmlzdWFscy5Gb3JtYXR0aW5nTW9kZWwge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXR0aW5nU2V0dGluZ3NTZXJ2aWNlLmJ1aWxkRm9ybWF0dGluZ01vZGVsKHRoaXMuZm9ybWF0dGluZ1NldHRpbmdzID8/IG5ldyBWaXN1YWxGb3JtYXR0aW5nU2V0dGluZ3NNb2RlbCgpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHsgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVEaWFsb2dSZXN1bHQocmVzdWx0OiBhbnksIElucHV0OiBIVE1MSW5wdXRFbGVtZW50KSB7XG4gICAgICAgIGlmIChyZXN1bHQuYWN0aW9uSWQgPT09IERpYWxvZ0FjdGlvbi5PSykge1xuICAgICAgICAgICAgY29uc3QgeyBzdGFydCwgZW5kIH0gPSByZXN1bHQucmVzdWx0U3RhdGU7XG4gICAgICAgICAgICBjb25zdCBzID0gbmV3IERhdGUoc3RhcnQpLCBlID0gbmV3IERhdGUoZW5kID8/IHN0YXJ0KTtcbiAgICAgICAgICAgIGNvbnN0IGZtdCA9IChkOiBEYXRlKSA9PiBgJHsoZC5nZXRVVENNb250aCgpICsgMSkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpfS8ke2QuZ2V0VVRDRGF0ZSgpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKX0vJHtkLmdldFVUQ0Z1bGxZZWFyKCl9YDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgSW5wdXQudmFsdWUgPSBgJHtmbXQocyl9IC0gJHtmbXQoZSl9YDtcbiAgICAgICAgICAgIGlmIChyZXN1bHQucmVzdWx0U3RhdGU/LnJlc2V0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBseVJlc2V0RmlsdGVyKCk7XG4gICAgICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5RGF0ZVJhbmdlRmlsdGVyKHsgc3RhcnQ6IHMsIGVuZDogZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRGlhbG9nRXJyb3IoZXJyb3I6IGFueSwgdGFyZ2V0RWxlbWVudDogSFRNTElucHV0RWxlbWVudCkge1xuICAgICAgICB0YXJnZXRFbGVtZW50LnZhbHVlID0gXCJFcnJvcjogXCIgKyAoZXJyb3IgPyBKU09OLnN0cmluZ2lmeShlcnJvcikgOiBcIlVua25vd24gZXJyb3JcIik7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJEaWFsb2cgZXJyb3I6XCIsIGVycm9yKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFwcGx5RGF0ZVJhbmdlRmlsdGVyKGRhdGVJbnRlcnZhbDogRGF0ZUludGVydmFsKSB7XG4gICAgICAgIGNvbnN0IGNhdFNvdXJjZSA9IHRoaXMuZGF0YVZpZXc/LmNhdGVnb3JpY2FsPy5jYXRlZ29yaWVzPy5bMF0/LnNvdXJjZTtcbiAgICAgICAgY29uc3QgdGFibGUgPSBjYXRTb3VyY2U/LnF1ZXJ5TmFtZT8uc3BsaXQoXCIuXCIpWzBdO1xuICAgICAgICBjb25zdCBjb2x1bW4gPSBjYXRTb3VyY2U/LmRpc3BsYXlOYW1lIHx8IGNhdFNvdXJjZT8ucXVlcnlOYW1lPy5zcGxpdChcIi5cIilbMV07XG4gICAgICAgIGlmICghdGFibGUgfHwgIWNvbHVtbikgcmV0dXJuO1xuICAgICAgICBjb25zdCB0YXJnZXQ6IElGaWx0ZXJUYXJnZXQgPSB7IHRhYmxlLCBjb2x1bW4gfTtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBkYXRlSW50ZXJ2YWwuc3RhcnQgPyBuZXcgRGF0ZShkYXRlSW50ZXJ2YWwuc3RhcnQpIDogbmV3IERhdGUoKTtcbiAgICAgICAgY29uc3QgZW5kID0gZGF0ZUludGVydmFsLmVuZCA/IG5ldyBEYXRlKGRhdGVJbnRlcnZhbC5lbmQpIDogc3RhcnQ7XG4gICAgICAgIGNvbnN0IGZpbHRlcjogSUFkdmFuY2VkRmlsdGVyID0ge1xuICAgICAgICAgICAgJHNjaGVtYTogXCJodHRwOi8vcG93ZXJiaS5jb20vcHJvZHVjdC9zY2hlbWEjYWR2YW5jZWRcIixcbiAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgIGxvZ2ljYWxPcGVyYXRvcjogXCJBbmRcIixcbiAgICAgICAgICAgIGNvbmRpdGlvbnM6IFtcbiAgICAgICAgICAgICAgICB7IG9wZXJhdG9yOiBcIkdyZWF0ZXJUaGFuT3JFcXVhbFwiLCB2YWx1ZTogc3RhcnQudG9JU09TdHJpbmcoKSB9LFxuICAgICAgICAgICAgICAgIHsgb3BlcmF0b3I6IFwiTGVzc1RoYW5PckVxdWFsXCIsIHZhbHVlOiBlbmQudG9JU09TdHJpbmcoKSB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZmlsdGVyVHlwZTogRmlsdGVyVHlwZS5BZHZhbmNlZFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhvc3QuYXBwbHlKc29uRmlsdGVyKGZpbHRlciwgXCJnZW5lcmFsXCIsIFwiZmlsdGVyXCIsIHBvd2VyYmkuRmlsdGVyQWN0aW9uLm1lcmdlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFwcGx5UmVzZXRGaWx0ZXIoKSB7XG4gICAgICAgIHRoaXMuaG9zdC5hcHBseUpzb25GaWx0ZXIobnVsbCwgXCJnZW5lcmFsXCIsIFwiZmlsdGVyXCIsIHBvd2VyYmkuRmlsdGVyQWN0aW9uLnJlbW92ZSk7XG4gICAgfVxuXG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///279\n");

/***/ }),

/***/ 419:
/***/ (function(module) {

eval("// powerbi-models v1.15.2\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse // removed by dead control flow\n{}\n})(this, () => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ([\n/* 0 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_612__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CommonErrorCodes = exports.BookmarksPlayMode = exports.ExportDataType = exports.QnaMode = exports.PageNavigationPosition = exports.BrowserPrintAdjustmentsMode = exports.AggregateFunction = exports.DataCacheMode = exports.CredentialType = exports.isPercentOfGrandTotal = exports.isColumnAggr = exports.isHierarchyLevelAggr = exports.isHierarchyLevel = exports.isColumn = exports.isMeasure = exports.getFilterType = exports.isBasicFilterWithKeys = exports.isFilterKeyColumnsTarget = exports.HierarchyIdentityFilter = exports.HierarchyFilter = exports.AdvancedFilter = exports.TupleFilter = exports.IdentityFilter = exports.BasicFilterWithKeys = exports.BasicFilter = exports.RelativeTimeFilter = exports.RelativeDateFilter = exports.TopNFilter = exports.IncludeExcludeFilter = exports.NotSupportedFilter = exports.Filter = exports.RelativeDateOperators = exports.RelativeDateFilterTimeUnit = exports.FilterType = exports.FiltersLevel = exports.FiltersOperations = exports.MenuLocation = exports.ContrastMode = exports.TokenType = exports.ViewMode = exports.Permissions = exports.SectionVisibility = exports.ReportAlignment = exports.HyperlinkClickBehavior = exports.LayoutType = exports.VisualContainerDisplayMode = exports.BackgroundType = exports.DisplayOption = exports.PageSizeType = exports.TraceType = void 0;\r\nexports.validateExportDataRequest = exports.validateQnaInterpretInputData = exports.validateLoadQnaConfiguration = exports.validateSaveAsParameters = exports.validateUpdateFiltersRequest = exports.validateFilter = exports.validatePage = exports.validateTileLoad = exports.validateDashboardLoad = exports.validateQuickCreate = exports.validateCreateReport = exports.validatePaginatedReportLoad = exports.validateReportLoad = exports.validateMenuGroupExtension = exports.validateExtension = exports.validateCustomPageSize = exports.validateVisualizationsPane = exports.validateSyncSlicersPane = exports.validateSelectionPane = exports.validatePageNavigationPane = exports.validateFieldsPane = exports.validateFiltersPane = exports.validateBookmarksPane = exports.validatePanes = exports.validateSettings = exports.validateCaptureBookmarkRequest = exports.validateApplyBookmarkStateRequest = exports.validateApplyBookmarkByNameRequest = exports.validateAddBookmarkRequest = exports.validatePlayBookmarkRequest = exports.validateSlicerState = exports.validateSlicer = exports.validateVisualSelector = exports.isIExtensionArray = exports.isIExtensions = exports.isGroupedMenuExtension = exports.isFlatMenuExtension = exports.isReportFiltersArray = exports.isOnLoadFilters = exports.VisualDataRoleKindPreference = exports.VisualDataRoleKind = exports.CommandDisplayOption = exports.SlicerTargetSelector = exports.VisualTypeSelector = exports.VisualSelector = exports.PageSelector = exports.Selector = exports.SortDirection = exports.LegendPosition = exports.TextAlignment = void 0;\r\nexports.validatePrintSettings = exports.validateZoomLevel = exports.validateCustomTheme = exports.validateCommandsSettings = exports.validateVisualSettings = exports.validateVisualHeader = void 0;\r\nvar validator_1 = __nested_webpack_require_612__(1);\r\nvar TraceType;\r\n(function (TraceType) {\r\n    TraceType[TraceType[\"Information\"] = 0] = \"Information\";\r\n    TraceType[TraceType[\"Verbose\"] = 1] = \"Verbose\";\r\n    TraceType[TraceType[\"Warning\"] = 2] = \"Warning\";\r\n    TraceType[TraceType[\"Error\"] = 3] = \"Error\";\r\n    TraceType[TraceType[\"ExpectedError\"] = 4] = \"ExpectedError\";\r\n    TraceType[TraceType[\"UnexpectedError\"] = 5] = \"UnexpectedError\";\r\n    TraceType[TraceType[\"Fatal\"] = 6] = \"Fatal\";\r\n})(TraceType = exports.TraceType || (exports.TraceType = {}));\r\nvar PageSizeType;\r\n(function (PageSizeType) {\r\n    PageSizeType[PageSizeType[\"Widescreen\"] = 0] = \"Widescreen\";\r\n    PageSizeType[PageSizeType[\"Standard\"] = 1] = \"Standard\";\r\n    PageSizeType[PageSizeType[\"Cortana\"] = 2] = \"Cortana\";\r\n    PageSizeType[PageSizeType[\"Letter\"] = 3] = \"Letter\";\r\n    PageSizeType[PageSizeType[\"Custom\"] = 4] = \"Custom\";\r\n    PageSizeType[PageSizeType[\"Mobile\"] = 5] = \"Mobile\";\r\n})(PageSizeType = exports.PageSizeType || (exports.PageSizeType = {}));\r\nvar DisplayOption;\r\n(function (DisplayOption) {\r\n    DisplayOption[DisplayOption[\"FitToPage\"] = 0] = \"FitToPage\";\r\n    DisplayOption[DisplayOption[\"FitToWidth\"] = 1] = \"FitToWidth\";\r\n    DisplayOption[DisplayOption[\"ActualSize\"] = 2] = \"ActualSize\";\r\n})(DisplayOption = exports.DisplayOption || (exports.DisplayOption = {}));\r\nvar BackgroundType;\r\n(function (BackgroundType) {\r\n    BackgroundType[BackgroundType[\"Default\"] = 0] = \"Default\";\r\n    BackgroundType[BackgroundType[\"Transparent\"] = 1] = \"Transparent\";\r\n})(BackgroundType = exports.BackgroundType || (exports.BackgroundType = {}));\r\nvar VisualContainerDisplayMode;\r\n(function (VisualContainerDisplayMode) {\r\n    VisualContainerDisplayMode[VisualContainerDisplayMode[\"Visible\"] = 0] = \"Visible\";\r\n    VisualContainerDisplayMode[VisualContainerDisplayMode[\"Hidden\"] = 1] = \"Hidden\";\r\n})(VisualContainerDisplayMode = exports.VisualContainerDisplayMode || (exports.VisualContainerDisplayMode = {}));\r\nvar LayoutType;\r\n(function (LayoutType) {\r\n    LayoutType[LayoutType[\"Master\"] = 0] = \"Master\";\r\n    LayoutType[LayoutType[\"Custom\"] = 1] = \"Custom\";\r\n    LayoutType[LayoutType[\"MobilePortrait\"] = 2] = \"MobilePortrait\";\r\n    LayoutType[LayoutType[\"MobileLandscape\"] = 3] = \"MobileLandscape\";\r\n})(LayoutType = exports.LayoutType || (exports.LayoutType = {}));\r\nvar HyperlinkClickBehavior;\r\n(function (HyperlinkClickBehavior) {\r\n    HyperlinkClickBehavior[HyperlinkClickBehavior[\"Navigate\"] = 0] = \"Navigate\";\r\n    HyperlinkClickBehavior[HyperlinkClickBehavior[\"NavigateAndRaiseEvent\"] = 1] = \"NavigateAndRaiseEvent\";\r\n    HyperlinkClickBehavior[HyperlinkClickBehavior[\"RaiseEvent\"] = 2] = \"RaiseEvent\";\r\n})(HyperlinkClickBehavior = exports.HyperlinkClickBehavior || (exports.HyperlinkClickBehavior = {}));\r\nvar ReportAlignment;\r\n(function (ReportAlignment) {\r\n    ReportAlignment[ReportAlignment[\"Left\"] = 0] = \"Left\";\r\n    ReportAlignment[ReportAlignment[\"Center\"] = 1] = \"Center\";\r\n    ReportAlignment[ReportAlignment[\"Right\"] = 2] = \"Right\";\r\n    ReportAlignment[ReportAlignment[\"None\"] = 3] = \"None\";\r\n})(ReportAlignment = exports.ReportAlignment || (exports.ReportAlignment = {}));\r\nvar SectionVisibility;\r\n(function (SectionVisibility) {\r\n    SectionVisibility[SectionVisibility[\"AlwaysVisible\"] = 0] = \"AlwaysVisible\";\r\n    SectionVisibility[SectionVisibility[\"HiddenInViewMode\"] = 1] = \"HiddenInViewMode\";\r\n})(SectionVisibility = exports.SectionVisibility || (exports.SectionVisibility = {}));\r\nvar Permissions;\r\n(function (Permissions) {\r\n    Permissions[Permissions[\"Read\"] = 0] = \"Read\";\r\n    Permissions[Permissions[\"ReadWrite\"] = 1] = \"ReadWrite\";\r\n    Permissions[Permissions[\"Copy\"] = 2] = \"Copy\";\r\n    Permissions[Permissions[\"Create\"] = 4] = \"Create\";\r\n    Permissions[Permissions[\"All\"] = 7] = \"All\";\r\n})(Permissions = exports.Permissions || (exports.Permissions = {}));\r\nvar ViewMode;\r\n(function (ViewMode) {\r\n    ViewMode[ViewMode[\"View\"] = 0] = \"View\";\r\n    ViewMode[ViewMode[\"Edit\"] = 1] = \"Edit\";\r\n})(ViewMode = exports.ViewMode || (exports.ViewMode = {}));\r\nvar TokenType;\r\n(function (TokenType) {\r\n    TokenType[TokenType[\"Aad\"] = 0] = \"Aad\";\r\n    TokenType[TokenType[\"Embed\"] = 1] = \"Embed\";\r\n})(TokenType = exports.TokenType || (exports.TokenType = {}));\r\nvar ContrastMode;\r\n(function (ContrastMode) {\r\n    ContrastMode[ContrastMode[\"None\"] = 0] = \"None\";\r\n    ContrastMode[ContrastMode[\"HighContrast1\"] = 1] = \"HighContrast1\";\r\n    ContrastMode[ContrastMode[\"HighContrast2\"] = 2] = \"HighContrast2\";\r\n    ContrastMode[ContrastMode[\"HighContrastBlack\"] = 3] = \"HighContrastBlack\";\r\n    ContrastMode[ContrastMode[\"HighContrastWhite\"] = 4] = \"HighContrastWhite\";\r\n})(ContrastMode = exports.ContrastMode || (exports.ContrastMode = {}));\r\nvar MenuLocation;\r\n(function (MenuLocation) {\r\n    MenuLocation[MenuLocation[\"Bottom\"] = 0] = \"Bottom\";\r\n    MenuLocation[MenuLocation[\"Top\"] = 1] = \"Top\";\r\n})(MenuLocation = exports.MenuLocation || (exports.MenuLocation = {}));\r\nvar FiltersOperations;\r\n(function (FiltersOperations) {\r\n    FiltersOperations[FiltersOperations[\"RemoveAll\"] = 0] = \"RemoveAll\";\r\n    FiltersOperations[FiltersOperations[\"ReplaceAll\"] = 1] = \"ReplaceAll\";\r\n    FiltersOperations[FiltersOperations[\"Add\"] = 2] = \"Add\";\r\n    FiltersOperations[FiltersOperations[\"Replace\"] = 3] = \"Replace\";\r\n})(FiltersOperations = exports.FiltersOperations || (exports.FiltersOperations = {}));\r\nvar FiltersLevel;\r\n(function (FiltersLevel) {\r\n    FiltersLevel[FiltersLevel[\"Report\"] = 0] = \"Report\";\r\n    FiltersLevel[FiltersLevel[\"Page\"] = 1] = \"Page\";\r\n    FiltersLevel[FiltersLevel[\"Visual\"] = 2] = \"Visual\";\r\n})(FiltersLevel = exports.FiltersLevel || (exports.FiltersLevel = {}));\r\nvar FilterType;\r\n(function (FilterType) {\r\n    FilterType[FilterType[\"Advanced\"] = 0] = \"Advanced\";\r\n    FilterType[FilterType[\"Basic\"] = 1] = \"Basic\";\r\n    FilterType[FilterType[\"Unknown\"] = 2] = \"Unknown\";\r\n    FilterType[FilterType[\"IncludeExclude\"] = 3] = \"IncludeExclude\";\r\n    FilterType[FilterType[\"RelativeDate\"] = 4] = \"RelativeDate\";\r\n    FilterType[FilterType[\"TopN\"] = 5] = \"TopN\";\r\n    FilterType[FilterType[\"Tuple\"] = 6] = \"Tuple\";\r\n    FilterType[FilterType[\"RelativeTime\"] = 7] = \"RelativeTime\";\r\n    FilterType[FilterType[\"Identity\"] = 8] = \"Identity\";\r\n    FilterType[FilterType[\"Hierarchy\"] = 9] = \"Hierarchy\";\r\n    FilterType[FilterType[\"HierarchyIdentity\"] = 10] = \"HierarchyIdentity\";\r\n})(FilterType = exports.FilterType || (exports.FilterType = {}));\r\nvar RelativeDateFilterTimeUnit;\r\n(function (RelativeDateFilterTimeUnit) {\r\n    RelativeDateFilterTimeUnit[RelativeDateFilterTimeUnit[\"Days\"] = 0] = \"Days\";\r\n    RelativeDateFilterTimeUnit[RelativeDateFilterTimeUnit[\"Weeks\"] = 1] = \"Weeks\";\r\n    RelativeDateFilterTimeUnit[RelativeDateFilterTimeUnit[\"CalendarWeeks\"] = 2] = \"CalendarWeeks\";\r\n    RelativeDateFilterTimeUnit[RelativeDateFilterTimeUnit[\"Months\"] = 3] = \"Months\";\r\n    RelativeDateFilterTimeUnit[RelativeDateFilterTimeUnit[\"CalendarMonths\"] = 4] = \"CalendarMonths\";\r\n    RelativeDateFilterTimeUnit[RelativeDateFilterTimeUnit[\"Years\"] = 5] = \"Years\";\r\n    RelativeDateFilterTimeUnit[RelativeDateFilterTimeUnit[\"CalendarYears\"] = 6] = \"CalendarYears\";\r\n    RelativeDateFilterTimeUnit[RelativeDateFilterTimeUnit[\"Minutes\"] = 7] = \"Minutes\";\r\n    RelativeDateFilterTimeUnit[RelativeDateFilterTimeUnit[\"Hours\"] = 8] = \"Hours\";\r\n})(RelativeDateFilterTimeUnit = exports.RelativeDateFilterTimeUnit || (exports.RelativeDateFilterTimeUnit = {}));\r\nvar RelativeDateOperators;\r\n(function (RelativeDateOperators) {\r\n    RelativeDateOperators[RelativeDateOperators[\"InLast\"] = 0] = \"InLast\";\r\n    RelativeDateOperators[RelativeDateOperators[\"InThis\"] = 1] = \"InThis\";\r\n    RelativeDateOperators[RelativeDateOperators[\"InNext\"] = 2] = \"InNext\";\r\n})(RelativeDateOperators = exports.RelativeDateOperators || (exports.RelativeDateOperators = {}));\r\nvar Filter = /** @class */ (function () {\r\n    function Filter(target, filterType) {\r\n        this.target = target;\r\n        this.filterType = filterType;\r\n    }\r\n    Filter.prototype.toJSON = function () {\r\n        var filter = {\r\n            $schema: this.schemaUrl,\r\n            target: this.target,\r\n            filterType: this.filterType\r\n        };\r\n        // Add displaySettings only when defined\r\n        if (this.displaySettings !== undefined) {\r\n            filter.displaySettings = this.displaySettings;\r\n        }\r\n        return filter;\r\n    };\r\n    return Filter;\r\n}());\r\nexports.Filter = Filter;\r\nvar NotSupportedFilter = /** @class */ (function (_super) {\r\n    __extends(NotSupportedFilter, _super);\r\n    function NotSupportedFilter(target, message, notSupportedTypeName) {\r\n        var _this = _super.call(this, target, FilterType.Unknown) || this;\r\n        _this.message = message;\r\n        _this.notSupportedTypeName = notSupportedTypeName;\r\n        _this.schemaUrl = NotSupportedFilter.schemaUrl;\r\n        return _this;\r\n    }\r\n    NotSupportedFilter.prototype.toJSON = function () {\r\n        var filter = _super.prototype.toJSON.call(this);\r\n        filter.message = this.message;\r\n        filter.notSupportedTypeName = this.notSupportedTypeName;\r\n        return filter;\r\n    };\r\n    NotSupportedFilter.schemaUrl = \"http://powerbi.com/product/schema#notSupported\";\r\n    return NotSupportedFilter;\r\n}(Filter));\r\nexports.NotSupportedFilter = NotSupportedFilter;\r\nvar IncludeExcludeFilter = /** @class */ (function (_super) {\r\n    __extends(IncludeExcludeFilter, _super);\r\n    function IncludeExcludeFilter(target, isExclude, values) {\r\n        var _this = _super.call(this, target, FilterType.IncludeExclude) || this;\r\n        _this.target = target;\r\n        _this.values = values;\r\n        _this.isExclude = isExclude;\r\n        _this.schemaUrl = IncludeExcludeFilter.schemaUrl;\r\n        return _this;\r\n    }\r\n    IncludeExcludeFilter.prototype.toJSON = function () {\r\n        var filter = _super.prototype.toJSON.call(this);\r\n        filter.isExclude = this.isExclude;\r\n        filter.values = this.values;\r\n        return filter;\r\n    };\r\n    IncludeExcludeFilter.schemaUrl = \"http://powerbi.com/product/schema#includeExclude\";\r\n    return IncludeExcludeFilter;\r\n}(Filter));\r\nexports.IncludeExcludeFilter = IncludeExcludeFilter;\r\nvar TopNFilter = /** @class */ (function (_super) {\r\n    __extends(TopNFilter, _super);\r\n    function TopNFilter(target, operator, itemCount, orderBy) {\r\n        var _this = _super.call(this, target, FilterType.TopN) || this;\r\n        _this.operator = operator;\r\n        _this.itemCount = itemCount;\r\n        _this.schemaUrl = TopNFilter.schemaUrl;\r\n        _this.orderBy = orderBy;\r\n        return _this;\r\n    }\r\n    TopNFilter.prototype.toJSON = function () {\r\n        var filter = _super.prototype.toJSON.call(this);\r\n        filter.operator = this.operator;\r\n        filter.itemCount = this.itemCount;\r\n        filter.orderBy = this.orderBy;\r\n        return filter;\r\n    };\r\n    TopNFilter.schemaUrl = \"http://powerbi.com/product/schema#topN\";\r\n    return TopNFilter;\r\n}(Filter));\r\nexports.TopNFilter = TopNFilter;\r\nvar RelativeDateFilter = /** @class */ (function (_super) {\r\n    __extends(RelativeDateFilter, _super);\r\n    function RelativeDateFilter(target, operator, timeUnitsCount, timeUnitType, includeToday) {\r\n        var _this = _super.call(this, target, FilterType.RelativeDate) || this;\r\n        _this.operator = operator;\r\n        _this.timeUnitsCount = timeUnitsCount;\r\n        _this.timeUnitType = timeUnitType;\r\n        _this.includeToday = includeToday;\r\n        _this.schemaUrl = RelativeDateFilter.schemaUrl;\r\n        return _this;\r\n    }\r\n    RelativeDateFilter.prototype.toJSON = function () {\r\n        var filter = _super.prototype.toJSON.call(this);\r\n        filter.operator = this.operator;\r\n        filter.timeUnitsCount = this.timeUnitsCount;\r\n        filter.timeUnitType = this.timeUnitType;\r\n        filter.includeToday = this.includeToday;\r\n        return filter;\r\n    };\r\n    RelativeDateFilter.schemaUrl = \"http://powerbi.com/product/schema#relativeDate\";\r\n    return RelativeDateFilter;\r\n}(Filter));\r\nexports.RelativeDateFilter = RelativeDateFilter;\r\nvar RelativeTimeFilter = /** @class */ (function (_super) {\r\n    __extends(RelativeTimeFilter, _super);\r\n    function RelativeTimeFilter(target, operator, timeUnitsCount, timeUnitType) {\r\n        var _this = _super.call(this, target, FilterType.RelativeTime) || this;\r\n        _this.operator = operator;\r\n        _this.timeUnitsCount = timeUnitsCount;\r\n        _this.timeUnitType = timeUnitType;\r\n        _this.schemaUrl = RelativeTimeFilter.schemaUrl;\r\n        return _this;\r\n    }\r\n    RelativeTimeFilter.prototype.toJSON = function () {\r\n        var filter = _super.prototype.toJSON.call(this);\r\n        filter.operator = this.operator;\r\n        filter.timeUnitsCount = this.timeUnitsCount;\r\n        filter.timeUnitType = this.timeUnitType;\r\n        return filter;\r\n    };\r\n    RelativeTimeFilter.schemaUrl = \"http://powerbi.com/product/schema#relativeTime\";\r\n    return RelativeTimeFilter;\r\n}(Filter));\r\nexports.RelativeTimeFilter = RelativeTimeFilter;\r\nvar BasicFilter = /** @class */ (function (_super) {\r\n    __extends(BasicFilter, _super);\r\n    function BasicFilter(target, operator) {\r\n        var values = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            values[_i - 2] = arguments[_i];\r\n        }\r\n        var _this = _super.call(this, target, FilterType.Basic) || this;\r\n        _this.operator = operator;\r\n        _this.schemaUrl = BasicFilter.schemaUrl;\r\n        if (values.length === 0 && operator !== \"All\") {\r\n            throw new Error(\"values must be a non-empty array unless your operator is \\\"All\\\".\");\r\n        }\r\n        /**\r\n         * Accept values as array instead of as individual arguments\r\n         * new BasicFilter('a', 'b', 1, 2);\r\n         * new BasicFilter('a', 'b', [1,2]);\r\n         */\r\n        if (Array.isArray(values[0])) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\r\n            _this.values = values[0];\r\n        }\r\n        else {\r\n            _this.values = values;\r\n        }\r\n        return _this;\r\n    }\r\n    BasicFilter.prototype.toJSON = function () {\r\n        var filter = _super.prototype.toJSON.call(this);\r\n        filter.operator = this.operator;\r\n        filter.values = this.values;\r\n        filter.requireSingleSelection = !!this.requireSingleSelection;\r\n        return filter;\r\n    };\r\n    BasicFilter.schemaUrl = \"http://powerbi.com/product/schema#basic\";\r\n    return BasicFilter;\r\n}(Filter));\r\nexports.BasicFilter = BasicFilter;\r\nvar BasicFilterWithKeys = /** @class */ (function (_super) {\r\n    __extends(BasicFilterWithKeys, _super);\r\n    function BasicFilterWithKeys(target, operator, values, keyValues) {\r\n        var _this = _super.call(this, target, operator, values) || this;\r\n        _this.keyValues = keyValues;\r\n        _this.target = target;\r\n        var numberOfKeys = target.keys ? target.keys.length : 0;\r\n        if (numberOfKeys > 0 && !keyValues) {\r\n            throw new Error(\"You should pass the values to be filtered for each key. You passed: no values and \".concat(numberOfKeys, \" keys\"));\r\n        }\r\n        if (numberOfKeys === 0 && keyValues && keyValues.length > 0) {\r\n            throw new Error(\"You passed key values but your target object doesn't contain the keys to be filtered\");\r\n        }\r\n        for (var _i = 0, _a = _this.keyValues; _i < _a.length; _i++) {\r\n            var keyValue = _a[_i];\r\n            if (keyValue) {\r\n                var lengthOfArray = keyValue.length;\r\n                if (lengthOfArray !== numberOfKeys) {\r\n                    throw new Error(\"Each tuple of key values should contain a value for each of the keys. You passed: \".concat(lengthOfArray, \" values and \").concat(numberOfKeys, \" keys\"));\r\n                }\r\n            }\r\n        }\r\n        return _this;\r\n    }\r\n    BasicFilterWithKeys.prototype.toJSON = function () {\r\n        var filter = _super.prototype.toJSON.call(this);\r\n        filter.keyValues = this.keyValues;\r\n        return filter;\r\n    };\r\n    return BasicFilterWithKeys;\r\n}(BasicFilter));\r\nexports.BasicFilterWithKeys = BasicFilterWithKeys;\r\nvar IdentityFilter = /** @class */ (function (_super) {\r\n    __extends(IdentityFilter, _super);\r\n    function IdentityFilter(target, operator) {\r\n        var _this = _super.call(this, target, FilterType.Identity) || this;\r\n        _this.operator = operator;\r\n        _this.schemaUrl = IdentityFilter.schemaUrl;\r\n        return _this;\r\n    }\r\n    IdentityFilter.prototype.toJSON = function () {\r\n        var filter = _super.prototype.toJSON.call(this);\r\n        filter.operator = this.operator;\r\n        filter.target = this.target;\r\n        return filter;\r\n    };\r\n    IdentityFilter.schemaUrl = \"http://powerbi.com/product/schema#identity\";\r\n    return IdentityFilter;\r\n}(Filter));\r\nexports.IdentityFilter = IdentityFilter;\r\nvar TupleFilter = /** @class */ (function (_super) {\r\n    __extends(TupleFilter, _super);\r\n    function TupleFilter(target, operator, values) {\r\n        var _this = _super.call(this, target, FilterType.Tuple) || this;\r\n        _this.operator = operator;\r\n        _this.schemaUrl = TupleFilter.schemaUrl;\r\n        _this.values = values;\r\n        return _this;\r\n    }\r\n    TupleFilter.prototype.toJSON = function () {\r\n        var filter = _super.prototype.toJSON.call(this);\r\n        filter.operator = this.operator;\r\n        filter.values = this.values;\r\n        filter.target = this.target;\r\n        return filter;\r\n    };\r\n    TupleFilter.schemaUrl = \"http://powerbi.com/product/schema#tuple\";\r\n    return TupleFilter;\r\n}(Filter));\r\nexports.TupleFilter = TupleFilter;\r\nvar AdvancedFilter = /** @class */ (function (_super) {\r\n    __extends(AdvancedFilter, _super);\r\n    function AdvancedFilter(target, logicalOperator) {\r\n        var conditions = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            conditions[_i - 2] = arguments[_i];\r\n        }\r\n        var _this = _super.call(this, target, FilterType.Advanced) || this;\r\n        _this.schemaUrl = AdvancedFilter.schemaUrl;\r\n        // Guard statements\r\n        if (typeof logicalOperator !== \"string\" || logicalOperator.length === 0) {\r\n            // TODO: It would be nicer to list out the possible logical operators.\r\n            throw new Error(\"logicalOperator must be a valid operator, You passed: \".concat(logicalOperator));\r\n        }\r\n        _this.logicalOperator = logicalOperator;\r\n        var extractedConditions;\r\n        /**\r\n         * Accept conditions as array instead of as individual arguments\r\n         * new AdvancedFilter('a', 'b', \"And\", { value: 1, operator: \"Equals\" }, { value: 2, operator: \"IsGreaterThan\" });\r\n         * new AdvancedFilter('a', 'b', \"And\", [{ value: 1, operator: \"Equals\" }, { value: 2, operator: \"IsGreaterThan\" }]);\r\n         */\r\n        if (Array.isArray(conditions[0])) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\r\n            extractedConditions = conditions[0];\r\n        }\r\n        else {\r\n            extractedConditions = conditions;\r\n        }\r\n        if (extractedConditions.length > 2) {\r\n            throw new Error(\"AdvancedFilters may not have more than two conditions. You passed: \".concat(conditions.length));\r\n        }\r\n        if (extractedConditions.length === 1 && logicalOperator !== \"And\") {\r\n            throw new Error(\"Logical Operator must be \\\"And\\\" when there is only one condition provided\");\r\n        }\r\n        _this.conditions = extractedConditions;\r\n        return _this;\r\n    }\r\n    AdvancedFilter.prototype.toJSON = function () {\r\n        var filter = _super.prototype.toJSON.call(this);\r\n        filter.logicalOperator = this.logicalOperator;\r\n        filter.conditions = this.conditions;\r\n        return filter;\r\n    };\r\n    AdvancedFilter.schemaUrl = \"http://powerbi.com/product/schema#advanced\";\r\n    return AdvancedFilter;\r\n}(Filter));\r\nexports.AdvancedFilter = AdvancedFilter;\r\nvar HierarchyFilter = /** @class */ (function (_super) {\r\n    __extends(HierarchyFilter, _super);\r\n    function HierarchyFilter(target, hierarchyData) {\r\n        var _this = _super.call(this, target, FilterType.Hierarchy) || this;\r\n        _this.schemaUrl = HierarchyFilter.schemaUrl;\r\n        _this.hierarchyData = hierarchyData;\r\n        return _this;\r\n    }\r\n    HierarchyFilter.prototype.toJSON = function () {\r\n        var filter = _super.prototype.toJSON.call(this);\r\n        filter.hierarchyData = this.hierarchyData;\r\n        filter.target = this.target;\r\n        return filter;\r\n    };\r\n    HierarchyFilter.schemaUrl = \"http://powerbi.com/product/schema#hierarchy\";\r\n    return HierarchyFilter;\r\n}(Filter));\r\nexports.HierarchyFilter = HierarchyFilter;\r\nvar HierarchyIdentityFilter = /** @class */ (function (_super) {\r\n    __extends(HierarchyIdentityFilter, _super);\r\n    function HierarchyIdentityFilter(target, hierarchyData) {\r\n        var _this = _super.call(this, target, FilterType.HierarchyIdentity) || this;\r\n        _this.schemaUrl = HierarchyIdentityFilter.schemaUrl;\r\n        _this.hierarchyData = hierarchyData;\r\n        return _this;\r\n    }\r\n    HierarchyIdentityFilter.prototype.toJSON = function () {\r\n        var filter = _super.prototype.toJSON.call(this);\r\n        filter.hierarchyData = this.hierarchyData;\r\n        filter.target = this.target;\r\n        return filter;\r\n    };\r\n    HierarchyIdentityFilter.schemaUrl = \"http://powerbi.com/product/schema#hierarchyIdentity\";\r\n    return HierarchyIdentityFilter;\r\n}(Filter));\r\nexports.HierarchyIdentityFilter = HierarchyIdentityFilter;\r\nfunction isFilterKeyColumnsTarget(target) {\r\n    return isColumn(target) && !!target.keys;\r\n}\r\nexports.isFilterKeyColumnsTarget = isFilterKeyColumnsTarget;\r\nfunction isBasicFilterWithKeys(filter) {\r\n    return getFilterType(filter) === FilterType.Basic && !!filter.keyValues;\r\n}\r\nexports.isBasicFilterWithKeys = isBasicFilterWithKeys;\r\nfunction getFilterType(filter) {\r\n    if (filter.filterType) {\r\n        return filter.filterType;\r\n    }\r\n    var basicFilter = filter;\r\n    var advancedFilter = filter;\r\n    if ((typeof basicFilter.operator === \"string\")\r\n        && (Array.isArray(basicFilter.values))) {\r\n        return FilterType.Basic;\r\n    }\r\n    else if ((typeof advancedFilter.logicalOperator === \"string\")\r\n        && (Array.isArray(advancedFilter.conditions))) {\r\n        return FilterType.Advanced;\r\n    }\r\n    else {\r\n        return FilterType.Unknown;\r\n    }\r\n}\r\nexports.getFilterType = getFilterType;\r\nfunction isMeasure(arg) {\r\n    return arg.table !== undefined && arg.measure !== undefined;\r\n}\r\nexports.isMeasure = isMeasure;\r\nfunction isColumn(arg) {\r\n    return !!(arg.table && arg.column && !arg.aggregationFunction);\r\n}\r\nexports.isColumn = isColumn;\r\nfunction isHierarchyLevel(arg) {\r\n    return !!(arg.table && arg.hierarchy && arg.hierarchyLevel && !arg.aggregationFunction);\r\n}\r\nexports.isHierarchyLevel = isHierarchyLevel;\r\nfunction isHierarchyLevelAggr(arg) {\r\n    return !!(arg.table && arg.hierarchy && arg.hierarchyLevel && arg.aggregationFunction);\r\n}\r\nexports.isHierarchyLevelAggr = isHierarchyLevelAggr;\r\nfunction isColumnAggr(arg) {\r\n    return !!(arg.table && arg.column && arg.aggregationFunction);\r\n}\r\nexports.isColumnAggr = isColumnAggr;\r\nfunction isPercentOfGrandTotal(arg) {\r\n    return !!arg.percentOfGrandTotal;\r\n}\r\nexports.isPercentOfGrandTotal = isPercentOfGrandTotal;\r\nvar CredentialType;\r\n(function (CredentialType) {\r\n    CredentialType[CredentialType[\"NoConnection\"] = 0] = \"NoConnection\";\r\n    CredentialType[CredentialType[\"OnBehalfOf\"] = 1] = \"OnBehalfOf\";\r\n    CredentialType[CredentialType[\"Anonymous\"] = 2] = \"Anonymous\";\r\n})(CredentialType = exports.CredentialType || (exports.CredentialType = {}));\r\nvar DataCacheMode;\r\n(function (DataCacheMode) {\r\n    DataCacheMode[DataCacheMode[\"Import\"] = 0] = \"Import\";\r\n    DataCacheMode[DataCacheMode[\"DirectQuery\"] = 1] = \"DirectQuery\";\r\n})(DataCacheMode = exports.DataCacheMode || (exports.DataCacheMode = {}));\r\nvar AggregateFunction;\r\n(function (AggregateFunction) {\r\n    AggregateFunction[AggregateFunction[\"Default\"] = 1] = \"Default\";\r\n    AggregateFunction[AggregateFunction[\"None\"] = 2] = \"None\";\r\n    AggregateFunction[AggregateFunction[\"Sum\"] = 3] = \"Sum\";\r\n    AggregateFunction[AggregateFunction[\"Min\"] = 4] = \"Min\";\r\n    AggregateFunction[AggregateFunction[\"Max\"] = 5] = \"Max\";\r\n    AggregateFunction[AggregateFunction[\"Count\"] = 6] = \"Count\";\r\n    AggregateFunction[AggregateFunction[\"Average\"] = 7] = \"Average\";\r\n    AggregateFunction[AggregateFunction[\"DistinctCount\"] = 8] = \"DistinctCount\";\r\n})(AggregateFunction = exports.AggregateFunction || (exports.AggregateFunction = {}));\r\nvar BrowserPrintAdjustmentsMode;\r\n(function (BrowserPrintAdjustmentsMode) {\r\n    BrowserPrintAdjustmentsMode[BrowserPrintAdjustmentsMode[\"Default\"] = 0] = \"Default\";\r\n    BrowserPrintAdjustmentsMode[BrowserPrintAdjustmentsMode[\"NoAdjustments\"] = 1] = \"NoAdjustments\";\r\n})(BrowserPrintAdjustmentsMode = exports.BrowserPrintAdjustmentsMode || (exports.BrowserPrintAdjustmentsMode = {}));\r\nvar PageNavigationPosition;\r\n(function (PageNavigationPosition) {\r\n    PageNavigationPosition[PageNavigationPosition[\"Bottom\"] = 0] = \"Bottom\";\r\n    PageNavigationPosition[PageNavigationPosition[\"Left\"] = 1] = \"Left\";\r\n})(PageNavigationPosition = exports.PageNavigationPosition || (exports.PageNavigationPosition = {}));\r\nvar QnaMode;\r\n(function (QnaMode) {\r\n    QnaMode[QnaMode[\"Interactive\"] = 0] = \"Interactive\";\r\n    QnaMode[QnaMode[\"ResultOnly\"] = 1] = \"ResultOnly\";\r\n})(QnaMode = exports.QnaMode || (exports.QnaMode = {}));\r\nvar ExportDataType;\r\n(function (ExportDataType) {\r\n    ExportDataType[ExportDataType[\"Summarized\"] = 0] = \"Summarized\";\r\n    ExportDataType[ExportDataType[\"Underlying\"] = 1] = \"Underlying\";\r\n})(ExportDataType = exports.ExportDataType || (exports.ExportDataType = {}));\r\nvar BookmarksPlayMode;\r\n(function (BookmarksPlayMode) {\r\n    BookmarksPlayMode[BookmarksPlayMode[\"Off\"] = 0] = \"Off\";\r\n    BookmarksPlayMode[BookmarksPlayMode[\"Presentation\"] = 1] = \"Presentation\";\r\n})(BookmarksPlayMode = exports.BookmarksPlayMode || (exports.BookmarksPlayMode = {}));\r\n// This is not an enum because enum strings require\r\n// us to upgrade typeScript version and change SDK build definition\r\nexports.CommonErrorCodes = {\r\n    TokenExpired: 'TokenExpired',\r\n    NotFound: 'PowerBIEntityNotFound',\r\n    InvalidParameters: 'Invalid parameters',\r\n    LoadReportFailed: 'LoadReportFailed',\r\n    NotAuthorized: 'PowerBINotAuthorizedException',\r\n    FailedToLoadModel: 'ExplorationContainer_FailedToLoadModel_DefaultDetails',\r\n};\r\nexports.TextAlignment = {\r\n    Left: 'left',\r\n    Center: 'center',\r\n    Right: 'right',\r\n};\r\nexports.LegendPosition = {\r\n    Top: 'Top',\r\n    Bottom: 'Bottom',\r\n    Right: 'Right',\r\n    Left: 'Left',\r\n    TopCenter: 'TopCenter',\r\n    BottomCenter: 'BottomCenter',\r\n    RightCenter: 'RightCenter',\r\n    LeftCenter: 'LeftCenter',\r\n};\r\nvar SortDirection;\r\n(function (SortDirection) {\r\n    SortDirection[SortDirection[\"Ascending\"] = 1] = \"Ascending\";\r\n    SortDirection[SortDirection[\"Descending\"] = 2] = \"Descending\";\r\n})(SortDirection = exports.SortDirection || (exports.SortDirection = {}));\r\nvar Selector = /** @class */ (function () {\r\n    function Selector(schema) {\r\n        this.$schema = schema;\r\n    }\r\n    Selector.prototype.toJSON = function () {\r\n        return {\r\n            $schema: this.$schema\r\n        };\r\n    };\r\n    return Selector;\r\n}());\r\nexports.Selector = Selector;\r\nvar PageSelector = /** @class */ (function (_super) {\r\n    __extends(PageSelector, _super);\r\n    function PageSelector(pageName) {\r\n        var _this = _super.call(this, PageSelector.schemaUrl) || this;\r\n        _this.pageName = pageName;\r\n        return _this;\r\n    }\r\n    PageSelector.prototype.toJSON = function () {\r\n        var selector = _super.prototype.toJSON.call(this);\r\n        selector.pageName = this.pageName;\r\n        return selector;\r\n    };\r\n    PageSelector.schemaUrl = \"http://powerbi.com/product/schema#pageSelector\";\r\n    return PageSelector;\r\n}(Selector));\r\nexports.PageSelector = PageSelector;\r\nvar VisualSelector = /** @class */ (function (_super) {\r\n    __extends(VisualSelector, _super);\r\n    function VisualSelector(visualName) {\r\n        var _this = _super.call(this, VisualSelector.schemaUrl) || this;\r\n        _this.visualName = visualName;\r\n        return _this;\r\n    }\r\n    VisualSelector.prototype.toJSON = function () {\r\n        var selector = _super.prototype.toJSON.call(this);\r\n        selector.visualName = this.visualName;\r\n        return selector;\r\n    };\r\n    VisualSelector.schemaUrl = \"http://powerbi.com/product/schema#visualSelector\";\r\n    return VisualSelector;\r\n}(Selector));\r\nexports.VisualSelector = VisualSelector;\r\nvar VisualTypeSelector = /** @class */ (function (_super) {\r\n    __extends(VisualTypeSelector, _super);\r\n    function VisualTypeSelector(visualType) {\r\n        var _this = _super.call(this, VisualSelector.schemaUrl) || this;\r\n        _this.visualType = visualType;\r\n        return _this;\r\n    }\r\n    VisualTypeSelector.prototype.toJSON = function () {\r\n        var selector = _super.prototype.toJSON.call(this);\r\n        selector.visualType = this.visualType;\r\n        return selector;\r\n    };\r\n    VisualTypeSelector.schemaUrl = \"http://powerbi.com/product/schema#visualTypeSelector\";\r\n    return VisualTypeSelector;\r\n}(Selector));\r\nexports.VisualTypeSelector = VisualTypeSelector;\r\nvar SlicerTargetSelector = /** @class */ (function (_super) {\r\n    __extends(SlicerTargetSelector, _super);\r\n    function SlicerTargetSelector(target) {\r\n        var _this = _super.call(this, VisualSelector.schemaUrl) || this;\r\n        _this.target = target;\r\n        return _this;\r\n    }\r\n    SlicerTargetSelector.prototype.toJSON = function () {\r\n        var selector = _super.prototype.toJSON.call(this);\r\n        selector.target = this.target;\r\n        return selector;\r\n    };\r\n    SlicerTargetSelector.schemaUrl = \"http://powerbi.com/product/schema#slicerTargetSelector\";\r\n    return SlicerTargetSelector;\r\n}(Selector));\r\nexports.SlicerTargetSelector = SlicerTargetSelector;\r\nvar CommandDisplayOption;\r\n(function (CommandDisplayOption) {\r\n    CommandDisplayOption[CommandDisplayOption[\"Enabled\"] = 0] = \"Enabled\";\r\n    CommandDisplayOption[CommandDisplayOption[\"Disabled\"] = 1] = \"Disabled\";\r\n    CommandDisplayOption[CommandDisplayOption[\"Hidden\"] = 2] = \"Hidden\";\r\n})(CommandDisplayOption = exports.CommandDisplayOption || (exports.CommandDisplayOption = {}));\r\n/*\r\n * Visual CRUD\r\n */\r\nvar VisualDataRoleKind;\r\n(function (VisualDataRoleKind) {\r\n    // Indicates that the role should be bound to something that evaluates to a grouping of values.\r\n    VisualDataRoleKind[VisualDataRoleKind[\"Grouping\"] = 0] = \"Grouping\";\r\n    // Indicates that the role should be bound to something that evaluates to a single value in a scope.\r\n    VisualDataRoleKind[VisualDataRoleKind[\"Measure\"] = 1] = \"Measure\";\r\n    // Indicates that the role can be bound to either Grouping or Measure.\r\n    VisualDataRoleKind[VisualDataRoleKind[\"GroupingOrMeasure\"] = 2] = \"GroupingOrMeasure\";\r\n})(VisualDataRoleKind = exports.VisualDataRoleKind || (exports.VisualDataRoleKind = {}));\r\n// Indicates the visual preference on Grouping or Measure. Only applicable if kind is GroupingOrMeasure.\r\nvar VisualDataRoleKindPreference;\r\n(function (VisualDataRoleKindPreference) {\r\n    VisualDataRoleKindPreference[VisualDataRoleKindPreference[\"Measure\"] = 0] = \"Measure\";\r\n    VisualDataRoleKindPreference[VisualDataRoleKindPreference[\"Grouping\"] = 1] = \"Grouping\";\r\n})(VisualDataRoleKindPreference = exports.VisualDataRoleKindPreference || (exports.VisualDataRoleKindPreference = {}));\r\nfunction isOnLoadFilters(filters) {\r\n    return filters && !isReportFiltersArray(filters);\r\n}\r\nexports.isOnLoadFilters = isOnLoadFilters;\r\nfunction isReportFiltersArray(filters) {\r\n    return Array.isArray(filters);\r\n}\r\nexports.isReportFiltersArray = isReportFiltersArray;\r\nfunction isFlatMenuExtension(menuExtension) {\r\n    return menuExtension && !isGroupedMenuExtension(menuExtension);\r\n}\r\nexports.isFlatMenuExtension = isFlatMenuExtension;\r\nfunction isGroupedMenuExtension(menuExtension) {\r\n    return menuExtension && !!menuExtension.groupName;\r\n}\r\nexports.isGroupedMenuExtension = isGroupedMenuExtension;\r\nfunction isIExtensions(extensions) {\r\n    return extensions && !isIExtensionArray(extensions);\r\n}\r\nexports.isIExtensions = isIExtensions;\r\nfunction isIExtensionArray(extensions) {\r\n    return Array.isArray(extensions);\r\n}\r\nexports.isIExtensionArray = isIExtensionArray;\r\nfunction normalizeError(error) {\r\n    var message = error.message;\r\n    if (!message) {\r\n        message = \"\".concat(error.path, \" is invalid. Not meeting \").concat(error.keyword, \" constraint\");\r\n    }\r\n    return {\r\n        message: message\r\n    };\r\n}\r\nfunction validateVisualSelector(input) {\r\n    var errors = validator_1.Validators.visualSelectorValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateVisualSelector = validateVisualSelector;\r\nfunction validateSlicer(input) {\r\n    var errors = validator_1.Validators.slicerValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateSlicer = validateSlicer;\r\nfunction validateSlicerState(input) {\r\n    var errors = validator_1.Validators.slicerStateValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateSlicerState = validateSlicerState;\r\nfunction validatePlayBookmarkRequest(input) {\r\n    var errors = validator_1.Validators.playBookmarkRequestValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validatePlayBookmarkRequest = validatePlayBookmarkRequest;\r\nfunction validateAddBookmarkRequest(input) {\r\n    var errors = validator_1.Validators.addBookmarkRequestValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateAddBookmarkRequest = validateAddBookmarkRequest;\r\nfunction validateApplyBookmarkByNameRequest(input) {\r\n    var errors = validator_1.Validators.applyBookmarkByNameRequestValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateApplyBookmarkByNameRequest = validateApplyBookmarkByNameRequest;\r\nfunction validateApplyBookmarkStateRequest(input) {\r\n    var errors = validator_1.Validators.applyBookmarkStateRequestValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateApplyBookmarkStateRequest = validateApplyBookmarkStateRequest;\r\nfunction validateCaptureBookmarkRequest(input) {\r\n    var errors = validator_1.Validators.captureBookmarkRequestValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateCaptureBookmarkRequest = validateCaptureBookmarkRequest;\r\nfunction validateSettings(input) {\r\n    var errors = validator_1.Validators.settingsValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateSettings = validateSettings;\r\nfunction validatePanes(input) {\r\n    var errors = validator_1.Validators.reportPanesValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validatePanes = validatePanes;\r\nfunction validateBookmarksPane(input) {\r\n    var errors = validator_1.Validators.bookmarksPaneValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateBookmarksPane = validateBookmarksPane;\r\nfunction validateFiltersPane(input) {\r\n    var errors = validator_1.Validators.filtersPaneValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateFiltersPane = validateFiltersPane;\r\nfunction validateFieldsPane(input) {\r\n    var errors = validator_1.Validators.fieldsPaneValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateFieldsPane = validateFieldsPane;\r\nfunction validatePageNavigationPane(input) {\r\n    var errors = validator_1.Validators.pageNavigationPaneValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validatePageNavigationPane = validatePageNavigationPane;\r\nfunction validateSelectionPane(input) {\r\n    var errors = validator_1.Validators.selectionPaneValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateSelectionPane = validateSelectionPane;\r\nfunction validateSyncSlicersPane(input) {\r\n    var errors = validator_1.Validators.syncSlicersPaneValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateSyncSlicersPane = validateSyncSlicersPane;\r\nfunction validateVisualizationsPane(input) {\r\n    var errors = validator_1.Validators.visualizationsPaneValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateVisualizationsPane = validateVisualizationsPane;\r\nfunction validateCustomPageSize(input) {\r\n    var errors = validator_1.Validators.customPageSizeValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateCustomPageSize = validateCustomPageSize;\r\nfunction validateExtension(input) {\r\n    var errors = validator_1.Validators.extensionValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateExtension = validateExtension;\r\nfunction validateMenuGroupExtension(input) {\r\n    var errors = validator_1.Validators.menuGroupExtensionValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateMenuGroupExtension = validateMenuGroupExtension;\r\nfunction validateReportLoad(input) {\r\n    var errors = validator_1.Validators.reportLoadValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateReportLoad = validateReportLoad;\r\nfunction validatePaginatedReportLoad(input) {\r\n    var errors = validator_1.Validators.paginatedReportLoadValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validatePaginatedReportLoad = validatePaginatedReportLoad;\r\nfunction validateCreateReport(input) {\r\n    var errors = validator_1.Validators.reportCreateValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateCreateReport = validateCreateReport;\r\nfunction validateQuickCreate(input) {\r\n    var errors = validator_1.Validators.quickCreateValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateQuickCreate = validateQuickCreate;\r\nfunction validateDashboardLoad(input) {\r\n    var errors = validator_1.Validators.dashboardLoadValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateDashboardLoad = validateDashboardLoad;\r\nfunction validateTileLoad(input) {\r\n    var errors = validator_1.Validators.tileLoadValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateTileLoad = validateTileLoad;\r\nfunction validatePage(input) {\r\n    var errors = validator_1.Validators.pageValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validatePage = validatePage;\r\nfunction validateFilter(input) {\r\n    var errors = validator_1.Validators.filterValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateFilter = validateFilter;\r\nfunction validateUpdateFiltersRequest(input) {\r\n    var errors = validator_1.Validators.updateFiltersRequestValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateUpdateFiltersRequest = validateUpdateFiltersRequest;\r\nfunction validateSaveAsParameters(input) {\r\n    var errors = validator_1.Validators.saveAsParametersValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateSaveAsParameters = validateSaveAsParameters;\r\nfunction validateLoadQnaConfiguration(input) {\r\n    var errors = validator_1.Validators.loadQnaValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateLoadQnaConfiguration = validateLoadQnaConfiguration;\r\nfunction validateQnaInterpretInputData(input) {\r\n    var errors = validator_1.Validators.qnaInterpretInputDataValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateQnaInterpretInputData = validateQnaInterpretInputData;\r\nfunction validateExportDataRequest(input) {\r\n    var errors = validator_1.Validators.exportDataRequestValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateExportDataRequest = validateExportDataRequest;\r\nfunction validateVisualHeader(input) {\r\n    var errors = validator_1.Validators.visualHeaderValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateVisualHeader = validateVisualHeader;\r\nfunction validateVisualSettings(input) {\r\n    var errors = validator_1.Validators.visualSettingsValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateVisualSettings = validateVisualSettings;\r\nfunction validateCommandsSettings(input) {\r\n    var errors = validator_1.Validators.commandsSettingsValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateCommandsSettings = validateCommandsSettings;\r\nfunction validateCustomTheme(input) {\r\n    var errors = validator_1.Validators.customThemeValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateCustomTheme = validateCustomTheme;\r\nfunction validateZoomLevel(input) {\r\n    var errors = validator_1.Validators.zoomLevelValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validateZoomLevel = validateZoomLevel;\r\nfunction validatePrintSettings(input) {\r\n    var errors = validator_1.Validators.printSettingsValidator.validate(input);\r\n    return errors ? errors.map(normalizeError) : undefined;\r\n}\r\nexports.validatePrintSettings = validatePrintSettings;\r\n\n\n/***/ }),\n/* 1 */\n/***/ ((__unused_webpack_module, exports, __nested_webpack_require_47160__) => {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Validators = void 0;\r\nvar barsValidator_1 = __nested_webpack_require_47160__(2);\r\nvar bookmarkValidator_1 = __nested_webpack_require_47160__(5);\r\nvar commandsSettingsValidator_1 = __nested_webpack_require_47160__(6);\r\nvar customThemeValidator_1 = __nested_webpack_require_47160__(7);\r\nvar dashboardLoadValidator_1 = __nested_webpack_require_47160__(8);\r\nvar datasetBindingValidator_1 = __nested_webpack_require_47160__(9);\r\nvar exportDataValidator_1 = __nested_webpack_require_47160__(10);\r\nvar extensionsValidator_1 = __nested_webpack_require_47160__(11);\r\nvar filtersValidator_1 = __nested_webpack_require_47160__(12);\r\nvar layoutValidator_1 = __nested_webpack_require_47160__(13);\r\nvar pageValidator_1 = __nested_webpack_require_47160__(14);\r\nvar panesValidator_1 = __nested_webpack_require_47160__(15);\r\nvar qnaValidator_1 = __nested_webpack_require_47160__(16);\r\nvar reportCreateValidator_1 = __nested_webpack_require_47160__(17);\r\nvar reportLoadValidator_1 = __nested_webpack_require_47160__(18);\r\nvar paginatedReportLoadValidator_1 = __nested_webpack_require_47160__(19);\r\nvar saveAsParametersValidator_1 = __nested_webpack_require_47160__(20);\r\nvar selectorsValidator_1 = __nested_webpack_require_47160__(21);\r\nvar settingsValidator_1 = __nested_webpack_require_47160__(22);\r\nvar slicersValidator_1 = __nested_webpack_require_47160__(23);\r\nvar tileLoadValidator_1 = __nested_webpack_require_47160__(24);\r\nvar visualSettingsValidator_1 = __nested_webpack_require_47160__(25);\r\nvar anyOfValidator_1 = __nested_webpack_require_47160__(26);\r\nvar fieldForbiddenValidator_1 = __nested_webpack_require_47160__(27);\r\nvar fieldRequiredValidator_1 = __nested_webpack_require_47160__(28);\r\nvar mapValidator_1 = __nested_webpack_require_47160__(29);\r\nvar typeValidator_1 = __nested_webpack_require_47160__(4);\r\nvar parameterPanelValidator_1 = __nested_webpack_require_47160__(30);\r\nvar datasetCreateConfigValidator_1 = __nested_webpack_require_47160__(31);\r\nvar quickCreateValidator_1 = __nested_webpack_require_47160__(32);\r\nvar printSettingsValidator_1 = __nested_webpack_require_47160__(33);\r\nvar paginatedReportDatasetBindingValidator_1 = __nested_webpack_require_47160__(34);\r\nexports.Validators = {\r\n    addBookmarkRequestValidator: new bookmarkValidator_1.AddBookmarkRequestValidator(),\r\n    advancedFilterTypeValidator: new typeValidator_1.EnumValidator([0]),\r\n    advancedFilterValidator: new filtersValidator_1.AdvancedFilterValidator(),\r\n    anyArrayValidator: new typeValidator_1.ArrayValidator([new anyOfValidator_1.AnyOfValidator([new typeValidator_1.StringValidator(), new typeValidator_1.NumberValidator(), new typeValidator_1.BooleanValidator()])]),\r\n    anyFilterValidator: new anyOfValidator_1.AnyOfValidator([new filtersValidator_1.BasicFilterValidator(), new filtersValidator_1.AdvancedFilterValidator(), new filtersValidator_1.IncludeExcludeFilterValidator(), new filtersValidator_1.NotSupportedFilterValidator(), new filtersValidator_1.RelativeDateFilterValidator(), new filtersValidator_1.TopNFilterValidator(), new filtersValidator_1.RelativeTimeFilterValidator(), new filtersValidator_1.HierarchyFilterValidator()]),\r\n    anyValueValidator: new anyOfValidator_1.AnyOfValidator([new typeValidator_1.StringValidator(), new typeValidator_1.NumberValidator(), new typeValidator_1.BooleanValidator()]),\r\n    actionBarValidator: new barsValidator_1.ActionBarValidator(),\r\n    statusBarValidator: new barsValidator_1.StatusBarValidator(),\r\n    applyBookmarkByNameRequestValidator: new bookmarkValidator_1.ApplyBookmarkByNameRequestValidator(),\r\n    applyBookmarkStateRequestValidator: new bookmarkValidator_1.ApplyBookmarkStateRequestValidator(),\r\n    applyBookmarkValidator: new anyOfValidator_1.AnyOfValidator([new bookmarkValidator_1.ApplyBookmarkByNameRequestValidator(), new bookmarkValidator_1.ApplyBookmarkStateRequestValidator()]),\r\n    backgroundValidator: new typeValidator_1.EnumValidator([0, 1]),\r\n    basicFilterTypeValidator: new typeValidator_1.EnumValidator([1]),\r\n    basicFilterValidator: new filtersValidator_1.BasicFilterValidator(),\r\n    booleanArrayValidator: new typeValidator_1.BooleanArrayValidator(),\r\n    booleanValidator: new typeValidator_1.BooleanValidator(),\r\n    bookmarksPaneValidator: new panesValidator_1.BookmarksPaneValidator(),\r\n    captureBookmarkOptionsValidator: new bookmarkValidator_1.CaptureBookmarkOptionsValidator(),\r\n    captureBookmarkRequestValidator: new bookmarkValidator_1.CaptureBookmarkRequestValidator(),\r\n    columnSchemaArrayValidator: new typeValidator_1.ArrayValidator([new datasetCreateConfigValidator_1.ColumnSchemaValidator()]),\r\n    commandDisplayOptionValidator: new typeValidator_1.EnumValidator([0, 1, 2]),\r\n    commandExtensionSelectorValidator: new anyOfValidator_1.AnyOfValidator([new selectorsValidator_1.VisualSelectorValidator(), new selectorsValidator_1.VisualTypeSelectorValidator()]),\r\n    commandExtensionArrayValidator: new typeValidator_1.ArrayValidator([new extensionsValidator_1.CommandExtensionValidator()]),\r\n    commandExtensionValidator: new extensionsValidator_1.CommandExtensionValidator(),\r\n    commandsSettingsArrayValidator: new typeValidator_1.ArrayValidator([new commandsSettingsValidator_1.CommandsSettingsValidator()]),\r\n    commandsSettingsValidator: new commandsSettingsValidator_1.CommandsSettingsValidator(),\r\n    conditionItemValidator: new filtersValidator_1.ConditionItemValidator(),\r\n    contrastModeValidator: new typeValidator_1.EnumValidator([0, 1, 2, 3, 4]),\r\n    credentialDetailsValidator: new mapValidator_1.MapValidator([new typeValidator_1.StringValidator()], [new typeValidator_1.StringValidator()]),\r\n    credentialsValidator: new datasetCreateConfigValidator_1.CredentialsValidator(),\r\n    credentialTypeValidator: new typeValidator_1.EnumValidator([0, 1, 2]),\r\n    customLayoutDisplayOptionValidator: new typeValidator_1.EnumValidator([0, 1, 2]),\r\n    customLayoutValidator: new layoutValidator_1.CustomLayoutValidator(),\r\n    customPageSizeValidator: new pageValidator_1.CustomPageSizeValidator(),\r\n    customThemeValidator: new customThemeValidator_1.CustomThemeValidator(),\r\n    dashboardLoadValidator: new dashboardLoadValidator_1.DashboardLoadValidator(),\r\n    dataCacheModeValidator: new typeValidator_1.EnumValidator([0, 1]),\r\n    datasetBindingValidator: new datasetBindingValidator_1.DatasetBindingValidator(),\r\n    datasetCreateConfigValidator: new datasetCreateConfigValidator_1.DatasetCreateConfigValidator(),\r\n    datasourceConnectionConfigValidator: new datasetCreateConfigValidator_1.DatasourceConnectionConfigValidator(),\r\n    displayStateModeValidator: new typeValidator_1.EnumValidator([0, 1]),\r\n    displayStateValidator: new layoutValidator_1.DisplayStateValidator(),\r\n    exportDataRequestValidator: new exportDataValidator_1.ExportDataRequestValidator(),\r\n    extensionArrayValidator: new typeValidator_1.ArrayValidator([new extensionsValidator_1.ExtensionValidator()]),\r\n    extensionsValidator: new anyOfValidator_1.AnyOfValidator([new typeValidator_1.ArrayValidator([new extensionsValidator_1.ExtensionValidator()]), new extensionsValidator_1.ExtensionsValidator()]),\r\n    extensionPointsValidator: new extensionsValidator_1.ExtensionPointsValidator(),\r\n    extensionValidator: new extensionsValidator_1.ExtensionValidator(),\r\n    fieldForbiddenValidator: new fieldForbiddenValidator_1.FieldForbiddenValidator(),\r\n    fieldRequiredValidator: new fieldRequiredValidator_1.FieldRequiredValidator(),\r\n    fieldsPaneValidator: new panesValidator_1.FieldsPaneValidator(),\r\n    filterColumnTargetValidator: new filtersValidator_1.FilterColumnTargetValidator(),\r\n    filterDisplaySettingsValidator: new filtersValidator_1.FilterDisplaySettingsValidator(),\r\n    filterConditionsValidator: new typeValidator_1.ArrayValidator([new filtersValidator_1.ConditionItemValidator()]),\r\n    filterHierarchyTargetValidator: new filtersValidator_1.FilterHierarchyTargetValidator(),\r\n    filterMeasureTargetValidator: new filtersValidator_1.FilterMeasureTargetValidator(),\r\n    filterTargetValidator: new anyOfValidator_1.AnyOfValidator([new filtersValidator_1.FilterColumnTargetValidator(), new filtersValidator_1.FilterHierarchyTargetValidator(), new filtersValidator_1.FilterMeasureTargetValidator(), new typeValidator_1.ArrayValidator([new anyOfValidator_1.AnyOfValidator([new filtersValidator_1.FilterColumnTargetValidator(), new filtersValidator_1.FilterHierarchyTargetValidator(), new filtersValidator_1.FilterMeasureTargetValidator(), new filtersValidator_1.FilterKeyColumnsTargetValidator(), new filtersValidator_1.FilterKeyHierarchyTargetValidator(), new typeValidator_1.ArrayValidator([new anyOfValidator_1.AnyOfValidator([new filtersValidator_1.FilterColumnTargetValidator(), new filtersValidator_1.FilterHierarchyTargetValidator(), new filtersValidator_1.FilterMeasureTargetValidator(), new filtersValidator_1.FilterKeyColumnsTargetValidator(), new filtersValidator_1.FilterKeyHierarchyTargetValidator()])])])])]),\r\n    filterValidator: new filtersValidator_1.FilterValidator(),\r\n    filterTypeValidator: new typeValidator_1.EnumValidator([0, 1, 2, 3, 4, 5, 6, 7, 9]),\r\n    filtersArrayValidator: new typeValidator_1.ArrayValidator([new filtersValidator_1.FilterValidator()]),\r\n    filtersOperationsUpdateValidator: new typeValidator_1.EnumValidator([1, 2, 3]),\r\n    filtersOperationsRemoveAllValidator: new typeValidator_1.EnumValidator([0]),\r\n    filtersPaneValidator: new panesValidator_1.FiltersPaneValidator(),\r\n    hyperlinkClickBehaviorValidator: new typeValidator_1.EnumValidator([0, 1, 2]),\r\n    includeExcludeFilterValidator: new filtersValidator_1.IncludeExcludeFilterValidator(),\r\n    includeExludeFilterTypeValidator: new typeValidator_1.EnumValidator([3]),\r\n    includeExcludeFilterValuesValidator: new typeValidator_1.ArrayValidator([new anyOfValidator_1.AnyOfValidator([new typeValidator_1.StringValidator(), new typeValidator_1.NumberValidator(), new typeValidator_1.BooleanValidator(), new typeValidator_1.ArrayValidator([new typeValidator_1.ArrayValidator([new filtersValidator_1.IncludeExcludePointValueValidator()])])])]),\r\n    hierarchyFilterTypeValidator: new typeValidator_1.EnumValidator([9]),\r\n    hierarchyFilterValuesValidator: new typeValidator_1.ArrayValidator([new filtersValidator_1.HierarchyFilterNodeValidator()]),\r\n    layoutTypeValidator: new typeValidator_1.EnumValidator([0, 1, 2, 3]),\r\n    loadQnaValidator: new qnaValidator_1.LoadQnaValidator(),\r\n    menuExtensionValidator: new anyOfValidator_1.AnyOfValidator([new extensionsValidator_1.FlatMenuExtensionValidator(), new extensionsValidator_1.GroupedMenuExtensionValidator()]),\r\n    menuGroupExtensionArrayValidator: new typeValidator_1.ArrayValidator([new extensionsValidator_1.MenuGroupExtensionValidator()]),\r\n    menuGroupExtensionValidator: new extensionsValidator_1.MenuGroupExtensionValidator(),\r\n    menuLocationValidator: new typeValidator_1.EnumValidator([0, 1]),\r\n    notSupportedFilterTypeValidator: new typeValidator_1.EnumValidator([2]),\r\n    notSupportedFilterValidator: new filtersValidator_1.NotSupportedFilterValidator(),\r\n    numberArrayValidator: new typeValidator_1.NumberArrayValidator(),\r\n    numberValidator: new typeValidator_1.NumberValidator(),\r\n    onLoadFiltersBaseValidator: new anyOfValidator_1.AnyOfValidator([new filtersValidator_1.OnLoadFiltersBaseValidator(), new filtersValidator_1.OnLoadFiltersBaseRemoveOperationValidator()]),\r\n    pageLayoutValidator: new mapValidator_1.MapValidator([new typeValidator_1.StringValidator()], [new layoutValidator_1.VisualLayoutValidator()]),\r\n    pageNavigationPaneValidator: new panesValidator_1.PageNavigationPaneValidator(),\r\n    pageNavigationPositionValidator: new typeValidator_1.EnumValidator([0, 1]),\r\n    pageSizeTypeValidator: new typeValidator_1.EnumValidator([0, 1, 2, 3, 4, 5]),\r\n    pageSizeValidator: new pageValidator_1.PageSizeValidator(),\r\n    pageValidator: new pageValidator_1.PageValidator(),\r\n    pageViewFieldValidator: new pageValidator_1.PageViewFieldValidator(),\r\n    pagesLayoutValidator: new mapValidator_1.MapValidator([new typeValidator_1.StringValidator()], [new layoutValidator_1.PageLayoutValidator()]),\r\n    paginatedReportCommandsValidator: new commandsSettingsValidator_1.PaginatedReportCommandsValidator(),\r\n    paginatedReportDatasetBindingArrayValidator: new typeValidator_1.ArrayValidator([new paginatedReportDatasetBindingValidator_1.PaginatedReportDatasetBindingValidator()]),\r\n    paginatedReportLoadValidator: new paginatedReportLoadValidator_1.PaginatedReportLoadValidator(),\r\n    paginatedReportsettingsValidator: new settingsValidator_1.PaginatedReportSettingsValidator(),\r\n    parameterValuesArrayValidator: new typeValidator_1.ArrayValidator([new paginatedReportLoadValidator_1.ReportParameterFieldsValidator()]),\r\n    parametersPanelValidator: new parameterPanelValidator_1.ParametersPanelValidator(),\r\n    permissionsValidator: new typeValidator_1.EnumValidator([0, 1, 2, 4, 7]),\r\n    playBookmarkRequestValidator: new bookmarkValidator_1.PlayBookmarkRequestValidator(),\r\n    printSettingsValidator: new printSettingsValidator_1.PrintSettingsValidator(),\r\n    qnaInterpretInputDataValidator: new qnaValidator_1.QnaInterpretInputDataValidator(),\r\n    qnaPanesValidator: new panesValidator_1.QnaPanesValidator(),\r\n    qnaSettingValidator: new qnaValidator_1.QnaSettingsValidator(),\r\n    quickCreateValidator: new quickCreateValidator_1.QuickCreateValidator(),\r\n    rawDataValidator: new typeValidator_1.ArrayValidator([new typeValidator_1.ArrayValidator([new typeValidator_1.StringValidator()])]),\r\n    relativeDateFilterOperatorValidator: new typeValidator_1.EnumValidator([0, 1, 2]),\r\n    relativeDateFilterTimeUnitTypeValidator: new typeValidator_1.EnumValidator([0, 1, 2, 3, 4, 5, 6]),\r\n    relativeDateFilterTypeValidator: new typeValidator_1.EnumValidator([4]),\r\n    relativeDateFilterValidator: new filtersValidator_1.RelativeDateFilterValidator(),\r\n    relativeDateTimeFilterTypeValidator: new typeValidator_1.EnumValidator([4, 7]),\r\n    relativeDateTimeFilterUnitTypeValidator: new typeValidator_1.EnumValidator([0, 1, 2, 3, 4, 5, 6, 7, 8]),\r\n    relativeTimeFilterTimeUnitTypeValidator: new typeValidator_1.EnumValidator([7, 8]),\r\n    relativeTimeFilterTypeValidator: new typeValidator_1.EnumValidator([7]),\r\n    relativeTimeFilterValidator: new filtersValidator_1.RelativeTimeFilterValidator(),\r\n    reportBarsValidator: new barsValidator_1.ReportBarsValidator(),\r\n    reportCreateValidator: new reportCreateValidator_1.ReportCreateValidator(),\r\n    reportLoadFiltersValidator: new anyOfValidator_1.AnyOfValidator([new typeValidator_1.ArrayValidator([new filtersValidator_1.FilterValidator()]), new filtersValidator_1.OnLoadFiltersValidator()]),\r\n    reportLoadValidator: new reportLoadValidator_1.ReportLoadValidator(),\r\n    reportPanesValidator: new panesValidator_1.ReportPanesValidator(),\r\n    saveAsParametersValidator: new saveAsParametersValidator_1.SaveAsParametersValidator(),\r\n    selectionPaneValidator: new panesValidator_1.SelectionPaneValidator(),\r\n    settingsValidator: new settingsValidator_1.SettingsValidator(),\r\n    singleCommandSettingsValidator: new commandsSettingsValidator_1.SingleCommandSettingsValidator(),\r\n    slicerSelectorValidator: new anyOfValidator_1.AnyOfValidator([new selectorsValidator_1.VisualSelectorValidator(), new selectorsValidator_1.SlicerTargetSelectorValidator()]),\r\n    slicerStateValidator: new slicersValidator_1.SlicerStateValidator(),\r\n    slicerTargetValidator: new anyOfValidator_1.AnyOfValidator([new filtersValidator_1.FilterColumnTargetValidator(), new filtersValidator_1.FilterHierarchyTargetValidator(), new filtersValidator_1.FilterMeasureTargetValidator(), new filtersValidator_1.FilterKeyColumnsTargetValidator(), new filtersValidator_1.FilterKeyHierarchyTargetValidator()]),\r\n    slicerValidator: new slicersValidator_1.SlicerValidator(),\r\n    stringArrayValidator: new typeValidator_1.StringArrayValidator(),\r\n    stringValidator: new typeValidator_1.StringValidator(),\r\n    syncSlicersPaneValidator: new panesValidator_1.SyncSlicersPaneValidator(),\r\n    tableDataArrayValidator: new typeValidator_1.ArrayValidator([new datasetCreateConfigValidator_1.TableDataValidator()]),\r\n    tableSchemaListValidator: new typeValidator_1.ArrayValidator([new datasetCreateConfigValidator_1.TableSchemaValidator()]),\r\n    tileLoadValidator: new tileLoadValidator_1.TileLoadValidator(),\r\n    tokenTypeValidator: new typeValidator_1.EnumValidator([0, 1]),\r\n    topNFilterTypeValidator: new typeValidator_1.EnumValidator([5]),\r\n    topNFilterValidator: new filtersValidator_1.TopNFilterValidator(),\r\n    updateFiltersRequestValidator: new anyOfValidator_1.AnyOfValidator([new filtersValidator_1.UpdateFiltersRequestValidator(), new filtersValidator_1.RemoveFiltersRequestValidator()]),\r\n    viewModeValidator: new typeValidator_1.EnumValidator([0, 1]),\r\n    visualCommandSelectorValidator: new anyOfValidator_1.AnyOfValidator([new selectorsValidator_1.VisualSelectorValidator(), new selectorsValidator_1.VisualTypeSelectorValidator()]),\r\n    visualHeaderSelectorValidator: new anyOfValidator_1.AnyOfValidator([new selectorsValidator_1.VisualSelectorValidator(), new selectorsValidator_1.VisualTypeSelectorValidator()]),\r\n    visualHeaderSettingsValidator: new visualSettingsValidator_1.VisualHeaderSettingsValidator(),\r\n    visualHeaderValidator: new visualSettingsValidator_1.VisualHeaderValidator(),\r\n    visualHeadersValidator: new typeValidator_1.ArrayValidator([new visualSettingsValidator_1.VisualHeaderValidator()]),\r\n    visualizationsPaneValidator: new panesValidator_1.VisualizationsPaneValidator(),\r\n    visualLayoutValidator: new layoutValidator_1.VisualLayoutValidator(),\r\n    visualSelectorValidator: new selectorsValidator_1.VisualSelectorValidator(),\r\n    visualSettingsValidator: new visualSettingsValidator_1.VisualSettingsValidator(),\r\n    visualTypeSelectorValidator: new selectorsValidator_1.VisualTypeSelectorValidator(),\r\n    zoomLevelValidator: new typeValidator_1.RangeValidator(0.25, 4),\r\n};\r\n\n\n/***/ }),\n/* 2 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_65027__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.StatusBarValidator = exports.ActionBarValidator = exports.ReportBarsValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_65027__(3);\r\nvar typeValidator_1 = __nested_webpack_require_65027__(4);\r\nvar validator_1 = __nested_webpack_require_65027__(1);\r\nvar ReportBarsValidator = /** @class */ (function (_super) {\r\n    __extends(ReportBarsValidator, _super);\r\n    function ReportBarsValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ReportBarsValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"actionBar\",\r\n                validators: [validator_1.Validators.actionBarValidator]\r\n            },\r\n            {\r\n                field: \"statusBar\",\r\n                validators: [validator_1.Validators.statusBarValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return ReportBarsValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.ReportBarsValidator = ReportBarsValidator;\r\nvar ActionBarValidator = /** @class */ (function (_super) {\r\n    __extends(ActionBarValidator, _super);\r\n    function ActionBarValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ActionBarValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"visible\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return ActionBarValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.ActionBarValidator = ActionBarValidator;\r\nvar StatusBarValidator = /** @class */ (function (_super) {\r\n    __extends(StatusBarValidator, _super);\r\n    function StatusBarValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    StatusBarValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"visible\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return StatusBarValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.StatusBarValidator = StatusBarValidator;\r\n\n\n/***/ }),\n/* 3 */\n/***/ ((__unused_webpack_module, exports) => {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.MultipleFieldsValidator = void 0;\r\nvar MultipleFieldsValidator = /** @class */ (function () {\r\n    function MultipleFieldsValidator(fieldValidatorsPairs) {\r\n        this.fieldValidatorsPairs = fieldValidatorsPairs;\r\n    }\r\n    MultipleFieldsValidator.prototype.validate = function (input, path, field) {\r\n        if (!this.fieldValidatorsPairs) {\r\n            return null;\r\n        }\r\n        var fieldsPath = path ? path + \".\" + field : field;\r\n        for (var _i = 0, _a = this.fieldValidatorsPairs; _i < _a.length; _i++) {\r\n            var fieldValidators = _a[_i];\r\n            for (var _b = 0, _c = fieldValidators.validators; _b < _c.length; _b++) {\r\n                var validator = _c[_b];\r\n                var errors = validator.validate(input[fieldValidators.field], fieldsPath, fieldValidators.field);\r\n                if (errors) {\r\n                    return errors;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    return MultipleFieldsValidator;\r\n}());\r\nexports.MultipleFieldsValidator = MultipleFieldsValidator;\r\n\n\n/***/ }),\n/* 4 */\n/***/ (function(__unused_webpack_module, exports) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.RangeValidator = exports.NumberArrayValidator = exports.BooleanArrayValidator = exports.StringArrayValidator = exports.EnumValidator = exports.SchemaValidator = exports.ValueValidator = exports.NumberValidator = exports.BooleanValidator = exports.StringValidator = exports.TypeValidator = exports.ArrayValidator = exports.ObjectValidator = void 0;\r\nvar ObjectValidator = /** @class */ (function () {\r\n    function ObjectValidator() {\r\n    }\r\n    ObjectValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        if (typeof input !== \"object\" || Array.isArray(input)) {\r\n            return [{\r\n                    message: field !== undefined ? field + \" must be an object\" : \"input must be an object\",\r\n                    path: path,\r\n                    keyword: \"type\"\r\n                }];\r\n        }\r\n        return null;\r\n    };\r\n    return ObjectValidator;\r\n}());\r\nexports.ObjectValidator = ObjectValidator;\r\nvar ArrayValidator = /** @class */ (function () {\r\n    function ArrayValidator(itemValidators) {\r\n        this.itemValidators = itemValidators;\r\n    }\r\n    ArrayValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        if (!(Array.isArray(input))) {\r\n            return [{\r\n                    message: field + \" property is invalid\",\r\n                    path: (path ? path + \".\" : \"\") + field,\r\n                    keyword: \"type\"\r\n                }];\r\n        }\r\n        for (var i = 0; i < input.length; i++) {\r\n            var fieldsPath = (path ? path + \".\" : \"\") + field + \".\" + i.toString();\r\n            for (var _i = 0, _a = this.itemValidators; _i < _a.length; _i++) {\r\n                var validator = _a[_i];\r\n                var errors = validator.validate(input[i], fieldsPath, field);\r\n                if (errors) {\r\n                    return [{\r\n                            message: field + \" property is invalid\",\r\n                            path: (path ? path + \".\" : \"\") + field,\r\n                            keyword: \"type\"\r\n                        }];\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    return ArrayValidator;\r\n}());\r\nexports.ArrayValidator = ArrayValidator;\r\nvar TypeValidator = /** @class */ (function () {\r\n    function TypeValidator(expectedType) {\r\n        this.expectedType = expectedType;\r\n    }\r\n    TypeValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        if (!(typeof input === this.expectedType)) {\r\n            return [{\r\n                    message: field + \" must be a \" + this.expectedType,\r\n                    path: (path ? path + \".\" : \"\") + field,\r\n                    keyword: \"type\"\r\n                }];\r\n        }\r\n        return null;\r\n    };\r\n    return TypeValidator;\r\n}());\r\nexports.TypeValidator = TypeValidator;\r\nvar StringValidator = /** @class */ (function (_super) {\r\n    __extends(StringValidator, _super);\r\n    function StringValidator() {\r\n        return _super.call(this, \"string\") || this;\r\n    }\r\n    return StringValidator;\r\n}(TypeValidator));\r\nexports.StringValidator = StringValidator;\r\nvar BooleanValidator = /** @class */ (function (_super) {\r\n    __extends(BooleanValidator, _super);\r\n    function BooleanValidator() {\r\n        return _super.call(this, \"boolean\") || this;\r\n    }\r\n    return BooleanValidator;\r\n}(TypeValidator));\r\nexports.BooleanValidator = BooleanValidator;\r\nvar NumberValidator = /** @class */ (function (_super) {\r\n    __extends(NumberValidator, _super);\r\n    function NumberValidator() {\r\n        return _super.call(this, \"number\") || this;\r\n    }\r\n    return NumberValidator;\r\n}(TypeValidator));\r\nexports.NumberValidator = NumberValidator;\r\nvar ValueValidator = /** @class */ (function () {\r\n    function ValueValidator(possibleValues) {\r\n        this.possibleValues = possibleValues;\r\n    }\r\n    ValueValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        if (this.possibleValues.indexOf(input) < 0) {\r\n            return [{\r\n                    message: field + \" property is invalid\",\r\n                    path: (path ? path + \".\" : \"\") + field,\r\n                    keyword: \"invalid\"\r\n                }];\r\n        }\r\n        return null;\r\n    };\r\n    return ValueValidator;\r\n}());\r\nexports.ValueValidator = ValueValidator;\r\nvar SchemaValidator = /** @class */ (function (_super) {\r\n    __extends(SchemaValidator, _super);\r\n    function SchemaValidator(schemaValue) {\r\n        var _this = _super.call(this, [schemaValue]) || this;\r\n        _this.schemaValue = schemaValue;\r\n        return _this;\r\n    }\r\n    SchemaValidator.prototype.validate = function (input, path, field) {\r\n        return _super.prototype.validate.call(this, input, path, field);\r\n    };\r\n    return SchemaValidator;\r\n}(ValueValidator));\r\nexports.SchemaValidator = SchemaValidator;\r\nvar EnumValidator = /** @class */ (function (_super) {\r\n    __extends(EnumValidator, _super);\r\n    function EnumValidator(possibleValues) {\r\n        var _this = _super.call(this) || this;\r\n        _this.possibleValues = possibleValues;\r\n        return _this;\r\n    }\r\n    EnumValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var valueValidator = new ValueValidator(this.possibleValues);\r\n        return valueValidator.validate(input, path, field);\r\n    };\r\n    return EnumValidator;\r\n}(NumberValidator));\r\nexports.EnumValidator = EnumValidator;\r\nvar StringArrayValidator = /** @class */ (function (_super) {\r\n    __extends(StringArrayValidator, _super);\r\n    function StringArrayValidator() {\r\n        return _super.call(this, [new StringValidator()]) || this;\r\n    }\r\n    StringArrayValidator.prototype.validate = function (input, path, field) {\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return [{\r\n                    message: field + \" must be an array of strings\",\r\n                    path: (path ? path + \".\" : \"\") + field,\r\n                    keyword: \"type\"\r\n                }];\r\n        }\r\n        return null;\r\n    };\r\n    return StringArrayValidator;\r\n}(ArrayValidator));\r\nexports.StringArrayValidator = StringArrayValidator;\r\nvar BooleanArrayValidator = /** @class */ (function (_super) {\r\n    __extends(BooleanArrayValidator, _super);\r\n    function BooleanArrayValidator() {\r\n        return _super.call(this, [new BooleanValidator()]) || this;\r\n    }\r\n    BooleanArrayValidator.prototype.validate = function (input, path, field) {\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return [{\r\n                    message: field + \" must be an array of booleans\",\r\n                    path: (path ? path + \".\" : \"\") + field,\r\n                    keyword: \"type\"\r\n                }];\r\n        }\r\n        return null;\r\n    };\r\n    return BooleanArrayValidator;\r\n}(ArrayValidator));\r\nexports.BooleanArrayValidator = BooleanArrayValidator;\r\nvar NumberArrayValidator = /** @class */ (function (_super) {\r\n    __extends(NumberArrayValidator, _super);\r\n    function NumberArrayValidator() {\r\n        return _super.call(this, [new NumberValidator()]) || this;\r\n    }\r\n    NumberArrayValidator.prototype.validate = function (input, path, field) {\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return [{\r\n                    message: field + \" must be an array of numbers\",\r\n                    path: (path ? path + \".\" : \"\") + field,\r\n                    keyword: \"type\"\r\n                }];\r\n        }\r\n        return null;\r\n    };\r\n    return NumberArrayValidator;\r\n}(ArrayValidator));\r\nexports.NumberArrayValidator = NumberArrayValidator;\r\nvar RangeValidator = /** @class */ (function (_super) {\r\n    __extends(RangeValidator, _super);\r\n    function RangeValidator(minValue, maxValue) {\r\n        var _this = _super.call(this) || this;\r\n        _this.minValue = minValue;\r\n        _this.maxValue = maxValue;\r\n        return _this;\r\n    }\r\n    RangeValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        // input is a number, now check if it's in the given range\r\n        if (input > this.maxValue || input < this.minValue) {\r\n            return [{\r\n                    message: field + \" must be a number between \" + this.minValue.toString() + \" and \" + this.maxValue.toString(),\r\n                    path: (path ? path + \".\" : \"\") + field,\r\n                    keyword: \"range\"\r\n                }];\r\n        }\r\n        return null;\r\n    };\r\n    return RangeValidator;\r\n}(NumberValidator));\r\nexports.RangeValidator = RangeValidator;\r\n\n\n/***/ }),\n/* 5 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_80906__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CaptureBookmarkRequestValidator = exports.CaptureBookmarkOptionsValidator = exports.ApplyBookmarkStateRequestValidator = exports.ApplyBookmarkByNameRequestValidator = exports.AddBookmarkRequestValidator = exports.PlayBookmarkRequestValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_80906__(3);\r\nvar typeValidator_1 = __nested_webpack_require_80906__(4);\r\nvar validator_1 = __nested_webpack_require_80906__(1);\r\nvar PlayBookmarkRequestValidator = /** @class */ (function (_super) {\r\n    __extends(PlayBookmarkRequestValidator, _super);\r\n    function PlayBookmarkRequestValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    PlayBookmarkRequestValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"playMode\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, new typeValidator_1.EnumValidator([0, 1])]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return PlayBookmarkRequestValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.PlayBookmarkRequestValidator = PlayBookmarkRequestValidator;\r\nvar AddBookmarkRequestValidator = /** @class */ (function (_super) {\r\n    __extends(AddBookmarkRequestValidator, _super);\r\n    function AddBookmarkRequestValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    AddBookmarkRequestValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"state\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"displayName\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"apply\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return AddBookmarkRequestValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.AddBookmarkRequestValidator = AddBookmarkRequestValidator;\r\nvar ApplyBookmarkByNameRequestValidator = /** @class */ (function (_super) {\r\n    __extends(ApplyBookmarkByNameRequestValidator, _super);\r\n    function ApplyBookmarkByNameRequestValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ApplyBookmarkByNameRequestValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"name\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return ApplyBookmarkByNameRequestValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.ApplyBookmarkByNameRequestValidator = ApplyBookmarkByNameRequestValidator;\r\nvar ApplyBookmarkStateRequestValidator = /** @class */ (function (_super) {\r\n    __extends(ApplyBookmarkStateRequestValidator, _super);\r\n    function ApplyBookmarkStateRequestValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ApplyBookmarkStateRequestValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"state\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return ApplyBookmarkStateRequestValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.ApplyBookmarkStateRequestValidator = ApplyBookmarkStateRequestValidator;\r\nvar CaptureBookmarkOptionsValidator = /** @class */ (function (_super) {\r\n    __extends(CaptureBookmarkOptionsValidator, _super);\r\n    function CaptureBookmarkOptionsValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    CaptureBookmarkOptionsValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"personalizeVisuals\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n            {\r\n                field: \"allPages\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return CaptureBookmarkOptionsValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.CaptureBookmarkOptionsValidator = CaptureBookmarkOptionsValidator;\r\nvar CaptureBookmarkRequestValidator = /** @class */ (function (_super) {\r\n    __extends(CaptureBookmarkRequestValidator, _super);\r\n    function CaptureBookmarkRequestValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    CaptureBookmarkRequestValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"options\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.captureBookmarkOptionsValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return CaptureBookmarkRequestValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.CaptureBookmarkRequestValidator = CaptureBookmarkRequestValidator;\r\n\n\n/***/ }),\n/* 6 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_89382__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PaginatedReportCommandsValidator = exports.SingleCommandSettingsValidator = exports.CommandsSettingsValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_89382__(3);\r\nvar typeValidator_1 = __nested_webpack_require_89382__(4);\r\nvar validator_1 = __nested_webpack_require_89382__(1);\r\nvar CommandsSettingsValidator = /** @class */ (function (_super) {\r\n    __extends(CommandsSettingsValidator, _super);\r\n    function CommandsSettingsValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    CommandsSettingsValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"copy\",\r\n                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n            },\r\n            {\r\n                field: \"drill\",\r\n                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n            },\r\n            {\r\n                field: \"drillthrough\",\r\n                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n            },\r\n            {\r\n                field: \"expandCollapse\",\r\n                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n            },\r\n            {\r\n                field: \"exportData\",\r\n                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n            },\r\n            {\r\n                field: \"includeExclude\",\r\n                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n            },\r\n            {\r\n                field: \"removeVisual\",\r\n                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n            },\r\n            {\r\n                field: \"search\",\r\n                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n            },\r\n            {\r\n                field: \"seeData\",\r\n                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n            },\r\n            {\r\n                field: \"sort\",\r\n                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n            },\r\n            {\r\n                field: \"spotlight\",\r\n                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n            },\r\n            {\r\n                field: \"insightsAnalysis\",\r\n                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n            },\r\n            {\r\n                field: \"addComment\",\r\n                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n            },\r\n            {\r\n                field: \"groupVisualContainers\",\r\n                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n            },\r\n            {\r\n                field: \"summarize\",\r\n                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n            },\r\n            {\r\n                field: \"clearSelection\",\r\n                validators: [validator_1.Validators.singleCommandSettingsValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return CommandsSettingsValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.CommandsSettingsValidator = CommandsSettingsValidator;\r\nvar SingleCommandSettingsValidator = /** @class */ (function (_super) {\r\n    __extends(SingleCommandSettingsValidator, _super);\r\n    function SingleCommandSettingsValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    SingleCommandSettingsValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"displayOption\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.commandDisplayOptionValidator]\r\n            },\r\n            {\r\n                field: \"selector\",\r\n                validators: [validator_1.Validators.visualCommandSelectorValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return SingleCommandSettingsValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.SingleCommandSettingsValidator = SingleCommandSettingsValidator;\r\nvar PaginatedReportCommandsValidator = /** @class */ (function (_super) {\r\n    __extends(PaginatedReportCommandsValidator, _super);\r\n    function PaginatedReportCommandsValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    PaginatedReportCommandsValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"parameterPanel\",\r\n                validators: [validator_1.Validators.parametersPanelValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return PaginatedReportCommandsValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.PaginatedReportCommandsValidator = PaginatedReportCommandsValidator;\r\n\n\n/***/ }),\n/* 7 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_96415__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CustomThemeValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_96415__(3);\r\nvar typeValidator_1 = __nested_webpack_require_96415__(4);\r\nvar CustomThemeValidator = /** @class */ (function (_super) {\r\n    __extends(CustomThemeValidator, _super);\r\n    function CustomThemeValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    CustomThemeValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"themeJson\",\r\n                validators: [new typeValidator_1.ObjectValidator()]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return CustomThemeValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.CustomThemeValidator = CustomThemeValidator;\r\n\n\n/***/ }),\n/* 8 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_98569__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.DashboardLoadValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_98569__(3);\r\nvar typeValidator_1 = __nested_webpack_require_98569__(4);\r\nvar validator_1 = __nested_webpack_require_98569__(1);\r\nvar DashboardLoadValidator = /** @class */ (function (_super) {\r\n    __extends(DashboardLoadValidator, _super);\r\n    function DashboardLoadValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    DashboardLoadValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"accessToken\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"id\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"groupId\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"pageView\",\r\n                validators: [validator_1.Validators.pageViewFieldValidator]\r\n            },\r\n            {\r\n                field: \"tokenType\",\r\n                validators: [validator_1.Validators.tokenTypeValidator]\r\n            },\r\n            {\r\n                field: \"embedUrl\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return DashboardLoadValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.DashboardLoadValidator = DashboardLoadValidator;\r\n\n\n/***/ }),\n/* 9 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_101568__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.DatasetBindingValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_101568__(3);\r\nvar typeValidator_1 = __nested_webpack_require_101568__(4);\r\nvar validator_1 = __nested_webpack_require_101568__(1);\r\nvar DatasetBindingValidator = /** @class */ (function (_super) {\r\n    __extends(DatasetBindingValidator, _super);\r\n    function DatasetBindingValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    DatasetBindingValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        if (!input[\"datasetId\"] && !input[\"paginatedReportBindings\"]) {\r\n            return [{\r\n                    message: \"datasetBinding cannot be empty\",\r\n                    path: (path ? path + \".\" : \"\") + field,\r\n                    keyword: \"invalid\"\r\n                }];\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"datasetId\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"paginatedReportBindings\",\r\n                validators: [validator_1.Validators.paginatedReportDatasetBindingArrayValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return DatasetBindingValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.DatasetBindingValidator = DatasetBindingValidator;\r\n\n\n/***/ }),\n/* 10 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_104264__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ExportDataRequestValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_104264__(3);\r\nvar typeValidator_1 = __nested_webpack_require_104264__(4);\r\nvar ExportDataRequestValidator = /** @class */ (function (_super) {\r\n    __extends(ExportDataRequestValidator, _super);\r\n    function ExportDataRequestValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ExportDataRequestValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"rows\",\r\n                validators: [new typeValidator_1.NumberValidator()]\r\n            },\r\n            {\r\n                field: \"exportDataType\",\r\n                validators: [new typeValidator_1.EnumValidator([0, 1])]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return ExportDataRequestValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.ExportDataRequestValidator = ExportDataRequestValidator;\r\n\n\n/***/ }),\n/* 11 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_106608__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ExtensionsValidator = exports.MenuGroupExtensionValidator = exports.ExtensionValidator = exports.CommandExtensionValidator = exports.ExtensionItemValidator = exports.ExtensionPointsValidator = exports.GroupedMenuExtensionValidator = exports.FlatMenuExtensionValidator = exports.MenuExtensionBaseValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_106608__(3);\r\nvar typeValidator_1 = __nested_webpack_require_106608__(4);\r\nvar validator_1 = __nested_webpack_require_106608__(1);\r\nvar MenuExtensionBaseValidator = /** @class */ (function (_super) {\r\n    __extends(MenuExtensionBaseValidator, _super);\r\n    function MenuExtensionBaseValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    MenuExtensionBaseValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"title\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"icon\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return MenuExtensionBaseValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.MenuExtensionBaseValidator = MenuExtensionBaseValidator;\r\nvar FlatMenuExtensionValidator = /** @class */ (function (_super) {\r\n    __extends(FlatMenuExtensionValidator, _super);\r\n    function FlatMenuExtensionValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    FlatMenuExtensionValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"menuLocation\",\r\n                validators: [validator_1.Validators.menuLocationValidator]\r\n            },\r\n            {\r\n                field: \"groupName\",\r\n                validators: [validator_1.Validators.fieldForbiddenValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return FlatMenuExtensionValidator;\r\n}(MenuExtensionBaseValidator));\r\nexports.FlatMenuExtensionValidator = FlatMenuExtensionValidator;\r\nvar GroupedMenuExtensionValidator = /** @class */ (function (_super) {\r\n    __extends(GroupedMenuExtensionValidator, _super);\r\n    function GroupedMenuExtensionValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    GroupedMenuExtensionValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"groupName\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"menuLocation\",\r\n                validators: [validator_1.Validators.fieldForbiddenValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return GroupedMenuExtensionValidator;\r\n}(MenuExtensionBaseValidator));\r\nexports.GroupedMenuExtensionValidator = GroupedMenuExtensionValidator;\r\nvar ExtensionPointsValidator = /** @class */ (function (_super) {\r\n    __extends(ExtensionPointsValidator, _super);\r\n    function ExtensionPointsValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ExtensionPointsValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"visualContextMenu\",\r\n                validators: [validator_1.Validators.menuExtensionValidator]\r\n            },\r\n            {\r\n                field: \"visualOptionsMenu\",\r\n                validators: [validator_1.Validators.menuExtensionValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return ExtensionPointsValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.ExtensionPointsValidator = ExtensionPointsValidator;\r\nvar ExtensionItemValidator = /** @class */ (function (_super) {\r\n    __extends(ExtensionItemValidator, _super);\r\n    function ExtensionItemValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ExtensionItemValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"name\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"extend\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.extensionPointsValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return ExtensionItemValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.ExtensionItemValidator = ExtensionItemValidator;\r\nvar CommandExtensionValidator = /** @class */ (function (_super) {\r\n    __extends(CommandExtensionValidator, _super);\r\n    function CommandExtensionValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    CommandExtensionValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"title\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"icon\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"selector\",\r\n                validators: [validator_1.Validators.commandExtensionSelectorValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return CommandExtensionValidator;\r\n}(ExtensionItemValidator));\r\nexports.CommandExtensionValidator = CommandExtensionValidator;\r\nvar ExtensionValidator = /** @class */ (function (_super) {\r\n    __extends(ExtensionValidator, _super);\r\n    function ExtensionValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ExtensionValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"command\",\r\n                validators: [validator_1.Validators.commandExtensionValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return ExtensionValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.ExtensionValidator = ExtensionValidator;\r\nvar MenuGroupExtensionValidator = /** @class */ (function (_super) {\r\n    __extends(MenuGroupExtensionValidator, _super);\r\n    function MenuGroupExtensionValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    MenuGroupExtensionValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"name\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"title\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"menuLocation\",\r\n                validators: [validator_1.Validators.menuLocationValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return MenuGroupExtensionValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.MenuGroupExtensionValidator = MenuGroupExtensionValidator;\r\nvar ExtensionsValidator = /** @class */ (function (_super) {\r\n    __extends(ExtensionsValidator, _super);\r\n    function ExtensionsValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ExtensionsValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"commands\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.commandExtensionArrayValidator]\r\n            },\r\n            {\r\n                field: \"groups\",\r\n                validators: [validator_1.Validators.menuGroupExtensionArrayValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return ExtensionsValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.ExtensionsValidator = ExtensionsValidator;\r\n\n\n/***/ }),\n/* 12 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_119099__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.OnLoadFiltersValidator = exports.OnLoadFiltersBaseRemoveOperationValidator = exports.OnLoadFiltersBaseValidator = exports.ConditionItemValidator = exports.RemoveFiltersRequestValidator = exports.UpdateFiltersRequestValidator = exports.FilterValidator = exports.IncludeExcludePointValueValidator = exports.HierarchyFilterNodeValidator = exports.HierarchyFilterValidator = exports.IncludeExcludeFilterValidator = exports.NotSupportedFilterValidator = exports.TopNFilterValidator = exports.RelativeTimeFilterValidator = exports.RelativeDateFilterValidator = exports.RelativeDateTimeFilterValidator = exports.AdvancedFilterValidator = exports.BasicFilterValidator = exports.FilterValidatorBase = exports.FilterDisplaySettingsValidator = exports.FilterMeasureTargetValidator = exports.FilterKeyHierarchyTargetValidator = exports.FilterHierarchyTargetValidator = exports.FilterKeyColumnsTargetValidator = exports.FilterColumnTargetValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_119099__(3);\r\nvar typeValidator_1 = __nested_webpack_require_119099__(4);\r\nvar validator_1 = __nested_webpack_require_119099__(1);\r\nvar FilterColumnTargetValidator = /** @class */ (function (_super) {\r\n    __extends(FilterColumnTargetValidator, _super);\r\n    function FilterColumnTargetValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    FilterColumnTargetValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"table\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"column\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return FilterColumnTargetValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.FilterColumnTargetValidator = FilterColumnTargetValidator;\r\nvar FilterKeyColumnsTargetValidator = /** @class */ (function (_super) {\r\n    __extends(FilterKeyColumnsTargetValidator, _super);\r\n    function FilterKeyColumnsTargetValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    FilterKeyColumnsTargetValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"keys\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringArrayValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return FilterKeyColumnsTargetValidator;\r\n}(FilterColumnTargetValidator));\r\nexports.FilterKeyColumnsTargetValidator = FilterKeyColumnsTargetValidator;\r\nvar FilterHierarchyTargetValidator = /** @class */ (function (_super) {\r\n    __extends(FilterHierarchyTargetValidator, _super);\r\n    function FilterHierarchyTargetValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    FilterHierarchyTargetValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"table\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"hierarchy\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"hierarchyLevel\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return FilterHierarchyTargetValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.FilterHierarchyTargetValidator = FilterHierarchyTargetValidator;\r\nvar FilterKeyHierarchyTargetValidator = /** @class */ (function (_super) {\r\n    __extends(FilterKeyHierarchyTargetValidator, _super);\r\n    function FilterKeyHierarchyTargetValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    FilterKeyHierarchyTargetValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"keys\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringArrayValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return FilterKeyHierarchyTargetValidator;\r\n}(FilterHierarchyTargetValidator));\r\nexports.FilterKeyHierarchyTargetValidator = FilterKeyHierarchyTargetValidator;\r\nvar FilterMeasureTargetValidator = /** @class */ (function (_super) {\r\n    __extends(FilterMeasureTargetValidator, _super);\r\n    function FilterMeasureTargetValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    FilterMeasureTargetValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"table\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"measure\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return FilterMeasureTargetValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.FilterMeasureTargetValidator = FilterMeasureTargetValidator;\r\nvar FilterDisplaySettingsValidator = /** @class */ (function (_super) {\r\n    __extends(FilterDisplaySettingsValidator, _super);\r\n    function FilterDisplaySettingsValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    FilterDisplaySettingsValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"isLockedInViewMode\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n            {\r\n                field: \"isHiddenInViewMode\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n            {\r\n                field: \"displayName\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return FilterDisplaySettingsValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.FilterDisplaySettingsValidator = FilterDisplaySettingsValidator;\r\nvar FilterValidatorBase = /** @class */ (function (_super) {\r\n    __extends(FilterValidatorBase, _super);\r\n    function FilterValidatorBase() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    FilterValidatorBase.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"target\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.filterTargetValidator]\r\n            },\r\n            {\r\n                field: \"$schema\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"filterType\",\r\n                validators: [validator_1.Validators.filterTypeValidator]\r\n            },\r\n            {\r\n                field: \"displaySettings\",\r\n                validators: [validator_1.Validators.filterDisplaySettingsValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return FilterValidatorBase;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.FilterValidatorBase = FilterValidatorBase;\r\nvar BasicFilterValidator = /** @class */ (function (_super) {\r\n    __extends(BasicFilterValidator, _super);\r\n    function BasicFilterValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    BasicFilterValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"operator\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"values\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.anyArrayValidator]\r\n            },\r\n            {\r\n                field: \"filterType\",\r\n                validators: [validator_1.Validators.basicFilterTypeValidator]\r\n            },\r\n            {\r\n                field: \"requireSingleSelection\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return BasicFilterValidator;\r\n}(FilterValidatorBase));\r\nexports.BasicFilterValidator = BasicFilterValidator;\r\nvar AdvancedFilterValidator = /** @class */ (function (_super) {\r\n    __extends(AdvancedFilterValidator, _super);\r\n    function AdvancedFilterValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    AdvancedFilterValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"logicalOperator\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"conditions\",\r\n                validators: [validator_1.Validators.filterConditionsValidator]\r\n            },\r\n            {\r\n                field: \"filterType\",\r\n                validators: [validator_1.Validators.advancedFilterTypeValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return AdvancedFilterValidator;\r\n}(FilterValidatorBase));\r\nexports.AdvancedFilterValidator = AdvancedFilterValidator;\r\nvar RelativeDateTimeFilterValidator = /** @class */ (function (_super) {\r\n    __extends(RelativeDateTimeFilterValidator, _super);\r\n    function RelativeDateTimeFilterValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    RelativeDateTimeFilterValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"operator\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.relativeDateFilterOperatorValidator]\r\n            },\r\n            {\r\n                field: \"timeUnitsCount\",\r\n                validators: [validator_1.Validators.numberValidator]\r\n            },\r\n            {\r\n                field: \"timeUnitType\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.relativeDateTimeFilterUnitTypeValidator]\r\n            },\r\n            {\r\n                field: \"filterType\",\r\n                validators: [validator_1.Validators.relativeDateTimeFilterTypeValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return RelativeDateTimeFilterValidator;\r\n}(FilterValidatorBase));\r\nexports.RelativeDateTimeFilterValidator = RelativeDateTimeFilterValidator;\r\nvar RelativeDateFilterValidator = /** @class */ (function (_super) {\r\n    __extends(RelativeDateFilterValidator, _super);\r\n    function RelativeDateFilterValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    RelativeDateFilterValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"includeToday\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.booleanValidator]\r\n            },\r\n            {\r\n                field: \"timeUnitType\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.relativeDateFilterTimeUnitTypeValidator]\r\n            },\r\n            {\r\n                field: \"filterType\",\r\n                validators: [validator_1.Validators.relativeDateFilterTypeValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return RelativeDateFilterValidator;\r\n}(RelativeDateTimeFilterValidator));\r\nexports.RelativeDateFilterValidator = RelativeDateFilterValidator;\r\nvar RelativeTimeFilterValidator = /** @class */ (function (_super) {\r\n    __extends(RelativeTimeFilterValidator, _super);\r\n    function RelativeTimeFilterValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    RelativeTimeFilterValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"timeUnitType\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.relativeTimeFilterTimeUnitTypeValidator]\r\n            },\r\n            {\r\n                field: \"filterType\",\r\n                validators: [validator_1.Validators.relativeTimeFilterTypeValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return RelativeTimeFilterValidator;\r\n}(RelativeDateTimeFilterValidator));\r\nexports.RelativeTimeFilterValidator = RelativeTimeFilterValidator;\r\nvar TopNFilterValidator = /** @class */ (function (_super) {\r\n    __extends(TopNFilterValidator, _super);\r\n    function TopNFilterValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    TopNFilterValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"operator\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"itemCount\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.numberValidator]\r\n            },\r\n            {\r\n                field: \"filterType\",\r\n                validators: [validator_1.Validators.topNFilterTypeValidator]\r\n            },\r\n            {\r\n                field: \"orderBy\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.filterTargetValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return TopNFilterValidator;\r\n}(FilterValidatorBase));\r\nexports.TopNFilterValidator = TopNFilterValidator;\r\nvar NotSupportedFilterValidator = /** @class */ (function (_super) {\r\n    __extends(NotSupportedFilterValidator, _super);\r\n    function NotSupportedFilterValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    NotSupportedFilterValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"message\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"notSupportedTypeName\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"filterType\",\r\n                validators: [validator_1.Validators.notSupportedFilterTypeValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return NotSupportedFilterValidator;\r\n}(FilterValidatorBase));\r\nexports.NotSupportedFilterValidator = NotSupportedFilterValidator;\r\nvar IncludeExcludeFilterValidator = /** @class */ (function (_super) {\r\n    __extends(IncludeExcludeFilterValidator, _super);\r\n    function IncludeExcludeFilterValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    IncludeExcludeFilterValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"isExclude\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.booleanValidator]\r\n            },\r\n            {\r\n                field: \"values\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.includeExcludeFilterValuesValidator]\r\n            },\r\n            {\r\n                field: \"filterType\",\r\n                validators: [validator_1.Validators.includeExludeFilterTypeValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return IncludeExcludeFilterValidator;\r\n}(FilterValidatorBase));\r\nexports.IncludeExcludeFilterValidator = IncludeExcludeFilterValidator;\r\nvar HierarchyFilterValidator = /** @class */ (function (_super) {\r\n    __extends(HierarchyFilterValidator, _super);\r\n    function HierarchyFilterValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    HierarchyFilterValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"hierarchyData\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.hierarchyFilterValuesValidator]\r\n            },\r\n            {\r\n                field: \"filterType\",\r\n                validators: [validator_1.Validators.hierarchyFilterTypeValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return HierarchyFilterValidator;\r\n}(FilterValidatorBase));\r\nexports.HierarchyFilterValidator = HierarchyFilterValidator;\r\nvar HierarchyFilterNodeValidator = /** @class */ (function (_super) {\r\n    __extends(HierarchyFilterNodeValidator, _super);\r\n    function HierarchyFilterNodeValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    HierarchyFilterNodeValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"value\",\r\n                validators: [validator_1.Validators.anyValueValidator]\r\n            },\r\n            {\r\n                field: \"keyValues\",\r\n                validators: [validator_1.Validators.anyArrayValidator]\r\n            },\r\n            {\r\n                field: \"children\",\r\n                validators: [validator_1.Validators.hierarchyFilterValuesValidator]\r\n            },\r\n            {\r\n                field: \"operator\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return HierarchyFilterNodeValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.HierarchyFilterNodeValidator = HierarchyFilterNodeValidator;\r\nvar IncludeExcludePointValueValidator = /** @class */ (function (_super) {\r\n    __extends(IncludeExcludePointValueValidator, _super);\r\n    function IncludeExcludePointValueValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    IncludeExcludePointValueValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"value\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.anyValueValidator]\r\n            },\r\n            {\r\n                field: \"keyValues\",\r\n                validators: [validator_1.Validators.anyArrayValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return IncludeExcludePointValueValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.IncludeExcludePointValueValidator = IncludeExcludePointValueValidator;\r\nvar FilterValidator = /** @class */ (function (_super) {\r\n    __extends(FilterValidator, _super);\r\n    function FilterValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    FilterValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        return validator_1.Validators.anyFilterValidator.validate(input, path, field);\r\n    };\r\n    return FilterValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.FilterValidator = FilterValidator;\r\nvar UpdateFiltersRequestValidator = /** @class */ (function (_super) {\r\n    __extends(UpdateFiltersRequestValidator, _super);\r\n    function UpdateFiltersRequestValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    UpdateFiltersRequestValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"filtersOperation\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.filtersOperationsUpdateValidator]\r\n            },\r\n            {\r\n                field: \"filters\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.filtersArrayValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return UpdateFiltersRequestValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.UpdateFiltersRequestValidator = UpdateFiltersRequestValidator;\r\nvar RemoveFiltersRequestValidator = /** @class */ (function (_super) {\r\n    __extends(RemoveFiltersRequestValidator, _super);\r\n    function RemoveFiltersRequestValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    RemoveFiltersRequestValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"filtersOperation\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.filtersOperationsRemoveAllValidator]\r\n            },\r\n            {\r\n                field: \"filters\",\r\n                validators: [validator_1.Validators.fieldForbiddenValidator, validator_1.Validators.filtersArrayValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return RemoveFiltersRequestValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.RemoveFiltersRequestValidator = RemoveFiltersRequestValidator;\r\nvar ConditionItemValidator = /** @class */ (function (_super) {\r\n    __extends(ConditionItemValidator, _super);\r\n    function ConditionItemValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ConditionItemValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"value\",\r\n                validators: [validator_1.Validators.anyValueValidator]\r\n            },\r\n            {\r\n                field: \"operator\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return ConditionItemValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.ConditionItemValidator = ConditionItemValidator;\r\nvar OnLoadFiltersBaseValidator = /** @class */ (function (_super) {\r\n    __extends(OnLoadFiltersBaseValidator, _super);\r\n    function OnLoadFiltersBaseValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    OnLoadFiltersBaseValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"operation\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.filtersOperationsUpdateValidator]\r\n            },\r\n            {\r\n                field: \"filters\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.filtersArrayValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return OnLoadFiltersBaseValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.OnLoadFiltersBaseValidator = OnLoadFiltersBaseValidator;\r\nvar OnLoadFiltersBaseRemoveOperationValidator = /** @class */ (function (_super) {\r\n    __extends(OnLoadFiltersBaseRemoveOperationValidator, _super);\r\n    function OnLoadFiltersBaseRemoveOperationValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    OnLoadFiltersBaseRemoveOperationValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"operation\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.filtersOperationsRemoveAllValidator]\r\n            },\r\n            {\r\n                field: \"filters\",\r\n                validators: [validator_1.Validators.fieldForbiddenValidator, validator_1.Validators.filtersArrayValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return OnLoadFiltersBaseRemoveOperationValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.OnLoadFiltersBaseRemoveOperationValidator = OnLoadFiltersBaseRemoveOperationValidator;\r\nvar OnLoadFiltersValidator = /** @class */ (function (_super) {\r\n    __extends(OnLoadFiltersValidator, _super);\r\n    function OnLoadFiltersValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    OnLoadFiltersValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"allPages\",\r\n                validators: [validator_1.Validators.onLoadFiltersBaseValidator]\r\n            },\r\n            {\r\n                field: \"currentPage\",\r\n                validators: [validator_1.Validators.onLoadFiltersBaseValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return OnLoadFiltersValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.OnLoadFiltersValidator = OnLoadFiltersValidator;\r\n\n\n/***/ }),\n/* 13 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_154405__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PageLayoutValidator = exports.DisplayStateValidator = exports.VisualLayoutValidator = exports.CustomLayoutValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_154405__(3);\r\nvar typeValidator_1 = __nested_webpack_require_154405__(4);\r\nvar validator_1 = __nested_webpack_require_154405__(1);\r\nvar CustomLayoutValidator = /** @class */ (function (_super) {\r\n    __extends(CustomLayoutValidator, _super);\r\n    function CustomLayoutValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    CustomLayoutValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"pageSize\",\r\n                validators: [validator_1.Validators.pageSizeValidator]\r\n            },\r\n            {\r\n                field: \"displayOption\",\r\n                validators: [validator_1.Validators.customLayoutDisplayOptionValidator]\r\n            },\r\n            {\r\n                field: \"pagesLayout\",\r\n                validators: [validator_1.Validators.pagesLayoutValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return CustomLayoutValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.CustomLayoutValidator = CustomLayoutValidator;\r\nvar VisualLayoutValidator = /** @class */ (function (_super) {\r\n    __extends(VisualLayoutValidator, _super);\r\n    function VisualLayoutValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    VisualLayoutValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"x\",\r\n                validators: [validator_1.Validators.numberValidator]\r\n            },\r\n            {\r\n                field: \"y\",\r\n                validators: [validator_1.Validators.numberValidator]\r\n            },\r\n            {\r\n                field: \"z\",\r\n                validators: [validator_1.Validators.numberValidator]\r\n            },\r\n            {\r\n                field: \"width\",\r\n                validators: [validator_1.Validators.numberValidator]\r\n            },\r\n            {\r\n                field: \"height\",\r\n                validators: [validator_1.Validators.numberValidator]\r\n            },\r\n            {\r\n                field: \"displayState\",\r\n                validators: [validator_1.Validators.displayStateValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return VisualLayoutValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.VisualLayoutValidator = VisualLayoutValidator;\r\nvar DisplayStateValidator = /** @class */ (function (_super) {\r\n    __extends(DisplayStateValidator, _super);\r\n    function DisplayStateValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    DisplayStateValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"mode\",\r\n                validators: [validator_1.Validators.displayStateModeValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return DisplayStateValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.DisplayStateValidator = DisplayStateValidator;\r\nvar PageLayoutValidator = /** @class */ (function (_super) {\r\n    __extends(PageLayoutValidator, _super);\r\n    function PageLayoutValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    PageLayoutValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"visualsLayout\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.pageLayoutValidator]\r\n            },\r\n            {\r\n                field: \"defaultLayout\",\r\n                validators: [validator_1.Validators.visualLayoutValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return PageLayoutValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.PageLayoutValidator = PageLayoutValidator;\r\n\n\n/***/ }),\n/* 14 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_160884__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PageViewFieldValidator = exports.PageValidator = exports.CustomPageSizeValidator = exports.PageSizeValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_160884__(3);\r\nvar typeValidator_1 = __nested_webpack_require_160884__(4);\r\nvar validator_1 = __nested_webpack_require_160884__(1);\r\nvar PageSizeValidator = /** @class */ (function (_super) {\r\n    __extends(PageSizeValidator, _super);\r\n    function PageSizeValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    PageSizeValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"type\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.pageSizeTypeValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return PageSizeValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.PageSizeValidator = PageSizeValidator;\r\nvar CustomPageSizeValidator = /** @class */ (function (_super) {\r\n    __extends(CustomPageSizeValidator, _super);\r\n    function CustomPageSizeValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    CustomPageSizeValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"width\",\r\n                validators: [validator_1.Validators.numberValidator]\r\n            },\r\n            {\r\n                field: \"height\",\r\n                validators: [validator_1.Validators.numberValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return CustomPageSizeValidator;\r\n}(PageSizeValidator));\r\nexports.CustomPageSizeValidator = CustomPageSizeValidator;\r\nvar PageValidator = /** @class */ (function (_super) {\r\n    __extends(PageValidator, _super);\r\n    function PageValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    PageValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"name\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return PageValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.PageValidator = PageValidator;\r\nvar PageViewFieldValidator = /** @class */ (function (_super) {\r\n    __extends(PageViewFieldValidator, _super);\r\n    function PageViewFieldValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    PageViewFieldValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var possibleValues = [\"actualSize\", \"fitToWidth\", \"oneColumn\"];\r\n        if (possibleValues.indexOf(input) < 0) {\r\n            return [{\r\n                    message: \"pageView must be a string with one of the following values: \\\"actualSize\\\", \\\"fitToWidth\\\", \\\"oneColumn\\\"\"\r\n                }];\r\n        }\r\n        return null;\r\n    };\r\n    return PageViewFieldValidator;\r\n}(typeValidator_1.StringValidator));\r\nexports.PageViewFieldValidator = PageViewFieldValidator;\r\n\n\n/***/ }),\n/* 15 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_166324__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.VisualizationsPaneValidator = exports.SyncSlicersPaneValidator = exports.SelectionPaneValidator = exports.PageNavigationPaneValidator = exports.FiltersPaneValidator = exports.FieldsPaneValidator = exports.BookmarksPaneValidator = exports.QnaPanesValidator = exports.ReportPanesValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_166324__(3);\r\nvar typeValidator_1 = __nested_webpack_require_166324__(4);\r\nvar validator_1 = __nested_webpack_require_166324__(1);\r\nvar ReportPanesValidator = /** @class */ (function (_super) {\r\n    __extends(ReportPanesValidator, _super);\r\n    function ReportPanesValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ReportPanesValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"bookmarks\",\r\n                validators: [validator_1.Validators.bookmarksPaneValidator]\r\n            },\r\n            {\r\n                field: \"fields\",\r\n                validators: [validator_1.Validators.fieldsPaneValidator]\r\n            },\r\n            {\r\n                field: \"filters\",\r\n                validators: [validator_1.Validators.filtersPaneValidator]\r\n            },\r\n            {\r\n                field: \"pageNavigation\",\r\n                validators: [validator_1.Validators.pageNavigationPaneValidator]\r\n            },\r\n            {\r\n                field: \"selection\",\r\n                validators: [validator_1.Validators.selectionPaneValidator]\r\n            },\r\n            {\r\n                field: \"syncSlicers\",\r\n                validators: [validator_1.Validators.syncSlicersPaneValidator]\r\n            },\r\n            {\r\n                field: \"visualizations\",\r\n                validators: [validator_1.Validators.visualizationsPaneValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return ReportPanesValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.ReportPanesValidator = ReportPanesValidator;\r\nvar QnaPanesValidator = /** @class */ (function (_super) {\r\n    __extends(QnaPanesValidator, _super);\r\n    function QnaPanesValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    QnaPanesValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"filters\",\r\n                validators: [validator_1.Validators.filtersPaneValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return QnaPanesValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.QnaPanesValidator = QnaPanesValidator;\r\nvar BookmarksPaneValidator = /** @class */ (function (_super) {\r\n    __extends(BookmarksPaneValidator, _super);\r\n    function BookmarksPaneValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    BookmarksPaneValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"visible\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return BookmarksPaneValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.BookmarksPaneValidator = BookmarksPaneValidator;\r\nvar FieldsPaneValidator = /** @class */ (function (_super) {\r\n    __extends(FieldsPaneValidator, _super);\r\n    function FieldsPaneValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    FieldsPaneValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"expanded\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return FieldsPaneValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.FieldsPaneValidator = FieldsPaneValidator;\r\nvar FiltersPaneValidator = /** @class */ (function (_super) {\r\n    __extends(FiltersPaneValidator, _super);\r\n    function FiltersPaneValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    FiltersPaneValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"visible\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n            {\r\n                field: \"expanded\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return FiltersPaneValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.FiltersPaneValidator = FiltersPaneValidator;\r\nvar PageNavigationPaneValidator = /** @class */ (function (_super) {\r\n    __extends(PageNavigationPaneValidator, _super);\r\n    function PageNavigationPaneValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    PageNavigationPaneValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"visible\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n            {\r\n                field: \"position\",\r\n                validators: [validator_1.Validators.pageNavigationPositionValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return PageNavigationPaneValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.PageNavigationPaneValidator = PageNavigationPaneValidator;\r\nvar SelectionPaneValidator = /** @class */ (function (_super) {\r\n    __extends(SelectionPaneValidator, _super);\r\n    function SelectionPaneValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    SelectionPaneValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"visible\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return SelectionPaneValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.SelectionPaneValidator = SelectionPaneValidator;\r\nvar SyncSlicersPaneValidator = /** @class */ (function (_super) {\r\n    __extends(SyncSlicersPaneValidator, _super);\r\n    function SyncSlicersPaneValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    SyncSlicersPaneValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"visible\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return SyncSlicersPaneValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.SyncSlicersPaneValidator = SyncSlicersPaneValidator;\r\nvar VisualizationsPaneValidator = /** @class */ (function (_super) {\r\n    __extends(VisualizationsPaneValidator, _super);\r\n    function VisualizationsPaneValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    VisualizationsPaneValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"expanded\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return VisualizationsPaneValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.VisualizationsPaneValidator = VisualizationsPaneValidator;\r\n\n\n/***/ }),\n/* 16 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_178070__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.QnaInterpretInputDataValidator = exports.QnaSettingsValidator = exports.LoadQnaValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_178070__(3);\r\nvar typeValidator_1 = __nested_webpack_require_178070__(4);\r\nvar validator_1 = __nested_webpack_require_178070__(1);\r\nvar LoadQnaValidator = /** @class */ (function (_super) {\r\n    __extends(LoadQnaValidator, _super);\r\n    function LoadQnaValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    LoadQnaValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"accessToken\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"datasetIds\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringArrayValidator]\r\n            },\r\n            {\r\n                field: \"question\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"viewMode\",\r\n                validators: [validator_1.Validators.viewModeValidator]\r\n            },\r\n            {\r\n                field: \"settings\",\r\n                validators: [validator_1.Validators.qnaSettingValidator]\r\n            },\r\n            {\r\n                field: \"tokenType\",\r\n                validators: [validator_1.Validators.tokenTypeValidator]\r\n            },\r\n            {\r\n                field: \"groupId\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return LoadQnaValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.LoadQnaValidator = LoadQnaValidator;\r\nvar QnaSettingsValidator = /** @class */ (function (_super) {\r\n    __extends(QnaSettingsValidator, _super);\r\n    function QnaSettingsValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    QnaSettingsValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"filterPaneEnabled\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n            {\r\n                field: \"hideErrors\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n            {\r\n                field: \"panes\",\r\n                validators: [validator_1.Validators.qnaPanesValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return QnaSettingsValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.QnaSettingsValidator = QnaSettingsValidator;\r\nvar QnaInterpretInputDataValidator = /** @class */ (function (_super) {\r\n    __extends(QnaInterpretInputDataValidator, _super);\r\n    function QnaInterpretInputDataValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    QnaInterpretInputDataValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"datasetIds\",\r\n                validators: [validator_1.Validators.stringArrayValidator]\r\n            },\r\n            {\r\n                field: \"question\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return QnaInterpretInputDataValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.QnaInterpretInputDataValidator = QnaInterpretInputDataValidator;\r\n\n\n/***/ }),\n/* 17 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_183781__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ReportCreateValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_183781__(3);\r\nvar typeValidator_1 = __nested_webpack_require_183781__(4);\r\nvar validator_1 = __nested_webpack_require_183781__(1);\r\nvar ReportCreateValidator = /** @class */ (function (_super) {\r\n    __extends(ReportCreateValidator, _super);\r\n    function ReportCreateValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ReportCreateValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"accessToken\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"datasetId\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"groupId\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"tokenType\",\r\n                validators: [validator_1.Validators.tokenTypeValidator]\r\n            },\r\n            {\r\n                field: \"theme\",\r\n                validators: [validator_1.Validators.customThemeValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return ReportCreateValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.ReportCreateValidator = ReportCreateValidator;\r\n\n\n/***/ }),\n/* 18 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_186639__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ReportLoadValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_186639__(3);\r\nvar typeValidator_1 = __nested_webpack_require_186639__(4);\r\nvar validator_1 = __nested_webpack_require_186639__(1);\r\nvar ReportLoadValidator = /** @class */ (function (_super) {\r\n    __extends(ReportLoadValidator, _super);\r\n    function ReportLoadValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ReportLoadValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"accessToken\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"id\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"groupId\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"settings\",\r\n                validators: [validator_1.Validators.settingsValidator]\r\n            },\r\n            {\r\n                field: \"pageName\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"filters\",\r\n                validators: [validator_1.Validators.reportLoadFiltersValidator]\r\n            },\r\n            {\r\n                field: \"permissions\",\r\n                validators: [validator_1.Validators.permissionsValidator]\r\n            },\r\n            {\r\n                field: \"viewMode\",\r\n                validators: [validator_1.Validators.viewModeValidator]\r\n            },\r\n            {\r\n                field: \"tokenType\",\r\n                validators: [validator_1.Validators.tokenTypeValidator]\r\n            },\r\n            {\r\n                field: \"bookmark\",\r\n                validators: [validator_1.Validators.applyBookmarkValidator]\r\n            },\r\n            {\r\n                field: \"theme\",\r\n                validators: [validator_1.Validators.customThemeValidator]\r\n            },\r\n            {\r\n                field: \"embedUrl\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"datasetBinding\",\r\n                validators: [validator_1.Validators.datasetBindingValidator]\r\n            },\r\n            {\r\n                field: \"contrastMode\",\r\n                validators: [validator_1.Validators.contrastModeValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return ReportLoadValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.ReportLoadValidator = ReportLoadValidator;\r\n\n\n/***/ }),\n/* 19 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_190760__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ReportParameterFieldsValidator = exports.PaginatedReportLoadValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_190760__(3);\r\nvar typeValidator_1 = __nested_webpack_require_190760__(4);\r\nvar validator_1 = __nested_webpack_require_190760__(1);\r\nvar PaginatedReportLoadValidator = /** @class */ (function (_super) {\r\n    __extends(PaginatedReportLoadValidator, _super);\r\n    function PaginatedReportLoadValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    PaginatedReportLoadValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"accessToken\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"id\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"groupId\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"settings\",\r\n                validators: [validator_1.Validators.paginatedReportsettingsValidator]\r\n            },\r\n            {\r\n                field: \"tokenType\",\r\n                validators: [validator_1.Validators.tokenTypeValidator]\r\n            },\r\n            {\r\n                field: \"embedUrl\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"type\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"parameterValues\",\r\n                validators: [validator_1.Validators.parameterValuesArrayValidator]\r\n            },\r\n            {\r\n                field: \"datasetBindings\",\r\n                validators: [validator_1.Validators.paginatedReportDatasetBindingArrayValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return PaginatedReportLoadValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.PaginatedReportLoadValidator = PaginatedReportLoadValidator;\r\nvar ReportParameterFieldsValidator = /** @class */ (function () {\r\n    function ReportParameterFieldsValidator() {\r\n    }\r\n    ReportParameterFieldsValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"name\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"value\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return ReportParameterFieldsValidator;\r\n}());\r\nexports.ReportParameterFieldsValidator = ReportParameterFieldsValidator;\r\n\n\n/***/ }),\n/* 20 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_195256__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SaveAsParametersValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_195256__(3);\r\nvar typeValidator_1 = __nested_webpack_require_195256__(4);\r\nvar validator_1 = __nested_webpack_require_195256__(1);\r\nvar SaveAsParametersValidator = /** @class */ (function (_super) {\r\n    __extends(SaveAsParametersValidator, _super);\r\n    function SaveAsParametersValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    SaveAsParametersValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"name\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return SaveAsParametersValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.SaveAsParametersValidator = SaveAsParametersValidator;\r\n\n\n/***/ }),\n/* 21 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_197537__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SlicerTargetSelectorValidator = exports.VisualTypeSelectorValidator = exports.VisualSelectorValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_197537__(3);\r\nvar typeValidator_1 = __nested_webpack_require_197537__(4);\r\nvar typeValidator_2 = __nested_webpack_require_197537__(4);\r\nvar validator_1 = __nested_webpack_require_197537__(1);\r\nvar VisualSelectorValidator = /** @class */ (function (_super) {\r\n    __extends(VisualSelectorValidator, _super);\r\n    function VisualSelectorValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    VisualSelectorValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                // Not required for this selector only - Backward compatibility\r\n                field: \"$schema\",\r\n                validators: [validator_1.Validators.stringValidator, new typeValidator_2.SchemaValidator(\"http://powerbi.com/product/schema#visualSelector\")]\r\n            },\r\n            {\r\n                field: \"visualName\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return VisualSelectorValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.VisualSelectorValidator = VisualSelectorValidator;\r\nvar VisualTypeSelectorValidator = /** @class */ (function (_super) {\r\n    __extends(VisualTypeSelectorValidator, _super);\r\n    function VisualTypeSelectorValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    VisualTypeSelectorValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"$schema\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator, new typeValidator_2.SchemaValidator(\"http://powerbi.com/product/schema#visualTypeSelector\")]\r\n            },\r\n            {\r\n                field: \"visualType\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return VisualTypeSelectorValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.VisualTypeSelectorValidator = VisualTypeSelectorValidator;\r\nvar SlicerTargetSelectorValidator = /** @class */ (function (_super) {\r\n    __extends(SlicerTargetSelectorValidator, _super);\r\n    function SlicerTargetSelectorValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    SlicerTargetSelectorValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"$schema\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator, new typeValidator_2.SchemaValidator(\"http://powerbi.com/product/schema#slicerTargetSelector\")]\r\n            },\r\n            {\r\n                field: \"target\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.slicerTargetValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return SlicerTargetSelectorValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.SlicerTargetSelectorValidator = SlicerTargetSelectorValidator;\r\n\n\n/***/ }),\n/* 22 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_202995__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PaginatedReportSettingsValidator = exports.SettingsValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_202995__(3);\r\nvar typeValidator_1 = __nested_webpack_require_202995__(4);\r\nvar validator_1 = __nested_webpack_require_202995__(1);\r\nvar SettingsValidator = /** @class */ (function (_super) {\r\n    __extends(SettingsValidator, _super);\r\n    function SettingsValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    SettingsValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"filterPaneEnabled\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n            {\r\n                field: \"navContentPaneEnabled\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n            {\r\n                field: \"bookmarksPaneEnabled\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n            {\r\n                field: \"useCustomSaveAsDialog\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n            {\r\n                field: \"extensions\",\r\n                validators: [validator_1.Validators.extensionsValidator]\r\n            },\r\n            {\r\n                field: \"layoutType\",\r\n                validators: [validator_1.Validators.layoutTypeValidator]\r\n            },\r\n            {\r\n                field: \"customLayout\",\r\n                validators: [validator_1.Validators.customLayoutValidator]\r\n            },\r\n            {\r\n                field: \"background\",\r\n                validators: [validator_1.Validators.backgroundValidator]\r\n            },\r\n            {\r\n                field: \"visualSettings\",\r\n                validators: [validator_1.Validators.visualSettingsValidator]\r\n            },\r\n            {\r\n                field: \"hideErrors\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n            {\r\n                field: \"commands\",\r\n                validators: [validator_1.Validators.commandsSettingsArrayValidator]\r\n            },\r\n            {\r\n                field: \"hyperlinkClickBehavior\",\r\n                validators: [validator_1.Validators.hyperlinkClickBehaviorValidator]\r\n            },\r\n            {\r\n                field: \"bars\",\r\n                validators: [validator_1.Validators.reportBarsValidator]\r\n            },\r\n            {\r\n                field: \"panes\",\r\n                validators: [validator_1.Validators.reportPanesValidator]\r\n            },\r\n            {\r\n                field: \"personalBookmarksEnabled\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n            {\r\n                field: \"persistentFiltersEnabled\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n            {\r\n                field: \"visualRenderedEvents\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n            {\r\n                field: \"authoringHintsEnabled\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n            {\r\n                field: \"printSettings\",\r\n                validators: [validator_1.Validators.printSettingsValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return SettingsValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.SettingsValidator = SettingsValidator;\r\nvar PaginatedReportSettingsValidator = /** @class */ (function (_super) {\r\n    __extends(PaginatedReportSettingsValidator, _super);\r\n    function PaginatedReportSettingsValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    PaginatedReportSettingsValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"commands\",\r\n                validators: [validator_1.Validators.paginatedReportCommandsValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return PaginatedReportSettingsValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.PaginatedReportSettingsValidator = PaginatedReportSettingsValidator;\r\n\n\n/***/ }),\n/* 23 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_208991__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SlicerStateValidator = exports.SlicerValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_208991__(3);\r\nvar typeValidator_1 = __nested_webpack_require_208991__(4);\r\nvar validator_1 = __nested_webpack_require_208991__(1);\r\nvar SlicerValidator = /** @class */ (function (_super) {\r\n    __extends(SlicerValidator, _super);\r\n    function SlicerValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    SlicerValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"selector\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.slicerSelectorValidator]\r\n            },\r\n            {\r\n                field: \"state\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.slicerStateValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return SlicerValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.SlicerValidator = SlicerValidator;\r\nvar SlicerStateValidator = /** @class */ (function (_super) {\r\n    __extends(SlicerStateValidator, _super);\r\n    function SlicerStateValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    SlicerStateValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"filters\",\r\n                validators: [validator_1.Validators.filtersArrayValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return SlicerStateValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.SlicerStateValidator = SlicerStateValidator;\r\n\n\n/***/ }),\n/* 24 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_212421__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.TileLoadValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_212421__(3);\r\nvar typeValidator_1 = __nested_webpack_require_212421__(4);\r\nvar validator_1 = __nested_webpack_require_212421__(1);\r\nvar TileLoadValidator = /** @class */ (function (_super) {\r\n    __extends(TileLoadValidator, _super);\r\n    function TileLoadValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    TileLoadValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"accessToken\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"id\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"dashboardId\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"groupId\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"pageView\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"tokenType\",\r\n                validators: [validator_1.Validators.tokenTypeValidator]\r\n            },\r\n            {\r\n                field: \"width\",\r\n                validators: [validator_1.Validators.numberValidator]\r\n            },\r\n            {\r\n                field: \"height\",\r\n                validators: [validator_1.Validators.numberValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return TileLoadValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.TileLoadValidator = TileLoadValidator;\r\n\n\n/***/ }),\n/* 25 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_215693__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.VisualHeaderValidator = exports.VisualHeaderSettingsValidator = exports.VisualSettingsValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_215693__(3);\r\nvar typeValidator_1 = __nested_webpack_require_215693__(4);\r\nvar validator_1 = __nested_webpack_require_215693__(1);\r\nvar VisualSettingsValidator = /** @class */ (function (_super) {\r\n    __extends(VisualSettingsValidator, _super);\r\n    function VisualSettingsValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    VisualSettingsValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"visualHeaders\",\r\n                validators: [validator_1.Validators.visualHeadersValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return VisualSettingsValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.VisualSettingsValidator = VisualSettingsValidator;\r\nvar VisualHeaderSettingsValidator = /** @class */ (function (_super) {\r\n    __extends(VisualHeaderSettingsValidator, _super);\r\n    function VisualHeaderSettingsValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    VisualHeaderSettingsValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"visible\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return VisualHeaderSettingsValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.VisualHeaderSettingsValidator = VisualHeaderSettingsValidator;\r\nvar VisualHeaderValidator = /** @class */ (function (_super) {\r\n    __extends(VisualHeaderValidator, _super);\r\n    function VisualHeaderValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    VisualHeaderValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"settings\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.visualHeaderSettingsValidator]\r\n            },\r\n            {\r\n                field: \"selector\",\r\n                validators: [validator_1.Validators.visualHeaderSelectorValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return VisualHeaderValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.VisualHeaderValidator = VisualHeaderValidator;\r\n\n\n/***/ }),\n/* 26 */\n/***/ ((__unused_webpack_module, exports) => {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AnyOfValidator = void 0;\r\nvar AnyOfValidator = /** @class */ (function () {\r\n    function AnyOfValidator(validators) {\r\n        this.validators = validators;\r\n    }\r\n    AnyOfValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var valid = false;\r\n        for (var _i = 0, _a = this.validators; _i < _a.length; _i++) {\r\n            var validator = _a[_i];\r\n            var errors = validator.validate(input, path, field);\r\n            if (!errors) {\r\n                valid = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!valid) {\r\n            return [{\r\n                    message: field + \" property is invalid\",\r\n                    path: (path ? path + \".\" : \"\") + field,\r\n                    keyword: \"invalid\"\r\n                }];\r\n        }\r\n        return null;\r\n    };\r\n    return AnyOfValidator;\r\n}());\r\nexports.AnyOfValidator = AnyOfValidator;\r\n\n\n/***/ }),\n/* 27 */\n/***/ ((__unused_webpack_module, exports) => {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.FieldForbiddenValidator = void 0;\r\nvar FieldForbiddenValidator = /** @class */ (function () {\r\n    function FieldForbiddenValidator() {\r\n    }\r\n    FieldForbiddenValidator.prototype.validate = function (input, path, field) {\r\n        if (input !== undefined) {\r\n            return [{\r\n                    message: field + \" is forbidden\",\r\n                    path: (path ? path + \".\" : \"\") + field,\r\n                    keyword: \"forbidden\"\r\n                }];\r\n        }\r\n        return null;\r\n    };\r\n    return FieldForbiddenValidator;\r\n}());\r\nexports.FieldForbiddenValidator = FieldForbiddenValidator;\r\n\n\n/***/ }),\n/* 28 */\n/***/ ((__unused_webpack_module, exports) => {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.FieldRequiredValidator = void 0;\r\nvar FieldRequiredValidator = /** @class */ (function () {\r\n    function FieldRequiredValidator() {\r\n    }\r\n    FieldRequiredValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return [{\r\n                    message: field + \" is required\",\r\n                    path: (path ? path + \".\" : \"\") + field,\r\n                    keyword: \"required\"\r\n                }];\r\n        }\r\n        return null;\r\n    };\r\n    return FieldRequiredValidator;\r\n}());\r\nexports.FieldRequiredValidator = FieldRequiredValidator;\r\n\n\n/***/ }),\n/* 29 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_223102__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.MapValidator = void 0;\r\nvar typeValidator_1 = __nested_webpack_require_223102__(4);\r\nvar MapValidator = /** @class */ (function (_super) {\r\n    __extends(MapValidator, _super);\r\n    function MapValidator(keyValidators, valueValidators) {\r\n        var _this = _super.call(this) || this;\r\n        _this.keyValidators = keyValidators;\r\n        _this.valueValidators = valueValidators;\r\n        return _this;\r\n    }\r\n    MapValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        for (var key in input) {\r\n            if (input.hasOwnProperty(key)) {\r\n                var fieldsPath = (path ? path + \".\" : \"\") + field + \".\" + key;\r\n                for (var _i = 0, _a = this.keyValidators; _i < _a.length; _i++) {\r\n                    var keyValidator = _a[_i];\r\n                    errors = keyValidator.validate(key, fieldsPath, field);\r\n                    if (errors) {\r\n                        return errors;\r\n                    }\r\n                }\r\n                for (var _b = 0, _c = this.valueValidators; _b < _c.length; _b++) {\r\n                    var valueValidator = _c[_b];\r\n                    errors = valueValidator.validate(input[key], fieldsPath, field);\r\n                    if (errors) {\r\n                        return errors;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    return MapValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.MapValidator = MapValidator;\r\n\n\n/***/ }),\n/* 30 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_225786__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ParametersPanelValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_225786__(3);\r\nvar typeValidator_1 = __nested_webpack_require_225786__(4);\r\nvar validator_1 = __nested_webpack_require_225786__(1);\r\nvar ParametersPanelValidator = /** @class */ (function (_super) {\r\n    __extends(ParametersPanelValidator, _super);\r\n    function ParametersPanelValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ParametersPanelValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"expanded\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            },\r\n            {\r\n                field: \"enabled\",\r\n                validators: [validator_1.Validators.booleanValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return ParametersPanelValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.ParametersPanelValidator = ParametersPanelValidator;\r\n\n\n/***/ }),\n/* 31 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_228154__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.TableDataValidator = exports.TableSchemaValidator = exports.ColumnSchemaValidator = exports.CredentialsValidator = exports.DatasourceConnectionConfigValidator = exports.DatasetCreateConfigValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_228154__(3);\r\nvar typeValidator_1 = __nested_webpack_require_228154__(4);\r\nvar validator_1 = __nested_webpack_require_228154__(1);\r\nvar DatasetCreateConfigValidator = /** @class */ (function (_super) {\r\n    __extends(DatasetCreateConfigValidator, _super);\r\n    function DatasetCreateConfigValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    DatasetCreateConfigValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"locale\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"mashupDocument\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"datasourceConnectionConfig\",\r\n                validators: [validator_1.Validators.datasourceConnectionConfigValidator]\r\n            },\r\n            {\r\n                field: \"tableSchemaList\",\r\n                validators: [validator_1.Validators.tableSchemaListValidator]\r\n            },\r\n            {\r\n                field: \"data\",\r\n                validators: [validator_1.Validators.tableDataArrayValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        errors = multipleFieldsValidator.validate(input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        if (input[\"datasourceConnectionConfig\"] && input[\"mashupDocument\"] == null) {\r\n            return [{\r\n                    message: \"mashupDocument cannot be empty when datasourceConnectionConfig is presented\"\r\n                }];\r\n        }\r\n        if (input[\"data\"] && input[\"tableSchemaList\"] == null) {\r\n            return [{\r\n                    message: \"tableSchemaList cannot be empty when data is provided\"\r\n                }];\r\n        }\r\n        if (input[\"data\"] == null && input[\"mashupDocument\"] == null) {\r\n            return [{\r\n                    message: \"At least one of data or mashupDocument must be provided\"\r\n                }];\r\n        }\r\n    };\r\n    return DatasetCreateConfigValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.DatasetCreateConfigValidator = DatasetCreateConfigValidator;\r\nvar DatasourceConnectionConfigValidator = /** @class */ (function (_super) {\r\n    __extends(DatasourceConnectionConfigValidator, _super);\r\n    function DatasourceConnectionConfigValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    DatasourceConnectionConfigValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"dataCacheMode\",\r\n                validators: [validator_1.Validators.dataCacheModeValidator]\r\n            },\r\n            {\r\n                field: \"credentials\",\r\n                validators: [validator_1.Validators.credentialsValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return DatasourceConnectionConfigValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.DatasourceConnectionConfigValidator = DatasourceConnectionConfigValidator;\r\nvar CredentialsValidator = /** @class */ (function (_super) {\r\n    __extends(CredentialsValidator, _super);\r\n    function CredentialsValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    CredentialsValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"credentialType\",\r\n                validators: [validator_1.Validators.credentialTypeValidator]\r\n            },\r\n            {\r\n                field: \"credentialDetails\",\r\n                validators: [validator_1.Validators.credentialDetailsValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return CredentialsValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.CredentialsValidator = CredentialsValidator;\r\nvar ColumnSchemaValidator = /** @class */ (function (_super) {\r\n    __extends(ColumnSchemaValidator, _super);\r\n    function ColumnSchemaValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ColumnSchemaValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"name\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"displayName\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"dataType\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return ColumnSchemaValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.ColumnSchemaValidator = ColumnSchemaValidator;\r\nvar TableSchemaValidator = /** @class */ (function (_super) {\r\n    __extends(TableSchemaValidator, _super);\r\n    function TableSchemaValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    TableSchemaValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"name\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"columns\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.columnSchemaArrayValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return TableSchemaValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.TableSchemaValidator = TableSchemaValidator;\r\nvar TableDataValidator = /** @class */ (function (_super) {\r\n    __extends(TableDataValidator, _super);\r\n    function TableDataValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    TableDataValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"name\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"rows\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.rawDataValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return TableDataValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.TableDataValidator = TableDataValidator;\r\n\n\n/***/ }),\n/* 32 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_238209__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.QuickCreateValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_238209__(3);\r\nvar typeValidator_1 = __nested_webpack_require_238209__(4);\r\nvar validator_1 = __nested_webpack_require_238209__(1);\r\nvar QuickCreateValidator = /** @class */ (function (_super) {\r\n    __extends(QuickCreateValidator, _super);\r\n    function QuickCreateValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    QuickCreateValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"accessToken\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"groupId\",\r\n                validators: [validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"tokenType\",\r\n                validators: [validator_1.Validators.tokenTypeValidator]\r\n            },\r\n            {\r\n                field: \"theme\",\r\n                validators: [validator_1.Validators.customThemeValidator]\r\n            },\r\n            {\r\n                field: \"datasetCreateConfig\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.datasetCreateConfigValidator]\r\n            },\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return QuickCreateValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.QuickCreateValidator = QuickCreateValidator;\r\n\n\n/***/ }),\n/* 33 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_241082__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PrintSettingsValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_241082__(3);\r\nvar typeValidator_1 = __nested_webpack_require_241082__(4);\r\nvar PrintSettingsValidator = /** @class */ (function (_super) {\r\n    __extends(PrintSettingsValidator, _super);\r\n    function PrintSettingsValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    PrintSettingsValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"browserPrintAdjustmentsMode\",\r\n                validators: [new typeValidator_1.EnumValidator([0, 1])]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return PrintSettingsValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.PrintSettingsValidator = PrintSettingsValidator;\r\n\n\n/***/ }),\n/* 34 */\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_243275__) {\n\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PaginatedReportDatasetBindingValidator = void 0;\r\nvar multipleFieldsValidator_1 = __nested_webpack_require_243275__(3);\r\nvar typeValidator_1 = __nested_webpack_require_243275__(4);\r\nvar validator_1 = __nested_webpack_require_243275__(1);\r\nvar PaginatedReportDatasetBindingValidator = /** @class */ (function (_super) {\r\n    __extends(PaginatedReportDatasetBindingValidator, _super);\r\n    function PaginatedReportDatasetBindingValidator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    PaginatedReportDatasetBindingValidator.prototype.validate = function (input, path, field) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        var errors = _super.prototype.validate.call(this, input, path, field);\r\n        if (errors) {\r\n            return errors;\r\n        }\r\n        var fields = [\r\n            {\r\n                field: \"sourceDatasetId\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            },\r\n            {\r\n                field: \"targetDatasetId\",\r\n                validators: [validator_1.Validators.fieldRequiredValidator, validator_1.Validators.stringValidator]\r\n            }\r\n        ];\r\n        var multipleFieldsValidator = new multipleFieldsValidator_1.MultipleFieldsValidator(fields);\r\n        return multipleFieldsValidator.validate(input, path, field);\r\n    };\r\n    return PaginatedReportDatasetBindingValidator;\r\n}(typeValidator_1.ObjectValidator));\r\nexports.PaginatedReportDatasetBindingValidator = PaginatedReportDatasetBindingValidator;\r\n\n\n/***/ })\n/******/ \t]);\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_246021__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_246021__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module is referenced by other modules so it can't be inlined\n/******/ \tvar __nested_webpack_exports__ = __nested_webpack_require_246021__(0);\n/******/ \t\n/******/ \treturn __nested_webpack_exports__;\n/******/ })()\n;\n});\n//# sourceMappingURL=models.js.map\r\n// SIG // Begin signature block\r\n// SIG // MIIreAYJKoZIhvcNAQcCoIIraTCCK2UCAQExDzANBglg\r\n// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor\r\n// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC\r\n// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg\r\n// SIG // MwL/tGu4f/dhr3gVOxM8t9Nr0kVsURXdWFmzt2Tv2Syg\r\n// SIG // ghFuMIIIfjCCB2agAwIBAgITNgAAAd9zgZcWvjL9DQAC\r\n// SIG // AAAB3zANBgkqhkiG9w0BAQsFADBBMRMwEQYKCZImiZPy\r\n// SIG // LGQBGRYDR0JMMRMwEQYKCZImiZPyLGQBGRYDQU1FMRUw\r\n// SIG // EwYDVQQDEwxBTUUgQ1MgQ0EgMDEwHhcNMjQwMTIwMDEz\r\n// SIG // MzQ0WhcNMjUwMTE5MDEzMzQ0WjAkMSIwIAYDVQQDExlN\r\n// SIG // aWNyb3NvZnQgQXp1cmUgQ29kZSBTaWduMIIBIjANBgkq\r\n// SIG // hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1bnAJpGyFqbK\r\n// SIG // WMrMsnUMskYdi/KuYoGBXMtrw5PMRr1TEQYccGzrCSBH\r\n// SIG // dMGPDe1lP8YJGDJ0rDOL5nNgePQxnawI0iam7MdM3/gy\r\n// SIG // xY6wSE1HnHUYZatFShl/FG1TpINGiHxTS0bOA0qwmWId\r\n// SIG // us8gfKpC/41Jgew4XARIYYDpV0UOCx51L+6n/ol6g7sB\r\n// SIG // c/bVEwIfCRrIC0QStKErEX1AfhSRdislMc5nhVySohMp\r\n// SIG // 7Fs+JKqDPdWoNWMNFPHdHvkYACotxbdXFwPt6ijOiNR9\r\n// SIG // dXvzXSI4e6E4b6wbXxJ4MJcG0xdymTh3YSwRWdfFOL/F\r\n// SIG // Xk5W+K/eN+OgmNvkip0GuwIDAQABo4IFijCCBYYwKQYJ\r\n// SIG // KwYBBAGCNxUKBBwwGjAMBgorBgEEAYI3WwEBMAoGCCsG\r\n// SIG // AQUFBwMDMD0GCSsGAQQBgjcVBwQwMC4GJisGAQQBgjcV\r\n// SIG // CIaQ4w2E1bR4hPGLPoWb3RbOnRKBYIPdzWaGlIwyAgFk\r\n// SIG // AgEOMIICdgYIKwYBBQUHAQEEggJoMIICZDBiBggrBgEF\r\n// SIG // BQcwAoZWaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3Br\r\n// SIG // aWluZnJhL0NlcnRzL0JZMlBLSUNTQ0EwMS5BTUUuR0JM\r\n// SIG // X0FNRSUyMENTJTIwQ0ElMjAwMSgyKS5jcnQwUgYIKwYB\r\n// SIG // BQUHMAKGRmh0dHA6Ly9jcmwxLmFtZS5nYmwvYWlhL0JZ\r\n// SIG // MlBLSUNTQ0EwMS5BTUUuR0JMX0FNRSUyMENTJTIwQ0El\r\n// SIG // MjAwMSgyKS5jcnQwUgYIKwYBBQUHMAKGRmh0dHA6Ly9j\r\n// SIG // cmwyLmFtZS5nYmwvYWlhL0JZMlBLSUNTQ0EwMS5BTUUu\r\n// SIG // R0JMX0FNRSUyMENTJTIwQ0ElMjAwMSgyKS5jcnQwUgYI\r\n// SIG // KwYBBQUHMAKGRmh0dHA6Ly9jcmwzLmFtZS5nYmwvYWlh\r\n// SIG // L0JZMlBLSUNTQ0EwMS5BTUUuR0JMX0FNRSUyMENTJTIw\r\n// SIG // Q0ElMjAwMSgyKS5jcnQwUgYIKwYBBQUHMAKGRmh0dHA6\r\n// SIG // Ly9jcmw0LmFtZS5nYmwvYWlhL0JZMlBLSUNTQ0EwMS5B\r\n// SIG // TUUuR0JMX0FNRSUyMENTJTIwQ0ElMjAwMSgyKS5jcnQw\r\n// SIG // ga0GCCsGAQUFBzAChoGgbGRhcDovLy9DTj1BTUUlMjBD\r\n// SIG // UyUyMENBJTIwMDEsQ049QUlBLENOPVB1YmxpYyUyMEtl\r\n// SIG // eSUyMFNlcnZpY2VzLENOPVNlcnZpY2VzLENOPUNvbmZp\r\n// SIG // Z3VyYXRpb24sREM9QU1FLERDPUdCTD9jQUNlcnRpZmlj\r\n// SIG // YXRlP2Jhc2U/b2JqZWN0Q2xhc3M9Y2VydGlmaWNhdGlv\r\n// SIG // bkF1dGhvcml0eTAdBgNVHQ4EFgQUju4tKpnu7Y7YxY8r\r\n// SIG // iI5ZhjOnGwkwDgYDVR0PAQH/BAQDAgeAMEUGA1UdEQQ+\r\n// SIG // MDykOjA4MR4wHAYDVQQLExVNaWNyb3NvZnQgQ29ycG9y\r\n// SIG // YXRpb24xFjAUBgNVBAUTDTIzNjE2Nys1MDE5NzAwggHm\r\n// SIG // BgNVHR8EggHdMIIB2TCCAdWgggHRoIIBzYY/aHR0cDov\r\n// SIG // L2NybC5taWNyb3NvZnQuY29tL3BraWluZnJhL0NSTC9B\r\n// SIG // TUUlMjBDUyUyMENBJTIwMDEoMikuY3JshjFodHRwOi8v\r\n// SIG // Y3JsMS5hbWUuZ2JsL2NybC9BTUUlMjBDUyUyMENBJTIw\r\n// SIG // MDEoMikuY3JshjFodHRwOi8vY3JsMi5hbWUuZ2JsL2Ny\r\n// SIG // bC9BTUUlMjBDUyUyMENBJTIwMDEoMikuY3JshjFodHRw\r\n// SIG // Oi8vY3JsMy5hbWUuZ2JsL2NybC9BTUUlMjBDUyUyMENB\r\n// SIG // JTIwMDEoMikuY3JshjFodHRwOi8vY3JsNC5hbWUuZ2Js\r\n// SIG // L2NybC9BTUUlMjBDUyUyMENBJTIwMDEoMikuY3JshoG9\r\n// SIG // bGRhcDovLy9DTj1BTUUlMjBDUyUyMENBJTIwMDEoMiks\r\n// SIG // Q049QlkyUEtJQ1NDQTAxLENOPUNEUCxDTj1QdWJsaWMl\r\n// SIG // MjBLZXklMjBTZXJ2aWNlcyxDTj1TZXJ2aWNlcyxDTj1D\r\n// SIG // b25maWd1cmF0aW9uLERDPUFNRSxEQz1HQkw/Y2VydGlm\r\n// SIG // aWNhdGVSZXZvY2F0aW9uTGlzdD9iYXNlP29iamVjdENs\r\n// SIG // YXNzPWNSTERpc3RyaWJ1dGlvblBvaW50MB8GA1UdIwQY\r\n// SIG // MBaAFJZRhOBrb3v+2Aarw/KF5imuavnUMB8GA1UdJQQY\r\n// SIG // MBYGCisGAQQBgjdbAQEGCCsGAQUFBwMDMA0GCSqGSIb3\r\n// SIG // DQEBCwUAA4IBAQCXv2FzUgqF4rS3/1+aXyWaXqd3LI3a\r\n// SIG // pgYIPvCq/vvFzI1sHZuLYi2rCTFDwoJqeTWJ98AuBnnx\r\n// SIG // mMHxe15thTEkdoukFB44oBrugY3VkIeBMBmjaly5F5VD\r\n// SIG // O1sNmdCq0baQi9egwjkzWbghTwMrUhxbJD1q6+qtxAbo\r\n// SIG // jOj+VS4BUiogMXLp5XSaK26wa72UmYm9TiDcxRgELM1E\r\n// SIG // dMraL1uhTqfrqFYYkAqpzoXgtaaZ2T7LO7516KIMjtMY\r\n// SIG // EluNG0ZZbRn8J5TndyGf+N2To+V3nkoYOdks1RIsmK2Y\r\n// SIG // w9ezEjc0DNSSiNO/prQAuw/nmf/oNqTP/daB3Kw6vTau\r\n// SIG // EK0tMIII6DCCBtCgAwIBAgITHwAAAFHqj/accwyoOwAA\r\n// SIG // AAAAUTANBgkqhkiG9w0BAQsFADA8MRMwEQYKCZImiZPy\r\n// SIG // LGQBGRYDR0JMMRMwEQYKCZImiZPyLGQBGRYDQU1FMRAw\r\n// SIG // DgYDVQQDEwdhbWVyb290MB4XDTIxMDUyMTE4NDQxNFoX\r\n// SIG // DTI2MDUyMTE4NTQxNFowQTETMBEGCgmSJomT8ixkARkW\r\n// SIG // A0dCTDETMBEGCgmSJomT8ixkARkWA0FNRTEVMBMGA1UE\r\n// SIG // AxMMQU1FIENTIENBIDAxMIIBIjANBgkqhkiG9w0BAQEF\r\n// SIG // AAOCAQ8AMIIBCgKCAQEAyZpSCX0Bno1W1yqXMhT6BUlJ\r\n// SIG // ZWpa4p3xFeiTHO4vm2Q6C/azR5xwxnyYHrkSGDtS2P9X\r\n// SIG // +KDE64V20mmEQkubxnPNeOVnE2RvdPGxgwlq+BhS3ONd\r\n// SIG // VsQPj79q7XgHM9HhzB9+qk0PC9KN1zm9p/seyiRS6JF1\r\n// SIG // dbOqRf1pUl7FAVxmgiCFgV8hHIb/rDPXig7FDi3S0yEx\r\n// SIG // 2CUDVpIq8jEhG8anUFE1WYxM+ni0S5KHwwKPKV4qyGDo\r\n// SIG // DO+9AmDoma3Chyu5WDlW5cdtqXTWsGPE3umtnX6Amlld\r\n// SIG // UFLms4OVR4guKf+n5LIBCC6bTiocfXPomqYjYTKx7AGM\r\n// SIG // faVLaaXmhQIDAQABo4IE3DCCBNgwEgYJKwYBBAGCNxUB\r\n// SIG // BAUCAwIAAjAjBgkrBgEEAYI3FQIEFgQUEmgkQiFHy9Rr\r\n// SIG // vjHPIKTACyN/P0cwHQYDVR0OBBYEFJZRhOBrb3v+2Aar\r\n// SIG // w/KF5imuavnUMIIBBAYDVR0lBIH8MIH5BgcrBgEFAgMF\r\n// SIG // BggrBgEFBQcDAQYIKwYBBQUHAwIGCisGAQQBgjcUAgEG\r\n// SIG // CSsGAQQBgjcVBgYKKwYBBAGCNwoDDAYJKwYBBAGCNxUG\r\n// SIG // BggrBgEFBQcDCQYIKwYBBQUIAgIGCisGAQQBgjdAAQEG\r\n// SIG // CysGAQQBgjcKAwQBBgorBgEEAYI3CgMEBgkrBgEEAYI3\r\n// SIG // FQUGCisGAQQBgjcUAgIGCisGAQQBgjcUAgMGCCsGAQUF\r\n// SIG // BwMDBgorBgEEAYI3WwEBBgorBgEEAYI3WwIBBgorBgEE\r\n// SIG // AYI3WwMBBgorBgEEAYI3WwUBBgorBgEEAYI3WwQBBgor\r\n// SIG // BgEEAYI3WwQCMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIA\r\n// SIG // QwBBMAsGA1UdDwQEAwIBhjASBgNVHRMBAf8ECDAGAQH/\r\n// SIG // AgEAMB8GA1UdIwQYMBaAFCleUV5krjS566ycDaeMdQHR\r\n// SIG // CQsoMIIBaAYDVR0fBIIBXzCCAVswggFXoIIBU6CCAU+G\r\n// SIG // MWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2lpbmZy\r\n// SIG // YS9jcmwvYW1lcm9vdC5jcmyGI2h0dHA6Ly9jcmwyLmFt\r\n// SIG // ZS5nYmwvY3JsL2FtZXJvb3QuY3JshiNodHRwOi8vY3Js\r\n// SIG // My5hbWUuZ2JsL2NybC9hbWVyb290LmNybIYjaHR0cDov\r\n// SIG // L2NybDEuYW1lLmdibC9jcmwvYW1lcm9vdC5jcmyGgaps\r\n// SIG // ZGFwOi8vL0NOPWFtZXJvb3QsQ049QU1FUm9vdCxDTj1D\r\n// SIG // RFAsQ049UHVibGljJTIwS2V5JTIwU2VydmljZXMsQ049\r\n// SIG // U2VydmljZXMsQ049Q29uZmlndXJhdGlvbixEQz1BTUUs\r\n// SIG // REM9R0JMP2NlcnRpZmljYXRlUmV2b2NhdGlvbkxpc3Q/\r\n// SIG // YmFzZT9vYmplY3RDbGFzcz1jUkxEaXN0cmlidXRpb25Q\r\n// SIG // b2ludDCCAasGCCsGAQUFBwEBBIIBnTCCAZkwRwYIKwYB\r\n// SIG // BQUHMAKGO2h0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9w\r\n// SIG // a2lpbmZyYS9jZXJ0cy9BTUVSb290X2FtZXJvb3QuY3J0\r\n// SIG // MDcGCCsGAQUFBzAChitodHRwOi8vY3JsMi5hbWUuZ2Js\r\n// SIG // L2FpYS9BTUVSb290X2FtZXJvb3QuY3J0MDcGCCsGAQUF\r\n// SIG // BzAChitodHRwOi8vY3JsMy5hbWUuZ2JsL2FpYS9BTUVS\r\n// SIG // b290X2FtZXJvb3QuY3J0MDcGCCsGAQUFBzAChitodHRw\r\n// SIG // Oi8vY3JsMS5hbWUuZ2JsL2FpYS9BTUVSb290X2FtZXJv\r\n// SIG // b3QuY3J0MIGiBggrBgEFBQcwAoaBlWxkYXA6Ly8vQ049\r\n// SIG // YW1lcm9vdCxDTj1BSUEsQ049UHVibGljJTIwS2V5JTIw\r\n// SIG // U2VydmljZXMsQ049U2VydmljZXMsQ049Q29uZmlndXJh\r\n// SIG // dGlvbixEQz1BTUUsREM9R0JMP2NBQ2VydGlmaWNhdGU/\r\n// SIG // YmFzZT9vYmplY3RDbGFzcz1jZXJ0aWZpY2F0aW9uQXV0\r\n// SIG // aG9yaXR5MA0GCSqGSIb3DQEBCwUAA4ICAQBQECO3Tw/o\r\n// SIG // 317Rrd7yadqcswPx1LvIYymkaTN6KcmuRt6HKa0Xe73U\r\n// SIG // x2/AQ30TfgA9GBJngweRykKBusRzyOU17iIubJvy3gA2\r\n// SIG // 1dwtqtB0DsoEv1U/ptVu2v++doTCJ/i+GbssVXkgaX8H\r\n// SIG // +6EOGEmT4evp4GbwR4HwWlc+Dvf8HH8PdUA2Z04CvcwI\r\n// SIG // fckSipbNm84jxJ8XjmTFTWscldL9edj2NsY6iGnyJFIy\r\n// SIG // ur2PS7VRYyV3p1VAJp91gj1jRQtWEyCB8P5g9nE3z8u0\r\n// SIG // ANaU/hjwEQCrdGyravWgnf2JtG+bT26YAokbc8m+32zU\r\n// SIG // tXRO+NK3tAjhOu2FdsG3qNrF4sc7y37R/C+7Pcb/cFfh\r\n// SIG // ttqsirepZii4xStcjMODYuXzGm3IJs0b0owHG6oKd7ZO\r\n// SIG // GvHpmmh9K8/DLriD/sq8bURD10qi/wuW8zM7IpLg1vcR\r\n// SIG // 9dIK2mc0pj44pc6UX0XbttP/VEJgu3lT2eI9VjWtaKjx\r\n// SIG // 38xE9woSMyekPRtzTwgfuysF9DkJisr+yA4po/FPxpbB\r\n// SIG // w9c/hBf32DH/GFxteS2pmjgKIbMP8sDukmEq3lVvuWNJ\r\n// SIG // sybrZwQvQpvaM49fv+JKpLK5YWYEfwksYRR9wU8Hh/ID\r\n// SIG // 9hRCEkbUoQ2W7mMpsp2Nbp/kcn4ivfolUy3Q9Yf0scsQ\r\n// SIG // 6WTLYpm+AoCUJTGCGWIwghleAgEBMFgwQTETMBEGCgmS\r\n// SIG // JomT8ixkARkWA0dCTDETMBEGCgmSJomT8ixkARkWA0FN\r\n// SIG // RTEVMBMGA1UEAxMMQU1FIENTIENBIDAxAhM2AAAB33OB\r\n// SIG // lxa+Mv0NAAIAAAHfMA0GCWCGSAFlAwQCAQUAoIGuMBkG\r\n// SIG // CSqGSIb3DQEJAzEMBgorBgEEAYI3AgEEMBwGCisGAQQB\r\n// SIG // gjcCAQsxDjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJ\r\n// SIG // BDEiBCC3oAvWj8W35XCGz6mfgvuaIDOaSXvP1W3rFrPd\r\n// SIG // AOh/bzBCBgorBgEEAYI3AgEMMTQwMqAUgBIATQBpAGMA\r\n// SIG // cgBvAHMAbwBmAHShGoAYaHR0cDovL3d3dy5taWNyb3Nv\r\n// SIG // ZnQuY29tMA0GCSqGSIb3DQEBAQUABIIBAH+QbSXUtg4a\r\n// SIG // 1DpnczlSYMWv9IBjG6D/if62zIqGmL0+uLeJryRfcW1I\r\n// SIG // AP8F/i8LvWbtodi6cANj2DSmm3tZQ4ynfUkdQTza1zEM\r\n// SIG // tbZuCZk9w3X+ToN1tfLiWxqWnRQl+RPJ83+OrlP55pAq\r\n// SIG // Ryg1Mfm6lVs9q3FmhPRyWEaPyH8BDBIDss80A+1Hv5mt\r\n// SIG // d2fhe8rR+/+bNhdrR9AcAU1eTP4R9x/IZL0ZlxqwMP8h\r\n// SIG // e/juk00nO5gkakd6+SuHBqNOh4Sak9eBvai/3kU/Pslx\r\n// SIG // qnn/f1vDjXxx554VyA/0WkKXh1G/4yf1v5JTqNC/etNK\r\n// SIG // X8AOamhT9a08WNVMC4XQMZmhghcqMIIXJgYKKwYBBAGC\r\n// SIG // NwMDATGCFxYwghcSBgkqhkiG9w0BBwKgghcDMIIW/wIB\r\n// SIG // AzEPMA0GCWCGSAFlAwQCAQUAMIIBWQYLKoZIhvcNAQkQ\r\n// SIG // AQSgggFIBIIBRDCCAUACAQEGCisGAQQBhFkKAwEwMTAN\r\n// SIG // BglghkgBZQMEAgEFAAQgiRIZEQCbpfMTea7mD6b6LEjM\r\n// SIG // OeXK5udPpePql6WE5/MCBmXxz4wKeRgTMjAyNDAzMjEx\r\n// SIG // NTA2MzEuMzEyWjAEgAIB9KCB2KSB1TCB0jELMAkGA1UE\r\n// SIG // BhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNV\r\n// SIG // BAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBD\r\n// SIG // b3Jwb3JhdGlvbjEtMCsGA1UECxMkTWljcm9zb2Z0IEly\r\n// SIG // ZWxhbmQgT3BlcmF0aW9ucyBMaW1pdGVkMSYwJAYDVQQL\r\n// SIG // Ex1UaGFsZXMgVFNTIEVTTjo4RDQxLTRCRjctQjNCNzEl\r\n// SIG // MCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2Vy\r\n// SIG // dmljZaCCEXkwggcnMIIFD6ADAgECAhMzAAAB49+9m5oc\r\n// SIG // aIMiAAEAAAHjMA0GCSqGSIb3DQEBCwUAMHwxCzAJBgNV\r\n// SIG // BAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD\r\n// SIG // VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg\r\n// SIG // Q29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBU\r\n// SIG // aW1lLVN0YW1wIFBDQSAyMDEwMB4XDTIzMTAxMjE5MDcy\r\n// SIG // OVoXDTI1MDExMDE5MDcyOVowgdIxCzAJBgNVBAYTAlVT\r\n// SIG // MRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdS\r\n// SIG // ZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9y\r\n// SIG // YXRpb24xLTArBgNVBAsTJE1pY3Jvc29mdCBJcmVsYW5k\r\n// SIG // IE9wZXJhdGlvbnMgTGltaXRlZDEmMCQGA1UECxMdVGhh\r\n// SIG // bGVzIFRTUyBFU046OEQ0MS00QkY3LUIzQjcxJTAjBgNV\r\n// SIG // BAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2Uw\r\n// SIG // ggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQC+\r\n// SIG // pA1oHkafn8UgVA+jf8rhCaV4IMwXjRuSgfDPQGyFnhKJ\r\n// SIG // CYDoIZTIPCZqpDbAeFpdTRF0e3C+r5TwrFhizIcqprHE\r\n// SIG // Lt+v/Idm8ek1ODPHVWRHeleFPpfYKbXvlRfdZDiN+Xzq\r\n// SIG // ienkAzMEgUOXPRJTxVIo0wO81e2OT0WK0uBS/aePeE4n\r\n// SIG // QqQRB+TegDubvMDQP4yjveGZH44Lu7CxfElHa3NRkTRJ\r\n// SIG // NhfdS96cUft9hbLkE2YvIaraxaRDkcW8koIkAT93B+3z\r\n// SIG // 5XjdTcp4TEX+k+1wtS9D0cisvTGekwVq7th3lor5MSLn\r\n// SIG // tZy0G/zv59I9kFXeNmX9AK1wf1aueIEPCSL1B9HG78lj\r\n// SIG // PD6JoRYuqthe4XuN44a8cr59V4tacBzlbGx9umMQyk1s\r\n// SIG // ZdtIX0C3c8+EVU6PHBUTHUAsZSpEp6HD1qn1f+B+QD0j\r\n// SIG // 15NK/AnP3DJr2t4OBL7qReBK20jtFDZwkb+1A8ZUhosI\r\n// SIG // hpJp8ud5qrQGezS3j4RbcH8aegEyKI5fCV469/m50FlA\r\n// SIG // gwneTmqeeHxnhmFPCsTqIZs+tOAYE9eHt7EVgAaVvqF2\r\n// SIG // EgshUN0mUN/yzU1W8vRDbLhIdlCECllO5b+3Iawaxwg8\r\n// SIG // NIzPlsDo2FEu2MTAIWksjmoaW7nQC70VF6UIRCxaDurT\r\n// SIG // sf+uoc6oI0kzhGN6buOgRQIDAQABo4IBSTCCAUUwHQYD\r\n// SIG // VR0OBBYEFLGuDWa+NRW3oWfGPnqdptmImKkDMB8GA1Ud\r\n// SIG // IwQYMBaAFJ+nFV0AXmJdg/Tl0mWnG1M1GelyMF8GA1Ud\r\n// SIG // HwRYMFYwVKBSoFCGTmh0dHA6Ly93d3cubWljcm9zb2Z0\r\n// SIG // LmNvbS9wa2lvcHMvY3JsL01pY3Jvc29mdCUyMFRpbWUt\r\n// SIG // U3RhbXAlMjBQQ0ElMjAyMDEwKDEpLmNybDBsBggrBgEF\r\n// SIG // BQcBAQRgMF4wXAYIKwYBBQUHMAKGUGh0dHA6Ly93d3cu\r\n// SIG // bWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMvTWljcm9z\r\n// SIG // b2Z0JTIwVGltZS1TdGFtcCUyMFBDQSUyMDIwMTAoMSku\r\n// SIG // Y3J0MAwGA1UdEwEB/wQCMAAwFgYDVR0lAQH/BAwwCgYI\r\n// SIG // KwYBBQUHAwgwDgYDVR0PAQH/BAQDAgeAMA0GCSqGSIb3\r\n// SIG // DQEBCwUAA4ICAQC3vpsuqdTTzBFtbe9GvGNoRsY+rIg0\r\n// SIG // rpRgLOFMZpH88TAInOI9Phkz2x8ZNfd5kNBUT2vXbW0W\r\n// SIG // 2ns1dBi5BLFFkxhdrT+lrA3Zef5Q+MFEO+gKxTnp3AqS\r\n// SIG // ubLxNLDtBcoayR2cTCwjnJb3erwCDzpGQGIoQR/0V3Mc\r\n// SIG // 24pYjgq//98O0RJ7C7jqf+75VyQLBs5iXrAT/9BEasYy\r\n// SIG // rnT1rgRs/6nUZSbTpeZ7/TWZMi4oOA+YcvadhHNc2qLY\r\n// SIG // i4h5yfZpbCRHFA4WI/D52JyY47Asb/sic2qNmlB4iEMz\r\n// SIG // GxavjNPHPLgRH/rN+2G2UO1wBccHthFSQFMKVo5rSd29\r\n// SIG // 80lkzJhVrpxa9mi5Or1XktLtTMhHxL/tGw5Pjd45rAsG\r\n// SIG // y5DPRWg4u6th7VJ98+pOwJxE3NvHQLy3/4qKlK1WE8Aa\r\n// SIG // 20R+F1RRL2iEPou3rA0InFltXQgwPyd8TqAhAlevOtdY\r\n// SIG // 64mo33VYPKNFqfhQoOQgFLbJYDhbomFC4HMZ6s5Jj9ou\r\n// SIG // fGRGtK5uC2cphwc7CDFNMjJrlZgJGMW3RA4uV6pWSLqT\r\n// SIG // 6apg+v3y4w+Lm9EhBLbTqYNJ6dK2vzDQn7/7VYSbc+cI\r\n// SIG // IhCCl/rOGpGsC32PtesQweuDZtB6BrPxsvNt7pSJuBsq\r\n// SIG // 1HKTWcZ17xOjmTIyP1dQIEgIPFP4XjFrmU1lVDCCB3Ew\r\n// SIG // ggVZoAMCAQICEzMAAAAVxedrngKbSZkAAAAAABUwDQYJ\r\n// SIG // KoZIhvcNAQELBQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYD\r\n// SIG // VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25k\r\n// SIG // MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x\r\n// SIG // MjAwBgNVBAMTKU1pY3Jvc29mdCBSb290IENlcnRpZmlj\r\n// SIG // YXRlIEF1dGhvcml0eSAyMDEwMB4XDTIxMDkzMDE4MjIy\r\n// SIG // NVoXDTMwMDkzMDE4MzIyNVowfDELMAkGA1UEBhMCVVMx\r\n// SIG // EzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1Jl\r\n// SIG // ZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3Jh\r\n// SIG // dGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3Rh\r\n// SIG // bXAgUENBIDIwMTAwggIiMA0GCSqGSIb3DQEBAQUAA4IC\r\n// SIG // DwAwggIKAoICAQDk4aZM57RyIQt5osvXJHm9DtWC0/3u\r\n// SIG // nAcH0qlsTnXIyjVX9gF/bErg4r25PhdgM/9cT8dm95VT\r\n// SIG // cVrifkpa/rg2Z4VGIwy1jRPPdzLAEBjoYH1qUoNEt6aO\r\n// SIG // RmsHFPPFdvWGUNzBRMhxXFExN6AKOG6N7dcP2CZTfDlh\r\n// SIG // AnrEqv1yaa8dq6z2Nr41JmTamDu6GnszrYBbfowQHJ1S\r\n// SIG // /rboYiXcag/PXfT+jlPP1uyFVk3v3byNpOORj7I5LFGc\r\n// SIG // 6XBpDco2LXCOMcg1KL3jtIckw+DJj361VI/c+gVVmG1o\r\n// SIG // O5pGve2krnopN6zL64NF50ZuyjLVwIYwXE8s4mKyzbni\r\n// SIG // jYjklqwBSru+cakXW2dg3viSkR4dPf0gz3N9QZpGdc3E\r\n// SIG // XzTdEonW/aUgfX782Z5F37ZyL9t9X4C626p+Nuw2TPYr\r\n// SIG // bqgSUei/BQOj0XOmTTd0lBw0gg/wEPK3Rxjtp+iZfD9M\r\n// SIG // 269ewvPV2HM9Q07BMzlMjgK8QmguEOqEUUbi0b1qGFph\r\n// SIG // AXPKZ6Je1yh2AuIzGHLXpyDwwvoSCtdjbwzJNmSLW6Cm\r\n// SIG // gyFdXzB0kZSU2LlQ+QuJYfM2BjUYhEfb3BvR/bLUHMVr\r\n// SIG // 9lxSUV0S2yW6r1AFemzFER1y7435UsSFF5PAPBXbGjfH\r\n// SIG // CBUYP3irRbb1Hode2o+eFnJpxq57t7c+auIurQIDAQAB\r\n// SIG // o4IB3TCCAdkwEgYJKwYBBAGCNxUBBAUCAwEAATAjBgkr\r\n// SIG // BgEEAYI3FQIEFgQUKqdS/mTEmr6CkTxGNSnPEP8vBO4w\r\n// SIG // HQYDVR0OBBYEFJ+nFV0AXmJdg/Tl0mWnG1M1GelyMFwG\r\n// SIG // A1UdIARVMFMwUQYMKwYBBAGCN0yDfQEBMEEwPwYIKwYB\r\n// SIG // BQUHAgEWM2h0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9w\r\n// SIG // a2lvcHMvRG9jcy9SZXBvc2l0b3J5Lmh0bTATBgNVHSUE\r\n// SIG // DDAKBggrBgEFBQcDCDAZBgkrBgEEAYI3FAIEDB4KAFMA\r\n// SIG // dQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUw\r\n// SIG // AwEB/zAfBgNVHSMEGDAWgBTV9lbLj+iiXGJo0T2UkFvX\r\n// SIG // zpoYxDBWBgNVHR8ETzBNMEugSaBHhkVodHRwOi8vY3Js\r\n// SIG // Lm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9N\r\n// SIG // aWNSb29DZXJBdXRfMjAxMC0wNi0yMy5jcmwwWgYIKwYB\r\n// SIG // BQUHAQEETjBMMEoGCCsGAQUFBzAChj5odHRwOi8vd3d3\r\n// SIG // Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY1Jvb0Nl\r\n// SIG // ckF1dF8yMDEwLTA2LTIzLmNydDANBgkqhkiG9w0BAQsF\r\n// SIG // AAOCAgEAnVV9/Cqt4SwfZwExJFvhnnJL/Klv6lwUtj5O\r\n// SIG // R2R4sQaTlz0xM7U518JxNj/aZGx80HU5bbsPMeTCj/ts\r\n// SIG // 0aGUGCLu6WZnOlNN3Zi6th542DYunKmCVgADsAW+iehp\r\n// SIG // 4LoJ7nvfam++Kctu2D9IdQHZGN5tggz1bSNU5HhTdSRX\r\n// SIG // ud2f8449xvNo32X2pFaq95W2KFUn0CS9QKC/GbYSEhFd\r\n// SIG // PSfgQJY4rPf5KYnDvBewVIVCs/wMnosZiefwC2qBwoEZ\r\n// SIG // QhlSdYo2wh3DYXMuLGt7bj8sCXgU6ZGyqVvfSaN0DLzs\r\n// SIG // kYDSPeZKPmY7T7uG+jIa2Zb0j/aRAfbOxnT99kxybxCr\r\n// SIG // dTDFNLB62FD+CljdQDzHVG2dY3RILLFORy3BFARxv2T5\r\n// SIG // JL5zbcqOCb2zAVdJVGTZc9d/HltEAY5aGZFrDZ+kKNxn\r\n// SIG // GSgkujhLmm77IVRrakURR6nxt67I6IleT53S0Ex2tVdU\r\n// SIG // CbFpAUR+fKFhbHP+CrvsQWY9af3LwUFJfn6Tvsv4O+S3\r\n// SIG // Fb+0zj6lMVGEvL8CwYKiexcdFYmNcP7ntdAoGokLjzba\r\n// SIG // ukz5m/8K6TT4JDVnK+ANuOaMmdbhIurwJ0I9JZTmdHRb\r\n// SIG // atGePu1+oDEzfbzL6Xu/OHBE0ZDxyKs6ijoIYn/ZcGNT\r\n// SIG // TY3ugm2lBRDBcQZqELQdVTNYs6FwZvKhggLVMIICPgIB\r\n// SIG // ATCCAQChgdikgdUwgdIxCzAJBgNVBAYTAlVTMRMwEQYD\r\n// SIG // VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25k\r\n// SIG // MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x\r\n// SIG // LTArBgNVBAsTJE1pY3Jvc29mdCBJcmVsYW5kIE9wZXJh\r\n// SIG // dGlvbnMgTGltaXRlZDEmMCQGA1UECxMdVGhhbGVzIFRT\r\n// SIG // UyBFU046OEQ0MS00QkY3LUIzQjcxJTAjBgNVBAMTHE1p\r\n// SIG // Y3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2WiIwoBATAH\r\n// SIG // BgUrDgMCGgMVAD2Il7vDkUOIbynLhOxitAjoMVp6oIGD\r\n// SIG // MIGApH4wfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldh\r\n// SIG // c2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNV\r\n// SIG // BAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UE\r\n// SIG // AxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAw\r\n// SIG // DQYJKoZIhvcNAQEFBQACBQDppi9YMCIYDzIwMjQwMzIx\r\n// SIG // MTIwMDI0WhgPMjAyNDAzMjIxMjAwMjRaMHUwOwYKKwYB\r\n// SIG // BAGEWQoEATEtMCswCgIFAOmmL1gCAQAwCAIBAAIDAIr8\r\n// SIG // MAcCAQACAlsQMAoCBQDpp4DYAgEAMDYGCisGAQQBhFkK\r\n// SIG // BAIxKDAmMAwGCisGAQQBhFkKAwKgCjAIAgEAAgMHoSCh\r\n// SIG // CjAIAgEAAgMBhqAwDQYJKoZIhvcNAQEFBQADgYEAXxtC\r\n// SIG // QhsIs3i3cDZZ0AvijAZ7yDQhh2CWDwAvtI3D/b+TsXTS\r\n// SIG // gn5GiUcSBQnhgxmQPkW6B7Ad1D7f2x+pmWmlrgCZp7Jn\r\n// SIG // lvac0WwWSsdLaeVS1mCsVKobp8WZ3X/sto4bV8NQcSQQ\r\n// SIG // d67rqC2iRkbVM1PSFcT6VmHKRTfcOHatsHQxggQNMIIE\r\n// SIG // CQIBATCBkzB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMK\r\n// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG\r\n// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYD\r\n// SIG // VQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAx\r\n// SIG // MAITMwAAAePfvZuaHGiDIgABAAAB4zANBglghkgBZQME\r\n// SIG // AgEFAKCCAUowGgYJKoZIhvcNAQkDMQ0GCyqGSIb3DQEJ\r\n// SIG // EAEEMC8GCSqGSIb3DQEJBDEiBCAprdBPDwqal6VpAAOV\r\n// SIG // i+J92DiJe6lERu9UeZxt4Qn0QzCB+gYLKoZIhvcNAQkQ\r\n// SIG // Ai8xgeowgecwgeQwgb0EIDPUI6vlsP5k90SBCNa9wha4\r\n// SIG // MlxBt2Crw12PTHIy5iYqMIGYMIGApH4wfDELMAkGA1UE\r\n// SIG // BhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNV\r\n// SIG // BAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBD\r\n// SIG // b3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRp\r\n// SIG // bWUtU3RhbXAgUENBIDIwMTACEzMAAAHj372bmhxogyIA\r\n// SIG // AQAAAeMwIgQgfAfgbQHUyCCwG8I1CtfFUY+J5pYJIHw3\r\n// SIG // 3qm3nzXXMpEwDQYJKoZIhvcNAQELBQAEggIAOQSUw4z9\r\n// SIG // Dc/eTPbnSMOKo4RhCpQ8rBBnu5MUon6DOIpHS5E+xv/N\r\n// SIG // /AtZ9HY/VhlH6MmAJgImbvqh9+KopJwEpfOfSyQNALTM\r\n// SIG // mjgYmGErF53TeYSDPDfN7l3r4Fd3Lu237/L4niMEOKNs\r\n// SIG // LbBouy6UUKCQ78iKwiKCGMAXq9cVKba7FLiuVKNMXoBB\r\n// SIG // +imsivm6pU92eg/+/iEzHrTSgWh6nRSWK74mSd9rza8o\r\n// SIG // Idp/DKUQPOpB+m4dQEB43+ixdXBZ3+yCSZvreiGwR8vR\r\n// SIG // PfonLWxkcE425RRTLTut4yXaOs5fhDZfY5ho13mgYWAD\r\n// SIG // KbqIij2ZuvLCMugRFbL2ypMk0xHpA9DSWLuJE25EBe0y\r\n// SIG // +WPMtjDDC4Vlv9Iao58tZPkFUh0i5br2bu9J+4YPOaI0\r\n// SIG // mIi/auJA7imf1pm2y6FrDYTbp+0bAR3ePZsKgQm8hgYW\r\n// SIG // XnJ/I1Mx1NeGTuC0VSMU9/0eFNWzOwdzzGCMxG8pOO34\r\n// SIG // K9UuDaRgNpoo+RXp1vNa7NnJ3ifiaeHx8V2mEhqX5gig\r\n// SIG // QTHdGpkqPoKBdu9aLxprB+DPzHkAbb+F0Xd9ElnFU/0Z\r\n// SIG // VlyVQ8rawejf7dtVFNV+jRX4ET/2qSauKAmweOlncur7\r\n// SIG // XufbM4VHBBnZyDqQAkK+kwjsQ/2ALvgxlQDYZVfQTsCT\r\n// SIG // sI4ez1LRm+bvHRs=\r\n// SIG // End signature block\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///419\n");

/***/ }),

/***/ 639:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   D: () => (/* binding */ getPropertyValue),\n/* harmony export */   y: () => (/* binding */ getDescriptor)\n/* harmony export */ });\n/**\n * Build and return formatting descriptor for simple slice\n *\n * @param objectName Object name from capabilities\n * @param slice formatting simple slice\n * @returns simple slice formatting descriptor\n */\nfunction getDescriptor(objectName, slice) {\n    return {\n        objectName: objectName,\n        propertyName: slice.name,\n        selector: slice.selector,\n        altConstantValueSelector: slice.altConstantSelector,\n        instanceKind: slice.instanceKind\n    };\n}\n/**\n * Get property value from dataview objects if exists\n * Else return the default value from formatting settings object\n *\n * @param value dataview object value\n * @param defaultValue formatting settings default value\n * @returns formatting property value\n */\nfunction getPropertyValue(slice, value, defaultValue) {\n    if (value == null || (typeof value === \"object\" && !value.solid)) {\n        return defaultValue;\n    }\n    if (value.solid) {\n        return { value: value === null || value === void 0 ? void 0 : value.solid.color };\n    }\n    if ((slice === null || slice === void 0 ? void 0 : slice.type) === \"Dropdown\" /* visuals.FormattingComponent.Dropdown */ && slice.items) {\n        const itemsArray = slice.items;\n        return itemsArray.find(item => item.value == value);\n    }\n    return value;\n}\n//# sourceMappingURL=FormattingSettingsUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjM5LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYWxlbmRhcmJsaXpDNDEwNjdEMDI1REY0NkIyOEQ0OTc3MDVEOEM0MzAxQl9ERUJVRy8uL25vZGVfbW9kdWxlcy9wb3dlcmJpLXZpc3VhbHMtdXRpbHMtZm9ybWF0dGluZ21vZGVsL2xpYi91dGlscy9Gb3JtYXR0aW5nU2V0dGluZ3NVdGlscy5qcz8xNmZlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQnVpbGQgYW5kIHJldHVybiBmb3JtYXR0aW5nIGRlc2NyaXB0b3IgZm9yIHNpbXBsZSBzbGljZVxuICpcbiAqIEBwYXJhbSBvYmplY3ROYW1lIE9iamVjdCBuYW1lIGZyb20gY2FwYWJpbGl0aWVzXG4gKiBAcGFyYW0gc2xpY2UgZm9ybWF0dGluZyBzaW1wbGUgc2xpY2VcbiAqIEByZXR1cm5zIHNpbXBsZSBzbGljZSBmb3JtYXR0aW5nIGRlc2NyaXB0b3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlc2NyaXB0b3Iob2JqZWN0TmFtZSwgc2xpY2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBvYmplY3ROYW1lOiBvYmplY3ROYW1lLFxuICAgICAgICBwcm9wZXJ0eU5hbWU6IHNsaWNlLm5hbWUsXG4gICAgICAgIHNlbGVjdG9yOiBzbGljZS5zZWxlY3RvcixcbiAgICAgICAgYWx0Q29uc3RhbnRWYWx1ZVNlbGVjdG9yOiBzbGljZS5hbHRDb25zdGFudFNlbGVjdG9yLFxuICAgICAgICBpbnN0YW5jZUtpbmQ6IHNsaWNlLmluc3RhbmNlS2luZFxuICAgIH07XG59XG4vKipcbiAqIEdldCBwcm9wZXJ0eSB2YWx1ZSBmcm9tIGRhdGF2aWV3IG9iamVjdHMgaWYgZXhpc3RzXG4gKiBFbHNlIHJldHVybiB0aGUgZGVmYXVsdCB2YWx1ZSBmcm9tIGZvcm1hdHRpbmcgc2V0dGluZ3Mgb2JqZWN0XG4gKlxuICogQHBhcmFtIHZhbHVlIGRhdGF2aWV3IG9iamVjdCB2YWx1ZVxuICogQHBhcmFtIGRlZmF1bHRWYWx1ZSBmb3JtYXR0aW5nIHNldHRpbmdzIGRlZmF1bHQgdmFsdWVcbiAqIEByZXR1cm5zIGZvcm1hdHRpbmcgcHJvcGVydHkgdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFByb3BlcnR5VmFsdWUoc2xpY2UsIHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmICF2YWx1ZS5zb2xpZCkpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHZhbHVlLnNvbGlkKSB7XG4gICAgICAgIHJldHVybiB7IHZhbHVlOiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsdWUuc29saWQuY29sb3IgfTtcbiAgICB9XG4gICAgaWYgKChzbGljZSA9PT0gbnVsbCB8fCBzbGljZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2xpY2UudHlwZSkgPT09IFwiRHJvcGRvd25cIiAvKiB2aXN1YWxzLkZvcm1hdHRpbmdDb21wb25lbnQuRHJvcGRvd24gKi8gJiYgc2xpY2UuaXRlbXMpIHtcbiAgICAgICAgY29uc3QgaXRlbXNBcnJheSA9IHNsaWNlLml0ZW1zO1xuICAgICAgICByZXR1cm4gaXRlbXNBcnJheS5maW5kKGl0ZW0gPT4gaXRlbS52YWx1ZSA9PSB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZvcm1hdHRpbmdTZXR0aW5nc1V0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///639\n");

/***/ }),

/***/ 667:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* unused harmony export FormattingSettingsService */\n/* harmony import */ var _FormattingSettingsComponents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(754);\n\nclass FormattingSettingsService {\n    constructor(localizationManager) {\n        this.localizationManager = localizationManager;\n    }\n    /**\n     * Build visual formatting settings model from metadata dataView\n     *\n     * @param dataViews metadata dataView object\n     * @returns visual formatting settings model\n     */\n    populateFormattingSettingsModel(typeClass, dataView) {\n        var _a, _b;\n        const defaultSettings = new typeClass();\n        const dataViewObjects = (_a = dataView === null || dataView === void 0 ? void 0 : dataView.metadata) === null || _a === void 0 ? void 0 : _a.objects;\n        if (dataViewObjects) {\n            // loop over each formatting property and set its new value if exists\n            (_b = defaultSettings.cards) === null || _b === void 0 ? void 0 : _b.forEach((card) => {\n                var _a;\n                if (card instanceof _FormattingSettingsComponents__WEBPACK_IMPORTED_MODULE_0__/* .CompositeCard */ .St)\n                    (_a = card.topLevelSlice) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, card.name);\n                const cardGroupInstances = (card instanceof _FormattingSettingsComponents__WEBPACK_IMPORTED_MODULE_0__/* .SimpleCard */ .Tn ? [card] : card.groups);\n                cardGroupInstances.forEach((cardGroupInstance) => {\n                    var _a, _b, _c, _d;\n                    // Set current top level toggle value\n                    (_a = cardGroupInstance.topLevelSlice) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, card.name);\n                    (_b = cardGroupInstance === null || cardGroupInstance === void 0 ? void 0 : cardGroupInstance.slices) === null || _b === void 0 ? void 0 : _b.forEach((slice) => {\n                        slice === null || slice === void 0 ? void 0 : slice.setPropertiesValues(dataViewObjects, card.name);\n                    });\n                    (_d = (_c = cardGroupInstance === null || cardGroupInstance === void 0 ? void 0 : cardGroupInstance.container) === null || _c === void 0 ? void 0 : _c.containerItems) === null || _d === void 0 ? void 0 : _d.forEach((containerItem) => {\n                        var _a;\n                        (_a = containerItem === null || containerItem === void 0 ? void 0 : containerItem.slices) === null || _a === void 0 ? void 0 : _a.forEach((slice) => {\n                            slice === null || slice === void 0 ? void 0 : slice.setPropertiesValues(dataViewObjects, card.name);\n                        });\n                    });\n                });\n            });\n        }\n        return defaultSettings;\n    }\n    /**\n     * Build formatting model by parsing formatting settings model object\n     *\n     * @returns powerbi visual formatting model\n     */\n    buildFormattingModel(formattingSettingsModel) {\n        const formattingModel = {\n            cards: []\n        };\n        formattingSettingsModel.cards\n            .filter(({ visible = true }) => visible)\n            .forEach((card) => {\n            var _a;\n            const formattingCard = {\n                displayName: (this.localizationManager && card.displayNameKey) ? this.localizationManager.getDisplayName(card.displayNameKey) : card.displayName,\n                description: (this.localizationManager && card.descriptionKey) ? this.localizationManager.getDisplayName(card.descriptionKey) : card.description,\n                groups: [],\n                uid: card.name + \"-card\",\n                analyticsPane: card.analyticsPane,\n            };\n            const objectName = card.name;\n            if (card.topLevelSlice) {\n                const topLevelToggleSlice = card.topLevelSlice.getFormattingSlice(objectName, this.localizationManager);\n                topLevelToggleSlice.suppressDisplayName = true;\n                formattingCard.topLevelToggle = topLevelToggleSlice;\n            }\n            (_a = card.onPreProcess) === null || _a === void 0 ? void 0 : _a.call(card);\n            const isSimpleCard = card instanceof _FormattingSettingsComponents__WEBPACK_IMPORTED_MODULE_0__/* .SimpleCard */ .Tn;\n            const cardGroupInstances = (isSimpleCard ?\n                [card].filter(({ visible = true }) => visible) :\n                card.groups.filter(({ visible = true }) => visible));\n            cardGroupInstances\n                .forEach((cardGroupInstance) => {\n                const groupUid = cardGroupInstance.name + \"-group\";\n                // Build formatting group for each group\n                const formattingGroup = {\n                    displayName: isSimpleCard ? undefined : (this.localizationManager && cardGroupInstance.displayNameKey)\n                        ? this.localizationManager.getDisplayName(cardGroupInstance.displayNameKey) : cardGroupInstance.displayName,\n                    description: isSimpleCard ? undefined : (this.localizationManager && cardGroupInstance.descriptionKey)\n                        ? this.localizationManager.getDisplayName(cardGroupInstance.descriptionKey) : cardGroupInstance.description,\n                    slices: [],\n                    uid: groupUid,\n                    collapsible: cardGroupInstance.collapsible,\n                    delaySaveSlices: cardGroupInstance.delaySaveSlices,\n                    disabled: cardGroupInstance.disabled,\n                    disabledReason: cardGroupInstance.disabledReason,\n                };\n                formattingCard.groups.push(formattingGroup);\n                // In case formatting model adds data points or top categories (Like when you modify specific visual category color).\n                // these categories use same object name and property name from capabilities and the generated uid will be the same for these formatting categories properties\n                // Solution => Save slice names to modify each slice uid to be unique by adding counter value to the new slice uid\n                const sliceNames = {};\n                // Build formatting container slice for each property\n                if (cardGroupInstance.container) {\n                    const container = cardGroupInstance.container;\n                    const containerUid = groupUid + \"-container\";\n                    const formattingContainer = {\n                        displayName: (this.localizationManager && container.displayNameKey)\n                            ? this.localizationManager.getDisplayName(container.displayNameKey) : container.displayName,\n                        description: (this.localizationManager && container.descriptionKey)\n                            ? this.localizationManager.getDisplayName(container.descriptionKey) : container.description,\n                        containerItems: [],\n                        uid: containerUid\n                    };\n                    container.containerItems.forEach((containerItem) => {\n                        // Build formatting container item object\n                        const containerIemName = containerItem.displayNameKey ? containerItem.displayNameKey : containerItem.displayName;\n                        const containerItemUid = containerUid + containerIemName;\n                        const formattingContainerItem = {\n                            displayName: (this.localizationManager && containerItem.displayNameKey)\n                                ? this.localizationManager.getDisplayName(containerItem.displayNameKey) : containerItem.displayName,\n                            slices: [],\n                            uid: containerItemUid\n                        };\n                        // Build formatting slices and add them to current formatting container item\n                        this.buildFormattingSlices({ slices: containerItem.slices, objectName, sliceNames, formattingSlices: formattingContainerItem.slices });\n                        formattingContainer.containerItems.push(formattingContainerItem);\n                    });\n                    formattingGroup.container = formattingContainer;\n                }\n                if (cardGroupInstance.slices) {\n                    if (cardGroupInstance.topLevelSlice) {\n                        const topLevelToggleSlice = cardGroupInstance.topLevelSlice.getFormattingSlice(objectName, this.localizationManager);\n                        topLevelToggleSlice.suppressDisplayName = true;\n                        (formattingGroup.displayName == undefined ? formattingCard : formattingGroup).topLevelToggle = topLevelToggleSlice;\n                    }\n                    // Build formatting slice for each property\n                    this.buildFormattingSlices({ slices: cardGroupInstance.slices, objectName, sliceNames, formattingSlices: formattingGroup.slices });\n                }\n            });\n            formattingCard.revertToDefaultDescriptors = this.getRevertToDefaultDescriptor(card);\n            formattingModel.cards.push(formattingCard);\n        });\n        return formattingModel;\n    }\n    buildFormattingSlices({ slices, objectName, sliceNames, formattingSlices }) {\n        // Filter slices based on their visibility\n        slices === null || slices === void 0 ? void 0 : slices.filter(({ visible = true }) => visible).forEach((slice) => {\n            const formattingSlice = slice === null || slice === void 0 ? void 0 : slice.getFormattingSlice(objectName, this.localizationManager);\n            if (formattingSlice) {\n                // Modify formatting slice uid if needed\n                if (sliceNames[slice.name] === undefined) {\n                    sliceNames[slice.name] = 0;\n                }\n                else {\n                    sliceNames[slice.name]++;\n                    formattingSlice.uid = `${formattingSlice.uid}-${sliceNames[slice.name]}`;\n                }\n                formattingSlices.push(formattingSlice);\n            }\n        });\n    }\n    getRevertToDefaultDescriptor(card) {\n        var _a;\n        // Proceeded slice names are saved to prevent duplicated default descriptors in case of using \n        // formatting categories & selectors, since they have the same descriptor objectName and propertyName\n        const sliceNames = {};\n        const revertToDefaultDescriptors = [];\n        let cardSlicesDefaultDescriptors;\n        let cardContainerSlicesDefaultDescriptors = [];\n        // eslint-disable-next-line\n        if (card instanceof _FormattingSettingsComponents__WEBPACK_IMPORTED_MODULE_0__/* .CompositeCard */ .St && card.topLevelSlice)\n            revertToDefaultDescriptors.push(...(_a = card.topLevelSlice) === null || _a === void 0 ? void 0 : _a.getRevertToDefaultDescriptor(card.name));\n        const cardGroupInstances = (card instanceof _FormattingSettingsComponents__WEBPACK_IMPORTED_MODULE_0__/* .SimpleCard */ .Tn ?\n            [card].filter(({ visible = true }) => visible) :\n            card.groups.filter(({ visible = true }) => visible));\n        cardGroupInstances.forEach((cardGroupInstance) => {\n            var _a, _b;\n            cardSlicesDefaultDescriptors = this.getSlicesRevertToDefaultDescriptor(card.name, cardGroupInstance.slices, sliceNames, cardGroupInstance.topLevelSlice);\n            (_b = (_a = cardGroupInstance.container) === null || _a === void 0 ? void 0 : _a.containerItems) === null || _b === void 0 ? void 0 : _b.forEach((containerItem) => {\n                cardContainerSlicesDefaultDescriptors = cardContainerSlicesDefaultDescriptors.concat(this.getSlicesRevertToDefaultDescriptor(card.name, containerItem.slices, sliceNames));\n            });\n            revertToDefaultDescriptors.push(...cardSlicesDefaultDescriptors.concat(cardContainerSlicesDefaultDescriptors));\n        });\n        return revertToDefaultDescriptors;\n    }\n    getSlicesRevertToDefaultDescriptor(cardName, slices, sliceNames, topLevelSlice) {\n        let revertToDefaultDescriptors = [];\n        if (topLevelSlice) {\n            sliceNames[topLevelSlice.name] = true;\n            revertToDefaultDescriptors = revertToDefaultDescriptors.concat(topLevelSlice.getRevertToDefaultDescriptor(cardName));\n        }\n        slices === null || slices === void 0 ? void 0 : slices.forEach((slice) => {\n            if (slice && !sliceNames[slice.name]) {\n                sliceNames[slice.name] = true;\n                revertToDefaultDescriptors = revertToDefaultDescriptors.concat(slice.getRevertToDefaultDescriptor(cardName));\n            }\n        });\n        return revertToDefaultDescriptors;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FormattingSettingsService);\n//# sourceMappingURL=FormattingSettingsService.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///667\n");

/***/ }),

/***/ 674:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   O: () => (/* reexport safe */ _FormattingSettingsService__WEBPACK_IMPORTED_MODULE_1__.A),\n/* harmony export */   z: () => (/* reexport module object */ _FormattingSettingsComponents__WEBPACK_IMPORTED_MODULE_0__)\n/* harmony export */ });\n/* harmony import */ var _FormattingSettingsComponents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(754);\n/* harmony import */ var _FormattingSettingsService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(667);\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjc0LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxRTtBQUNEO0FBQ1g7QUFDekQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYWxlbmRhcmJsaXpDNDEwNjdEMDI1REY0NkIyOEQ0OTc3MDVEOEM0MzAxQl9ERUJVRy8uL25vZGVfbW9kdWxlcy9wb3dlcmJpLXZpc3VhbHMtdXRpbHMtZm9ybWF0dGluZ21vZGVsL2xpYi9pbmRleC5qcz8zYThkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZvcm1hdHRpbmdTZXR0aW5ncyBmcm9tIFwiLi9Gb3JtYXR0aW5nU2V0dGluZ3NDb21wb25lbnRzXCI7XG5pbXBvcnQgRm9ybWF0dGluZ1NldHRpbmdzU2VydmljZSBmcm9tIFwiLi9Gb3JtYXR0aW5nU2V0dGluZ3NTZXJ2aWNlXCI7XG5leHBvcnQgeyBmb3JtYXR0aW5nU2V0dGluZ3MsIEZvcm1hdHRpbmdTZXR0aW5nc1NlcnZpY2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///674\n");

/***/ }),

/***/ 754:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Kx: () => (/* binding */ Model),\n/* harmony export */   St: () => (/* binding */ CompositeCard),\n/* harmony export */   Tn: () => (/* binding */ SimpleCard),\n/* harmony export */   iB: () => (/* binding */ NumUpDown),\n/* harmony export */   jF: () => (/* binding */ ToggleSwitch),\n/* harmony export */   sk: () => (/* binding */ ColorPicker)\n/* harmony export */ });\n/* unused harmony exports CardGroupEntity, Group, SimpleSlice, AlignmentGroup, Slider, DatePicker, ItemDropdown, AutoDropdown, DurationPicker, ErrorRangeControl, FieldPicker, ItemFlagsSelection, AutoFlagsSelection, TextInput, TextArea, FontPicker, GradientBar, ImageUpload, ListEditor, ReadOnlyText, ShapeMapSelector, CompositeSlice, FontControl, MarginPadding, Container, ContainerItem */\n/* harmony import */ var _utils_FormattingSettingsUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(639);\n/**\n * Powerbi utils components classes for custom visual formatting pane objects\n *\n */\n\nclass NamedEntity {\n}\nclass CardGroupEntity extends NamedEntity {\n}\nclass Model {\n}\n/** CompositeCard is use to populate a card into the formatting pane with multiple groups */\nclass CompositeCard extends NamedEntity {\n}\nclass Group extends CardGroupEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n}\n/** SimpleCard is use to populate a card into the formatting pane in a single group */\nclass SimpleCard extends CardGroupEntity {\n}\nclass SimpleSlice extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n    getFormattingSlice(objectName, localizationManager) {\n        const controlType = this.type;\n        const propertyName = this.name;\n        const sliceDisplayName = (localizationManager && this.displayNameKey) ? localizationManager.getDisplayName(this.displayNameKey) : this.displayName;\n        const sliceDescription = (localizationManager && this.descriptionKey) ? localizationManager.getDisplayName(this.descriptionKey) : this.description;\n        const componentDisplayName = {\n            displayName: sliceDisplayName,\n            description: sliceDescription,\n            uid: objectName + '-' + propertyName,\n        };\n        return Object.assign(Object.assign({}, componentDisplayName), { control: {\n                type: controlType,\n                properties: this.getFormattingComponent(objectName, localizationManager)\n            } });\n    }\n    // eslint-disable-next-line\n    getFormattingComponent(objectName, localizationManager) {\n        return {\n            descriptor: _utils_FormattingSettingsUtils__WEBPACK_IMPORTED_MODULE_0__/* .getDescriptor */ .y(objectName, this),\n            value: this.value,\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return [{\n                objectName: objectName,\n                propertyName: this.name\n            }];\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        var _a;\n        const newValue = (_a = dataViewObjects === null || dataViewObjects === void 0 ? void 0 : dataViewObjects[objectName]) === null || _a === void 0 ? void 0 : _a[this.name];\n        this.value = _utils_FormattingSettingsUtils__WEBPACK_IMPORTED_MODULE_0__/* .getPropertyValue */ .D(this, newValue, this.value);\n    }\n}\nclass AlignmentGroup extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"AlignmentGroup\" /* visuals.FormattingComponent.AlignmentGroup */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { mode: this.mode, supportsNoSelection: this.supportsNoSelection });\n    }\n}\nclass ToggleSwitch extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ToggleSwitch\" /* visuals.FormattingComponent.ToggleSwitch */;\n    }\n}\nclass ColorPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ColorPicker\" /* visuals.FormattingComponent.ColorPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { defaultColor: this.defaultColor, isNoFillItemSupported: this.isNoFillItemSupported });\n    }\n}\nclass NumUpDown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"NumUpDown\" /* visuals.FormattingComponent.NumUpDown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { options: this.options });\n    }\n}\nclass Slider extends NumUpDown {\n    constructor() {\n        super(...arguments);\n        this.type = \"Slider\" /* visuals.FormattingComponent.Slider */;\n    }\n}\nclass DatePicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"DatePicker\" /* visuals.FormattingComponent.DatePicker */;\n    }\n    getFormattingComponent(objectName, localizationManager) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { placeholder: (localizationManager && this.placeholderKey) ? localizationManager.getDisplayName(this.placeholderKey) : this.placeholder, validators: this.validators });\n    }\n}\nclass ItemDropdown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"Dropdown\" /* visuals.FormattingComponent.Dropdown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { items: this.items });\n    }\n}\nclass AutoDropdown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"Dropdown\" /* visuals.FormattingComponent.Dropdown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { mergeValues: this.mergeValues, filterValues: this.filterValues });\n    }\n}\nclass DurationPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"DurationPicker\" /* visuals.FormattingComponent.DurationPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators });\n    }\n}\nclass ErrorRangeControl extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ErrorRangeControl\" /* visuals.FormattingComponent.ErrorRangeControl */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators });\n    }\n}\nclass FieldPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FieldPicker\" /* visuals.FormattingComponent.FieldPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators, allowMultipleValues: this.allowMultipleValues });\n    }\n}\nclass ItemFlagsSelection extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FlagsSelection\" /* visuals.FormattingComponent.FlagsSelection */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { items: this.items });\n    }\n}\nclass AutoFlagsSelection extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"FlagsSelection\" /* visuals.FormattingComponent.FlagsSelection */;\n    }\n}\nclass TextInput extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"TextInput\" /* visuals.FormattingComponent.TextInput */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { placeholder: this.placeholder });\n    }\n}\nclass TextArea extends TextInput {\n    constructor() {\n        super(...arguments);\n        this.type = \"TextArea\" /* visuals.FormattingComponent.TextArea */;\n    }\n}\nclass FontPicker extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"FontPicker\" /* visuals.FormattingComponent.FontPicker */;\n    }\n}\nclass GradientBar extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"GradientBar\" /* visuals.FormattingComponent.GradientBar */;\n    }\n}\nclass ImageUpload extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ImageUpload\" /* visuals.FormattingComponent.ImageUpload */;\n    }\n}\nclass ListEditor extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ListEditor\" /* visuals.FormattingComponent.ListEditor */;\n    }\n}\nclass ReadOnlyText extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ReadOnlyText\" /* visuals.FormattingComponent.ReadOnlyText */;\n    }\n}\nclass ShapeMapSelector extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ShapeMapSelector\" /* visuals.FormattingComponent.ShapeMapSelector */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { isAzMapReferenceSelector: this.isAzMapReferenceSelector });\n    }\n}\nclass CompositeSlice extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n    getFormattingSlice(objectName, localizationManager) {\n        const controlType = this.type;\n        const propertyName = this.name;\n        const componentDisplayName = {\n            displayName: (localizationManager && this.displayNameKey) ? localizationManager.getDisplayName(this.displayNameKey) : this.displayName,\n            description: (localizationManager && this.descriptionKey) ? localizationManager.getDisplayName(this.descriptionKey) : this.description,\n            uid: objectName + '-' + propertyName,\n        };\n        return Object.assign(Object.assign({}, componentDisplayName), { control: {\n                type: controlType,\n                properties: this.getFormattingComponent(objectName)\n            } });\n    }\n}\nclass FontControl extends CompositeSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FontControl\" /* visuals.FormattingComponent.FontControl */;\n    }\n    getFormattingComponent(objectName) {\n        var _a, _b, _c;\n        return {\n            fontFamily: this.fontFamily.getFormattingComponent(objectName),\n            fontSize: this.fontSize.getFormattingComponent(objectName),\n            bold: (_a = this.bold) === null || _a === void 0 ? void 0 : _a.getFormattingComponent(objectName),\n            italic: (_b = this.italic) === null || _b === void 0 ? void 0 : _b.getFormattingComponent(objectName),\n            underline: (_c = this.underline) === null || _c === void 0 ? void 0 : _c.getFormattingComponent(objectName)\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return this.fontFamily.getRevertToDefaultDescriptor(objectName)\n            .concat(this.fontSize.getRevertToDefaultDescriptor(objectName))\n            .concat(this.bold ? this.bold.getRevertToDefaultDescriptor(objectName) : [])\n            .concat(this.italic ? this.italic.getRevertToDefaultDescriptor(objectName) : [])\n            .concat(this.underline ? this.underline.getRevertToDefaultDescriptor(objectName) : []);\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        var _a, _b, _c;\n        this.fontFamily.setPropertiesValues(dataViewObjects, objectName);\n        this.fontSize.setPropertiesValues(dataViewObjects, objectName);\n        (_a = this.bold) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, objectName);\n        (_b = this.italic) === null || _b === void 0 ? void 0 : _b.setPropertiesValues(dataViewObjects, objectName);\n        (_c = this.underline) === null || _c === void 0 ? void 0 : _c.setPropertiesValues(dataViewObjects, objectName);\n    }\n}\nclass MarginPadding extends CompositeSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"MarginPadding\" /* visuals.FormattingComponent.MarginPadding */;\n    }\n    getFormattingComponent(objectName) {\n        return {\n            left: this.left.getFormattingComponent(objectName),\n            right: this.right.getFormattingComponent(objectName),\n            top: this.top.getFormattingComponent(objectName),\n            bottom: this.bottom.getFormattingComponent(objectName)\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return this.left.getRevertToDefaultDescriptor(objectName)\n            .concat(this.right.getRevertToDefaultDescriptor(objectName))\n            .concat(this.top.getRevertToDefaultDescriptor(objectName))\n            .concat(this.bottom.getRevertToDefaultDescriptor(objectName));\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        this.left.setPropertiesValues(dataViewObjects, objectName);\n        this.right.setPropertiesValues(dataViewObjects, objectName);\n        this.top.setPropertiesValues(dataViewObjects, objectName);\n        this.bottom.setPropertiesValues(dataViewObjects, objectName);\n    }\n}\nclass Container extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n}\nclass ContainerItem extends (/* unused pure expression or super */ null && (NamedEntity)) {\n}\n//# sourceMappingURL=FormattingSettingsComponents.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///754\n");

/***/ }),

/***/ 993:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   U: () => (/* binding */ DateRangePicker)\n/* harmony export */ });\nclass DateRangePicker {\n    targetElement;\n    onChangeCallback;\n    onResetCallback;\n    startDate;\n    endDate;\n    leftViewDate;\n    rightViewDate;\n    calendarVisible;\n    calendar;\n    _handleMousedown;\n    _showCalendarBound;\n    defaultStartDate;\n    defaultEndDate;\n    constructor(options, callbacks) {\n        this.targetElement = options.targetElement || null;\n        this.onChangeCallback = callbacks.onChange || null;\n        this.onResetCallback = callbacks.onReset || null;\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        this.startDate = options.initialStartDate ? new Date(options.initialStartDate) : new Date(today);\n        this.endDate = options.initialEndDate ? new Date(options.initialEndDate) : new Date(today);\n        this.defaultStartDate = options.defaultStartDate ?? null;\n        this.defaultEndDate = options.defaultEndDate ?? null;\n        if (this.startDate && this.endDate &&\n            this.startDate.getMonth() === this.endDate.getMonth() &&\n            this.startDate.getFullYear() === this.endDate.getFullYear()) {\n            this.leftViewDate = new Date(this.startDate.getFullYear(), this.startDate.getMonth(), 1);\n            this.rightViewDate = new Date(this.startDate.getFullYear(), this.startDate.getMonth() + 1, 1);\n        }\n        else {\n            this.leftViewDate = new Date(this.startDate.getFullYear(), this.startDate.getMonth(), 1);\n            this.rightViewDate = new Date(this.endDate.getFullYear(), this.endDate.getMonth(), 1);\n        }\n        this.calendarVisible = false;\n        this.calendar = null;\n        this._handleMousedown = this.handleMousedown.bind(this);\n        this._showCalendarBound = () => this.showCalendar();\n        this.init();\n    }\n    init() {\n        if (this.targetElement) {\n            this.renderCalendar();\n        }\n    }\n    showCalendar() {\n        if (this.calendarVisible)\n            return;\n        this.calendarVisible = true;\n        this.renderCalendar();\n        document.addEventListener('mousedown', this._handleMousedown);\n    }\n    hideCalendar() {\n        if (!this.calendarVisible)\n            return;\n        this.calendarVisible = false;\n        if (this.calendar && this.calendar.parentNode) {\n            this.calendar.parentNode.removeChild(this.calendar);\n        }\n        document.removeEventListener('mousedown', this._handleMousedown);\n    }\n    handleMousedown(e) {\n        if (this.calendar && !this.calendar.contains(e.target)) {\n            this.hideCalendar();\n        }\n    }\n    renderCalendar() {\n        if (this.calendar && this.calendar.parentNode) {\n            this.calendar.parentNode.removeChild(this.calendar);\n        }\n        this.calendar = document.createElement('div');\n        this.calendar.className = 'calendar';\n        // --- Main content row: quick select, left, right calendar ---\n        const calendarContent = document.createElement('div');\n        calendarContent.className = 'calendar-content';\n        // Quick select (column)\n        const quickSelect = this.createQuickSelectSection();\n        calendarContent.appendChild(quickSelect);\n        // Left calendar\n        const leftCalendar = document.createElement('div');\n        leftCalendar.className = 'calendar-area left-calendar-area';\n        leftCalendar.appendChild(this.createHeader(this.leftViewDate, -1, 'left'));\n        leftCalendar.appendChild(this.createWeekdays());\n        leftCalendar.appendChild(this.createDaysGrid(this.leftViewDate));\n        calendarContent.appendChild(leftCalendar);\n        // Right calendar\n        const rightCalendar = document.createElement('div');\n        rightCalendar.className = 'calendar-area right-calendar-area';\n        rightCalendar.appendChild(this.createHeader(this.rightViewDate, 1, 'right'));\n        rightCalendar.appendChild(this.createWeekdays());\n        rightCalendar.appendChild(this.createDaysGrid(this.rightViewDate));\n        calendarContent.appendChild(rightCalendar);\n        this.calendar.appendChild(calendarContent);\n        // Append to DOM\n        if (this.targetElement) {\n            this.targetElement.appendChild(this.calendar);\n        }\n        else {\n            document.body.appendChild(this.calendar);\n        }\n    }\n    createHeader(date, delta, calendarSide) {\n        const header = document.createElement('div');\n        header.className = 'calendar-header';\n        // Prev button\n        const prevButton = document.createElement('button');\n        prevButton.className = 'nav-button prev';\n        prevButton.innerHTML = '&#10094;';\n        prevButton.title = 'Previous Month';\n        prevButton.addEventListener('click', (e) => {\n            e.stopPropagation();\n            if (calendarSide === 'left') {\n                this.leftViewDate.setMonth(this.leftViewDate.getMonth() - 1);\n                if (this.leftViewDate >= this.rightViewDate) {\n                    this.rightViewDate = new Date(this.leftViewDate.getFullYear(), this.leftViewDate.getMonth() + 1, 1);\n                }\n            }\n            else {\n                this.rightViewDate.setMonth(this.rightViewDate.getMonth() - 1);\n                if (this.rightViewDate <= this.leftViewDate) {\n                    this.leftViewDate = new Date(this.rightViewDate.getFullYear(), this.rightViewDate.getMonth() - 1, 1);\n                }\n            }\n            this.renderCalendar();\n        });\n        header.appendChild(prevButton);\n        // Month/Year\n        const monthYearContainer = document.createElement('span');\n        monthYearContainer.className = 'month-year';\n        const monthNames = [\n            'January', 'February', 'March', 'April', 'May', 'June',\n            'July', 'August', 'September', 'October', 'November', 'December'\n        ];\n        const monthSpan = document.createElement('span');\n        monthSpan.textContent = monthNames[date.getMonth()] + ' ';\n        monthSpan.className = 'month-span';\n        monthYearContainer.appendChild(monthSpan);\n        const yearText = document.createElement('span');\n        yearText.className = 'year-text';\n        yearText.textContent = date.getFullYear().toString();\n        monthYearContainer.appendChild(yearText);\n        const yearInput = document.createElement('input');\n        yearInput.type = 'text';\n        yearInput.value = date.getFullYear().toString();\n        yearInput.className = 'year-input';\n        yearInput.pattern = \"^\\\\d{4}$\";\n        yearInput.title = 'Enter a 4-digit year';\n        yearInput.style.display = 'none';\n        monthYearContainer.appendChild(yearInput);\n        header.appendChild(monthYearContainer);\n        // Next button\n        const nextButton = document.createElement('button');\n        nextButton.className = 'nav-button next';\n        nextButton.innerHTML = '&#10095;';\n        nextButton.title = 'Next Month';\n        nextButton.addEventListener('click', (e) => {\n            e.stopPropagation();\n            if (calendarSide === 'left') {\n                this.leftViewDate.setMonth(this.leftViewDate.getMonth() + 1);\n                if (this.leftViewDate >= this.rightViewDate) {\n                    this.rightViewDate = new Date(this.leftViewDate.getFullYear(), this.leftViewDate.getMonth() + 1, 1);\n                }\n            }\n            else {\n                this.rightViewDate.setMonth(this.rightViewDate.getMonth() + 1);\n                if (this.rightViewDate <= this.leftViewDate) {\n                    this.leftViewDate = new Date(this.rightViewDate.getFullYear(), this.rightViewDate.getMonth() - 1, 1);\n                }\n            }\n            this.renderCalendar();\n        });\n        header.appendChild(nextButton);\n        // Year input handling\n        yearText.addEventListener('click', () => {\n            yearText.style.display = 'none';\n            yearInput.style.display = '';\n            yearInput.focus();\n            yearInput.select();\n        });\n        yearInput.addEventListener('blur', () => {\n            yearInput.style.display = 'none';\n            yearText.style.display = '';\n            const val = yearInput.value.trim();\n            if (/^\\d{4}$/.test(val)) {\n                yearText.textContent = val;\n                const newYear = parseInt(val, 10);\n                if (!isNaN(newYear)) {\n                    if (calendarSide === 'left') {\n                        this.leftViewDate.setFullYear(newYear);\n                        if (this.leftViewDate >= this.rightViewDate) {\n                            this.rightViewDate = new Date(this.leftViewDate.getFullYear(), this.leftViewDate.getMonth() + 1, 1);\n                        }\n                    }\n                    else {\n                        this.rightViewDate.setFullYear(newYear);\n                        if (this.rightViewDate <= this.leftViewDate) {\n                            this.leftViewDate = new Date(this.rightViewDate.getFullYear(), this.rightViewDate.getMonth() - 1, 1);\n                        }\n                    }\n                    this.renderCalendar();\n                }\n            }\n            else {\n                yearInput.value = yearText.textContent || '';\n            }\n        });\n        yearInput.addEventListener('keydown', (e) => {\n            if ([\"Enter\", \"Escape\", \"Backspace\", \"Delete\", \"Tab\", \"ArrowLeft\", \"ArrowRight\", \"Home\", \"End\"].includes(e.key)) {\n                if (e.key === \"Enter\") {\n                    yearInput.blur();\n                }\n                return;\n            }\n            if (!/\\d/.test(e.key) || (yearInput.value.length >= 4 && !window.getSelection()?.toString())) {\n                e.preventDefault();\n            }\n        });\n        return header;\n    }\n    createWeekdays() {\n        const weekdaysContainer = document.createElement('div');\n        weekdaysContainer.className = 'calendar-weekdays';\n        const weekdays = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\n        weekdays.forEach(day => {\n            const dayElem = document.createElement('div');\n            dayElem.className = 'calendar-weekday';\n            dayElem.textContent = day;\n            weekdaysContainer.appendChild(dayElem);\n        });\n        return weekdaysContainer;\n    }\n    createDaysGrid(monthDate) {\n        const daysGrid = document.createElement('div');\n        daysGrid.className = 'calendar-days-grid';\n        const year = monthDate.getFullYear();\n        const month = monthDate.getMonth();\n        const firstDay = new Date(year, month, 1).getDay();\n        const daysInMonth = new Date(year, month + 1, 0).getDate();\n        // Fill initial empty days\n        for (let i = 0; i < firstDay; i++) {\n            const empty = document.createElement('div');\n            empty.className = 'calendar-day empty';\n            daysGrid.appendChild(empty);\n        }\n        for (let day = 1; day <= daysInMonth; day++) {\n            const dayElement = document.createElement('div');\n            dayElement.className = 'calendar-day';\n            dayElement.textContent = String(day);\n            dayElement.dataset.date = new Date(year, month, day).toDateString();\n            // Highlight selected range\n            const currentDate = new Date(year, month, day);\n            currentDate.setHours(0, 0, 0, 0);\n            // Grey out if outside allowed range\n            let isDisabled = false;\n            if ((this.defaultStartDate && currentDate < this.defaultStartDate) || (this.defaultEndDate && currentDate > this.defaultEndDate)) {\n                dayElement.classList.add('disabled', 'out-of-range');\n                isDisabled = true;\n            }\n            if (this.startDate && this.endDate) {\n                if (currentDate.getTime() === this.startDate.getTime()) {\n                    dayElement.classList.add('selected', 'range-start');\n                }\n                else if (currentDate.getTime() === this.endDate.getTime()) {\n                    dayElement.classList.add('selected', 'range-end');\n                }\n                else if (currentDate > this.startDate && currentDate < this.endDate) {\n                    dayElement.classList.add('in-range');\n                }\n            }\n            else if (this.startDate && !this.endDate && currentDate.getTime() === this.startDate.getTime()) {\n                dayElement.classList.add('selected');\n            }\n            if (!isDisabled) {\n                dayElement.addEventListener('click', () => this.selectDate(day, year, month));\n            }\n            daysGrid.appendChild(dayElement);\n        }\n        return daysGrid;\n    }\n    selectDate(day, year, month) {\n        const selectedDate = new Date(year, month, day);\n        selectedDate.setHours(0, 0, 0, 0);\n        if (!this.startDate || (this.startDate && this.endDate)) {\n            this.startDate = selectedDate;\n            this.endDate = null;\n        }\n        else {\n            if (selectedDate < this.startDate) {\n                this.endDate = this.startDate;\n                this.startDate = selectedDate;\n            }\n            else {\n                this.endDate = selectedDate;\n            }\n        }\n        this.renderCalendar();\n        if (this.onChangeCallback) {\n            if (this.startDate && this.endDate) {\n                this.onChangeCallback({ start: this.startDate, end: this.endDate });\n            }\n            else if (this.startDate) {\n                this.onChangeCallback({ start: this.startDate, end: this.startDate });\n            }\n        }\n    }\n    setDates(startDate, endDate) {\n        this.startDate = startDate;\n        this.endDate = endDate;\n        if (this.startDate && this.endDate &&\n            this.startDate.getMonth() === this.endDate.getMonth() &&\n            this.startDate.getFullYear() === this.endDate.getFullYear()) {\n            this.leftViewDate = new Date(this.startDate.getFullYear(), this.startDate.getMonth(), 1);\n            this.rightViewDate = new Date(this.startDate.getFullYear(), this.startDate.getMonth() + 1, 1);\n        }\n        else if (this.startDate && this.endDate) {\n            this.leftViewDate = new Date(this.startDate.getFullYear(), this.startDate.getMonth(), 1);\n            this.rightViewDate = new Date(this.endDate.getFullYear(), this.endDate.getMonth(), 1);\n        }\n        this.renderCalendar();\n    }\n    formatDate(date) {\n        const options = { year: 'numeric', month: '2-digit', day: '2-digit' };\n        return date.toLocaleDateString(undefined, options);\n    }\n    createQuickSelectSection() {\n        const section = document.createElement('div');\n        section.className = 'quick-select-section';\n        const buttonsData = [\n            { text: 'Today', range: 'today' },\n            { text: 'Last 7 Days', range: 'last7days' },\n            { text: 'Last 15 Days', range: 'last15days' },\n            { text: 'This Month', range: 'thismonth' },\n            { text: 'Last 3 Months', range: 'last3months' },\n            { text: 'This Year', range: 'thisyear' }\n        ];\n        buttonsData.forEach(btnInfo => {\n            const button = document.createElement('button');\n            button.textContent = btnInfo.text;\n            button.dataset.range = btnInfo.range;\n            button.className = 'quick-select-button';\n            button.addEventListener('click', () => this.handleQuickSelect(btnInfo.range));\n            section.appendChild(button);\n        });\n        // Reset Button\n        const resetButton = document.createElement('button');\n        resetButton.className = 'reset-button';\n        resetButton.title = 'Clear selection';\n        resetButton.textContent = 'Reset';\n        resetButton.addEventListener('click', () => {\n            this.resetSelection();\n        });\n        const bottomBar = document.createElement('div');\n        bottomBar.className = 'calendar-bottom-bar';\n        bottomBar.appendChild(resetButton);\n        section.appendChild(bottomBar);\n        return section;\n    }\n    handleQuickSelect(rangeType) {\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        let startDate, endDate;\n        switch (rangeType) {\n            case 'today':\n                startDate = new Date(today);\n                endDate = new Date(today);\n                break;\n            case 'last7days':\n                endDate = new Date(today);\n                startDate = new Date(today);\n                startDate.setDate(today.getDate() - 6);\n                break;\n            case 'last15days':\n                endDate = new Date(today);\n                startDate = new Date(today);\n                startDate.setDate(today.getDate() - 14);\n                break;\n            case 'thismonth':\n                startDate = new Date(today.getFullYear(), today.getMonth(), 1);\n                endDate = new Date(today.getFullYear(), today.getMonth() + 1, 0);\n                break;\n            case 'last3months':\n                endDate = new Date(today);\n                startDate = new Date(today.getFullYear(), today.getMonth() - 3, 1);\n                break;\n            case 'thisyear':\n                startDate = new Date(today.getFullYear(), 0, 1);\n                endDate = new Date(today.getFullYear(), 11, 31);\n                break;\n            default:\n                return;\n        }\n        this.setDates(startDate, endDate);\n        if (this.onChangeCallback) {\n            this.onChangeCallback({ start: startDate, end: endDate });\n        }\n    }\n    resetSelection() {\n        this.startDate = null;\n        this.endDate = null;\n        this.leftViewDate = new Date();\n        this.rightViewDate = new Date();\n        this.rightViewDate.setMonth(this.rightViewDate.getMonth() + 1);\n        this.renderCalendar();\n        if (this.onResetCallback) {\n            this.onResetCallback();\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///993\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__(132);
/******/ 	calendarblizC41067D025DF46B28D497705D8C4301B_DEBUG = __webpack_exports__;
/******/ 	
/******/ })()
;
//# sourceMappingURL=https://localhost:8080/assets/visual.js.map